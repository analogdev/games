{"version":3,"file":"tracery.js","sourceRoot":"","sources":["../src/tracery.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable */\n//@ts-nocheck\n\nvar tracery = (function () {\n  var rng = Math.random;\n\n  var setRng = function setRng(newRng) {\n    rng = newRng;\n  };\n\n  var TraceryNode = function (parent, childIndex, settings) {\n    this.errors = [];\n\n    // No input? Add an error, but continue anyways\n    if (settings.raw === undefined) {\n      this.errors.push('Empty input for node');\n      settings.raw = '';\n    }\n\n    // If the root node of an expansion, it will have the grammar passed as the 'parent'\n    //  set the grammar from the 'parent', and set all other values for a root node\n    if (parent instanceof tracery.Grammar) {\n      this.grammar = parent;\n      this.parent = null;\n      this.depth = 0;\n      this.childIndex = 0;\n    } else {\n      this.grammar = parent.grammar;\n      this.parent = parent;\n      this.depth = parent.depth + 1;\n      this.childIndex = childIndex;\n    }\n\n    this.raw = settings.raw;\n    this.type = settings.type;\n    this.isExpanded = false;\n\n    if (!this.grammar) {\n      console.warn('No grammar specified for this node', this);\n    }\n  };\n\n  TraceryNode.prototype.toString = function () {\n    return \"Node('\" + this.raw + \"' \" + this.type + ' d:' + this.depth + ')';\n  };\n\n  // Expand the node (with the given child rule)\n  //  Make children if the node has any\n  TraceryNode.prototype.expandChildren = function (childRule, preventRecursion) {\n    this.children = [];\n    this.finishedText = '';\n\n    // Set the rule for making children,\n    // and expand it into section\n    this.childRule = childRule;\n    if (this.childRule !== undefined) {\n      var sections = tracery.parse(childRule);\n\n      // Add errors to this\n      if (sections.errors.length > 0) {\n        this.errors = this.errors.concat(sections.errors);\n      }\n\n      for (var i = 0; i < sections.length; i++) {\n        this.children[i] = new TraceryNode(this, i, sections[i]);\n        if (!preventRecursion) this.children[i].expand(preventRecursion);\n\n        // Add in the finished text\n        this.finishedText += this.children[i].finishedText;\n      }\n    } else {\n      // In normal operation, this shouldn't ever happen\n      this.errors.push(\"No child rule provided, can't expand children\");\n      console.warn(\"No child rule provided, can't expand children\");\n    }\n  };\n\n  // Expand this rule (possibly creating children)\n  TraceryNode.prototype.expand = function (preventRecursion) {\n    if (!this.isExpanded) {\n      this.isExpanded = true;\n\n      this.expansionErrors = [];\n\n      // Types of nodes\n      // -1: raw, needs parsing\n      //  0: Plaintext\n      //  1: Tag (\"#symbol.mod.mod2.mod3#\" or \"#[pushTarget:pushRule]symbol.mod\")\n      //  2: Action (\"[pushTarget:pushRule], [pushTarget:POP]\", more in the future)\n\n      switch (this.type) {\n        // Raw rule\n        case -1:\n          this.expandChildren(this.raw, preventRecursion);\n          break;\n\n        // plaintext, do nothing but copy text into finsihed text\n        case 0:\n          this.finishedText = this.raw;\n          break;\n\n        // Tag\n        case 1:\n          // Parse to find any actions, and figure out what the symbol is\n          this.preactions = [];\n          this.postactions = [];\n\n          var parsed = tracery.parseTag(this.raw);\n\n          // Break into symbol actions and modifiers\n          this.symbol = parsed.symbol;\n          this.modifiers = parsed.modifiers;\n\n          // Create all the preactions from the raw syntax\n          for (var i = 0; i < parsed.preactions.length; i++) {\n            this.preactions[i] = new NodeAction(this, parsed.preactions[i].raw);\n          }\n          for (var i = 0; i < parsed.postactions.length; i++) {\n            //   this.postactions[i] = new NodeAction(this, parsed.postactions[i].raw);\n          }\n\n          // Make undo actions for all preactions (pops for each push)\n          for (var i = 0; i < this.preactions.length; i++) {\n            if (this.preactions[i].type === 0)\n              this.postactions.push(this.preactions[i].createUndo());\n          }\n\n          // Activate all the preactions\n          for (var i = 0; i < this.preactions.length; i++) {\n            this.preactions[i].activate();\n          }\n\n          this.finishedText = this.raw;\n\n          // Expand (passing the node, this allows tracking of recursion depth)\n\n          var selectedRule = this.grammar.selectRule(this.symbol, this, this.errors);\n\n          this.expandChildren(selectedRule, preventRecursion);\n\n          // Apply modifiers\n          // TODO: Update parse function to not trigger on hashtags within parenthesis within tags,\n          //   so that modifier parameters can contain tags \"#story.replace(#protagonist#, #newCharacter#)#\"\n          for (var i = 0; i < this.modifiers.length; i++) {\n            var modName = this.modifiers[i];\n            var modParams = [];\n            if (modName.indexOf('(') > 0) {\n              var regExp = /\\(([^)]+)\\)/;\n\n              // Todo: ignore any escaped commas.  For now, commas always split\n              var results = regExp.exec(this.modifiers[i]);\n              if (!results || results.length < 2) {\n              } else {\n                var modParams = results[1].split(',');\n                modName = this.modifiers[i].substring(0, modName.indexOf('('));\n              }\n            }\n\n            var mod = this.grammar.modifiers[modName];\n\n            // Missing modifier?\n            if (!mod) {\n              this.errors.push('Missing modifier ' + modName);\n              this.finishedText += '((.' + modName + '))';\n            } else {\n              this.finishedText = mod(this.finishedText, modParams);\n            }\n          }\n\n          // Perform post-actions\n          for (var i = 0; i < this.postactions.length; i++) {\n            this.postactions[i].activate();\n          }\n          break;\n        case 2:\n          // Just a bare action?  Expand it!\n          this.action = new NodeAction(this, this.raw);\n          this.action.activate();\n\n          // No visible text for an action\n          // TODO: some visible text for if there is a failure to perform the action?\n          this.finishedText = '';\n          break;\n      }\n    } else {\n      //console.warn(\"Already expanded \" + this);\n    }\n  };\n\n  TraceryNode.prototype.clearEscapeChars = function () {\n    this.finishedText = this.finishedText\n      .replace(/\\\\\\\\/g, 'DOUBLEBACKSLASH')\n      .replace(/\\\\/g, '')\n      .replace(/DOUBLEBACKSLASH/g, '\\\\');\n  };\n\n  // An action that occurs when a node is expanded\n  // Types of actions:\n  // 0 Push: [key:rule]\n  // 1 Pop: [key:POP]\n  // 2 function: [functionName(param0,param1)] (TODO!)\n  function NodeAction(node, raw) {\n    /*\n\t\t if (!node)\n\t\t console.warn(\"No node for NodeAction\");\n\t\t if (!raw)\n\t\t console.warn(\"No raw commands for NodeAction\");\n\t\t */\n\n    this.node = node;\n\n    var sections = raw.split(':');\n    this.target = sections[0];\n\n    // No colon? A function!\n    if (sections.length === 1) {\n      this.type = 2;\n    }\n\n    // Colon? It's either a push or a pop\n    else {\n      this.rule = sections[1];\n      if (this.rule === 'POP') {\n        this.type = 1;\n      } else {\n        this.type = 0;\n      }\n    }\n  }\n\n  NodeAction.prototype.createUndo = function () {\n    if (this.type === 0) {\n      return new NodeAction(this.node, this.target + ':POP');\n    }\n    // TODO Not sure how to make Undo actions for functions or POPs\n    return null;\n  };\n\n  NodeAction.prototype.activate = function () {\n    var grammar = this.node.grammar;\n    switch (this.type) {\n      case 0:\n        // split into sections (the way to denote an array of rules)\n        this.ruleSections = this.rule.split(',');\n        this.finishedRules = [];\n        this.ruleNodes = [];\n        for (var i = 0; i < this.ruleSections.length; i++) {\n          var n = new TraceryNode(grammar, 0, {\n            type: -1,\n            raw: this.ruleSections[i],\n          });\n\n          n.expand();\n\n          this.finishedRules.push(n.finishedText);\n        }\n\n        // TODO: escape commas properly\n        grammar.pushRules(this.target, this.finishedRules, this);\n        break;\n      case 1:\n        grammar.popRules(this.target);\n        break;\n      case 2:\n        grammar.flatten(this.target, true);\n        break;\n    }\n  };\n\n  NodeAction.prototype.toText = function () {\n    switch (this.type) {\n      case 0:\n        return this.target + ':' + this.rule;\n      case 1:\n        return this.target + ':POP';\n      case 2:\n        return '((some function))';\n      default:\n        return '((Unknown Action))';\n    }\n  };\n\n  // Sets of rules\n  // Can also contain conditional or fallback sets of rulesets)\n  function RuleSet(grammar, raw) {\n    this.raw = raw;\n    this.grammar = grammar;\n    this.falloff = 1;\n\n    if (Array.isArray(raw)) {\n      this.defaultRules = raw;\n    } else if (typeof raw === 'string' || raw instanceof String) {\n      this.defaultRules = [raw];\n    } else if (raw === 'object') {\n      // TODO: support for conditional and hierarchical rule sets\n    }\n  }\n\n  RuleSet.prototype.selectRule = function (errors) {\n    // console.log(\"Get rule\", this.raw);\n    // Is there a conditional?\n    if (this.conditionalRule) {\n      var value = this.grammar.expand(this.conditionalRule, true);\n      // does this value match any of the conditionals?\n      if (this.conditionalValues[value]) {\n        var v = this.conditionalValues[value].selectRule(errors);\n        if (v !== null && v !== undefined) return v;\n      }\n      // No returned value?\n    }\n\n    // Is there a ranked order?\n    if (this.ranking) {\n      for (var i = 0; i < this.ranking.length; i++) {\n        var v = this.ranking.selectRule();\n        if (v !== null && v !== undefined) return v;\n      }\n\n      // Still no returned value?\n    }\n\n    if (this.defaultRules !== undefined) {\n      var index = 0;\n      // Select from this basic array of rules\n\n      // Get the distribution from the grammar if there is no other\n      var distribution = this.distribution;\n      if (!distribution) distribution = this.grammar.distribution;\n\n      switch (distribution) {\n        case 'shuffle':\n          // create a shuffle desk\n          if (!this.shuffledDeck || this.shuffledDeck.length === 0) {\n            // make an array\n            this.shuffledDeck = fyshuffle(\n              Array.apply(null, {\n                length: this.defaultRules.length,\n              }).map(Number.call, Number),\n              this.falloff\n            );\n          }\n\n          index = this.shuffledDeck.pop();\n\n          break;\n        case 'weighted':\n          errors.push('Weighted distribution not yet implemented');\n          break;\n        case 'falloff':\n          errors.push('Falloff distribution not yet implemented');\n          break;\n        default:\n          index = Math.floor(Math.pow(rng(), this.falloff) * this.defaultRules.length);\n          break;\n      }\n\n      if (!this.defaultUses) this.defaultUses = [];\n      this.defaultUses[index] = ++this.defaultUses[index] || 1;\n      return this.defaultRules[index];\n    }\n\n    errors.push('No default rules defined for ' + this);\n    return null;\n  };\n\n  RuleSet.prototype.clearState = function () {\n    if (this.defaultUses) {\n      this.defaultUses = [];\n    }\n  };\n\n  function fyshuffle(array, falloff) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(rng() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  var Symbol = function (grammar, key, rawRules) {\n    // Symbols can be made with a single value, and array, or array of objects of (conditions/values)\n    this.key = key;\n    this.grammar = grammar;\n    this.rawRules = rawRules;\n\n    this.baseRules = new RuleSet(this.grammar, rawRules);\n    this.clearState();\n  };\n\n  Symbol.prototype.clearState = function () {\n    // Clear the stack and clear all ruleset usages\n    this.stack = [this.baseRules];\n\n    this.uses = [];\n    this.baseRules.clearState();\n  };\n\n  Symbol.prototype.pushRules = function (rawRules) {\n    var rules = new RuleSet(this.grammar, rawRules);\n    this.stack.push(rules);\n  };\n\n  Symbol.prototype.popRules = function () {\n    this.stack.pop();\n  };\n\n  Symbol.prototype.selectRule = function (node, errors) {\n    this.uses.push({\n      node: node,\n    });\n\n    if (this.stack.length === 0) {\n      errors.push(\"The rule stack for '\" + this.key + \"' is empty, too many pops?\");\n      return '((' + this.key + '))';\n    }\n\n    return this.stack[this.stack.length - 1].selectRule();\n  };\n\n  Symbol.prototype.getActiveRules = function () {\n    if (this.stack.length === 0) {\n      return null;\n    }\n    return this.stack[this.stack.length - 1].selectRule();\n  };\n\n  Symbol.prototype.rulesToJSON = function () {\n    return JSON.stringify(this.rawRules);\n  };\n\n  var Grammar = function (raw, settings) {\n    this.modifiers = {};\n    this.loadFromRawObj(raw);\n  };\n\n  Grammar.prototype.clearState = function () {\n    var keys = Object.keys(this.symbols);\n    for (var i = 0; i < keys.length; i++) {\n      this.symbols[keys[i]].clearState();\n    }\n  };\n\n  Grammar.prototype.addModifiers = function (mods) {\n    // copy over the base modifiers\n    for (var key in mods) {\n      if (mods.hasOwnProperty(key)) {\n        this.modifiers[key] = mods[key];\n      }\n    }\n  };\n\n  Grammar.prototype.loadFromRawObj = function (raw) {\n    this.raw = raw;\n    this.symbols = {};\n    this.subgrammars = [];\n\n    if (this.raw) {\n      // Add all rules to the grammar\n      for (var key in this.raw) {\n        if (this.raw.hasOwnProperty(key)) {\n          this.symbols[key] = new Symbol(this, key, this.raw[key]);\n        }\n      }\n    }\n  };\n\n  Grammar.prototype.createRoot = function (rule) {\n    // Create a node and subnodes\n    var root = new TraceryNode(this, 0, {\n      type: -1,\n      raw: rule,\n    });\n\n    return root;\n  };\n\n  Grammar.prototype.expand = function (rule, allowEscapeChars) {\n    var root = this.createRoot(rule);\n    root.expand();\n    if (!allowEscapeChars) root.clearEscapeChars();\n\n    return root;\n  };\n\n  Grammar.prototype.flatten = function (rule, allowEscapeChars) {\n    var root = this.expand(rule, allowEscapeChars);\n\n    return root.finishedText;\n  };\n\n  Grammar.prototype.toJSON = function () {\n    var keys = Object.keys(this.symbols);\n    var symbolJSON = [];\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      symbolJSON.push(' \"' + key + '\" : ' + this.symbols[key].rulesToJSON());\n    }\n    return '{\\n' + symbolJSON.join(',\\n') + '\\n}';\n  };\n\n  // Create or push rules\n  Grammar.prototype.pushRules = function (key, rawRules, sourceAction) {\n    if (this.symbols[key] === undefined) {\n      this.symbols[key] = new Symbol(this, key, rawRules);\n      if (sourceAction) this.symbols[key].isDynamic = true;\n    } else {\n      this.symbols[key].pushRules(rawRules);\n    }\n  };\n\n  Grammar.prototype.popRules = function (key) {\n    if (!this.symbols[key]) this.errors.push(\"Can't pop: no symbol for key \" + key);\n    this.symbols[key].popRules();\n  };\n\n  Grammar.prototype.selectRule = function (key, node, errors) {\n    if (this.symbols[key]) {\n      var rule = this.symbols[key].selectRule(node, errors);\n\n      return rule;\n    }\n\n    // Failover to alternative subgrammars\n    for (var i = 0; i < this.subgrammars.length; i++) {\n      if (this.subgrammars[i].symbols[key]) return this.subgrammars[i].symbols[key].selectRule();\n    }\n\n    // No symbol?\n    errors.push(\"No symbol for '\" + key + \"'\");\n    return '((' + key + '))';\n  };\n\n  // Parses a plaintext rule in the tracery syntax\n  tracery = {\n    createGrammar: function (raw) {\n      return new Grammar(raw);\n    },\n\n    // Parse the contents of a tag\n    parseTag: function (tagContents) {\n      var parsed = {\n        symbol: undefined,\n        preactions: [],\n        postactions: [],\n        modifiers: [],\n      };\n      var sections = tracery.parse(tagContents);\n      var symbolSection = undefined;\n      for (var i = 0; i < sections.length; i++) {\n        if (sections[i].type === 0) {\n          if (symbolSection === undefined) {\n            symbolSection = sections[i].raw;\n          } else {\n            throw 'multiple main sections in ' + tagContents;\n          }\n        } else {\n          parsed.preactions.push(sections[i]);\n        }\n      }\n\n      if (symbolSection === undefined) {\n        //   throw (\"no main section in \" + tagContents);\n      } else {\n        var components = symbolSection.split('.');\n        parsed.symbol = components[0];\n        parsed.modifiers = components.slice(1);\n      }\n      return parsed;\n    },\n\n    parse: function (rule) {\n      var depth = 0;\n      var inTag = false;\n      var sections = [];\n      var escaped = false;\n\n      var errors = [];\n      var start = 0;\n\n      var escapedSubstring = '';\n      var lastEscapedChar = undefined;\n\n      if (rule === null) {\n        var sections = [];\n        sections.errors = errors;\n\n        return sections;\n      }\n\n      function createSection(start, end, type) {\n        if (end - start < 1) {\n          if (type === 1) errors.push(start + ': empty tag');\n          if (type === 2) errors.push(start + ': empty action');\n        }\n        var rawSubstring;\n        if (lastEscapedChar !== undefined) {\n          rawSubstring = escapedSubstring + '\\\\' + rule.substring(lastEscapedChar + 1, end);\n        } else {\n          rawSubstring = rule.substring(start, end);\n        }\n        sections.push({\n          type: type,\n          raw: rawSubstring,\n        });\n        lastEscapedChar = undefined;\n        escapedSubstring = '';\n      }\n\n      for (var i = 0; i < rule.length; i++) {\n        if (!escaped) {\n          var c = rule.charAt(i);\n\n          switch (c) {\n            // Enter a deeper bracketed section\n            case '[':\n              if (depth === 0 && !inTag) {\n                if (start < i) createSection(start, i, 0);\n                start = i + 1;\n              }\n              depth++;\n              break;\n\n            case ']':\n              depth--;\n\n              // End a bracketed section\n              if (depth === 0 && !inTag) {\n                createSection(start, i, 2);\n                start = i + 1;\n              }\n              break;\n\n            // Hashtag\n            //   ignore if not at depth 0, that means we are in a bracket\n            case '#':\n              if (depth === 0) {\n                if (inTag) {\n                  createSection(start, i, 1);\n                  start = i + 1;\n                } else {\n                  if (start < i) createSection(start, i, 0);\n                  start = i + 1;\n                }\n                inTag = !inTag;\n              }\n              break;\n\n            case '\\\\':\n              escaped = true;\n              escapedSubstring = escapedSubstring + rule.substring(start, i);\n              start = i + 1;\n              lastEscapedChar = i;\n              break;\n          }\n        } else {\n          escaped = false;\n        }\n      }\n      if (start < rule.length) createSection(start, rule.length, 0);\n\n      if (inTag) {\n        errors.push('Unclosed tag');\n      }\n      if (depth > 0) {\n        errors.push('Too many [');\n      }\n      if (depth < 0) {\n        errors.push('Too many ]');\n      }\n\n      // Strip out empty plaintext sections\n\n      sections = sections.filter(function (section) {\n        if (section.type === 0 && section.raw.length === 0) return false;\n        return true;\n      });\n      sections.errors = errors;\n      return sections;\n    },\n  };\n\n  // Externalize\n  tracery.TraceryNode = TraceryNode;\n\n  tracery.Grammar = Grammar;\n  tracery.Symbol = Symbol;\n  tracery.RuleSet = RuleSet;\n\n  tracery.setRng = setRng;\n\n  return tracery;\n})();\n\nexport default tracery;\n"]}