{"version":3,"file":"ArtifactProcgen.js","sourceRoot":"","sources":["../src/ArtifactProcgen.ts"],"names":[],"mappings":";;;AAAA,yDAA6E;AAC7E,iDAO+B;AAE/B,MAAM,SAAS,GAAG,IAAI,GAAG,EAAsB,CAAC;AACzC,MAAM,YAAY,GAAG,CAAC,QAA8B,EAAU,EAAE;IACrE,IAAI,CAAC,QAAQ;QAAE,OAAO,SAAS,CAAC;IAEhC,MAAM,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC1C,IAAI,MAAM;QAAE,OAAO,MAAM,CAAC;IAE1B,MAAM,IAAI,GAAG,IAAA,gCAAwB,EAAC,QAAQ,CAAC,CAAC;IAChD,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAEjC,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAVW,QAAA,YAAY,gBAUvB;AAEF,MAAM,SAAS,GAAG,CAAC,GAAW,EAAU,EAAE;IACxC,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,MAAM,KAAK,GAAG,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAC3C,OAAO,GAAG,CAAC,MAAM,GAAG,GAAG,EAAE;QACvB,GAAG,GAAG,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;KAC7D;IAED,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEK,MAAM,YAAY,GAAG,CAC1B,MAAsB,EACtB,eAA6B,oBAAY,CAAC,SAAS,EACnD,cAAqB,aAAK,CAAC,SAAS,EAC1B,EAAE,CACZ,CAAC;IACC,EAAE,EAAE,SAAS,CAAC,EAAE,CAAe;IAC/B,kBAAkB,EAAE,6BAAiB;IACrC,WAAW;IACX,iBAAiB,EAAE,IAAI,CAAC,GAAG,EAAE;IAC7B,UAAU,EAAE,yBAAa;IACzB,YAAY,EAAE,yBAAa;IAC3B,cAAc,EAAE,IAAI;IACpB,aAAa,EAAE,CAAC;IAChB,eAAe,EAAE,CAAC;IAClB,MAAM,EAAE,MAAM;IACd,YAAY;IACZ,OAAO,EAAE;QACP,mBAAmB,EAAE,GAAG;QACxB,mBAAmB,EAAE,GAAG;QACxB,eAAe,EAAE,GAAG;QACpB,eAAe,EAAE,EAAE;QACnB,aAAa,EAAE,GAAG;KACnB;IACD,UAAU,EAAE,SAAS;CACT,CAAA,CAAC;AAzBJ,QAAA,YAAY,gBAyBR;AAEV,MAAM,sBAAsB,GAAG,CACpC,MAAsB,EACtB,eAA6B,oBAAY,CAAC,SAAS,EACnD,cAAqB,aAAK,CAAC,SAAS,EAC1B,EAAE,CAAC,IAAA,oBAAY,EAAC,MAAM,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;AAJlD,QAAA,sBAAsB,0BAI4B;AAElD,QAAA,UAAU,GAAG,IAAA,8BAAsB,EAC9C,sBAAc,CAAC,MAAM,EACrB,oBAAY,CAAC,SAAS,EACtB,aAAK,CAAC,SAAS,CAChB,CAAC;AAEW,QAAA,QAAQ,GAAG,IAAA,8BAAsB,EAC5C,sBAAc,CAAC,IAAI,EACnB,oBAAY,CAAC,SAAS,EACtB,aAAK,CAAC,SAAS,CAChB,CAAC;AAEW,QAAA,QAAQ,GAAG,IAAA,8BAAsB,EAC5C,sBAAc,CAAC,IAAI,EACnB,oBAAY,CAAC,SAAS,EACtB,aAAK,CAAC,SAAS,CAChB,CAAC;AAEW,QAAA,aAAa,GAAG,IAAA,8BAAsB,EACjD,sBAAc,CAAC,SAAS,EACxB,oBAAY,CAAC,SAAS,EACtB,aAAK,CAAC,SAAS,CAChB,CAAC","sourcesContent":["import { EMPTY_ADDRESS, EMPTY_LOCATION_ID } from '@darkforest_eth/constants';\nimport {\n  Artifact,\n  ArtifactId,\n  artifactNameFromArtifact,\n  ArtifactRarity,\n  ArtifactType,\n  Biome,\n} from '@darkforest_eth/types';\n\nconst namesById = new Map<ArtifactId, string>();\nexport const artifactName = (artifact: Artifact | undefined): string => {\n  if (!artifact) return 'Unknown';\n\n  const myName = namesById.get(artifact.id);\n  if (myName) return myName;\n\n  const name = artifactNameFromArtifact(artifact);\n  namesById.set(artifact.id, name);\n\n  return name;\n};\n\nconst randomHex = (len: number): string => {\n  let str = '';\n  const chars = 'abcdef0123456789'.split('');\n  while (str.length < len) {\n    str = str + chars[Math.floor(Math.random() * chars.length)];\n  }\n\n  return str;\n};\n\nexport const mockArtifact = (\n  rarity: ArtifactRarity,\n  artifactType: ArtifactType = ArtifactType.Spaceship,\n  planetBiome: Biome = Biome.WASTELAND\n): Artifact =>\n  ({\n    id: randomHex(64) as ArtifactId,\n    planetDiscoveredOn: EMPTY_LOCATION_ID,\n    planetBiome,\n    mintedAtTimestamp: Date.now(),\n    discoverer: EMPTY_ADDRESS,\n    currentOwner: EMPTY_ADDRESS,\n    isInititalized: true,\n    lastActivated: 0,\n    lastDeactivated: 0,\n    rarity: rarity,\n    artifactType,\n    upgrade: {\n      energyCapMultiplier: 120,\n      energyGroMultiplier: 100,\n      rangeMultiplier: 100,\n      speedMultiplier: 85,\n      defMultiplier: 100,\n    },\n    onPlanetId: undefined,\n  } as Artifact);\n\nexport const mockArtifactWithRarity = (\n  rarity: ArtifactRarity,\n  artifactType: ArtifactType = ArtifactType.Spaceship,\n  planetBiome: Biome = Biome.WASTELAND\n): Artifact => mockArtifact(rarity, artifactType, planetBiome);\n\nexport const mockCommon = mockArtifactWithRarity(\n  ArtifactRarity.Common,\n  ArtifactType.Spaceship,\n  Biome.WASTELAND\n);\n\nexport const mockRare = mockArtifactWithRarity(\n  ArtifactRarity.Rare,\n  ArtifactType.Spaceship,\n  Biome.WASTELAND\n);\n\nexport const mockEpic = mockArtifactWithRarity(\n  ArtifactRarity.Epic,\n  ArtifactType.Spaceship,\n  Biome.WASTELAND\n);\n\nexport const mockLegendary = mockArtifactWithRarity(\n  ArtifactRarity.Legendary,\n  ArtifactType.Spaceship,\n  Biome.WASTELAND\n);\n"]}