{"version":3,"file":"planet.js","sourceRoot":"","sources":["../src/planet.ts"],"names":[],"mappings":";;;AAcA;;GAEG;AACU,QAAA,WAAW,GAAG;IACzB,IAAI,EAAE,CAAgB;IACtB,GAAG,EAAE,CAAgB;IACrB,GAAG,EAAE,CAAgB;IACrB,KAAK,EAAE,CAAgB;IACvB,IAAI,EAAE,CAAgB;IACtB,IAAI,EAAE,CAAgB;IACtB,GAAG,EAAE,CAAgB;IACrB,KAAK,EAAE,CAAgB;IACvB,KAAK,EAAE,CAAgB;IACvB,IAAI,EAAE,CAAgB;IACtB,6FAA6F;CACrF,CAAC;AAEX;;GAEG;AACU,QAAA,gBAAgB,GAAG;IAC9B,CAAC,mBAAW,CAAC,IAAI,CAAC,EAAE,SAAS;IAC7B,CAAC,mBAAW,CAAC,GAAG,CAAC,EAAE,SAAS;IAC5B,CAAC,mBAAW,CAAC,GAAG,CAAC,EAAE,SAAS;IAC5B,CAAC,mBAAW,CAAC,KAAK,CAAC,EAAE,SAAS;IAC9B,CAAC,mBAAW,CAAC,IAAI,CAAC,EAAE,SAAS;IAC7B,CAAC,mBAAW,CAAC,IAAI,CAAC,EAAE,SAAS;IAC7B,CAAC,mBAAW,CAAC,GAAG,CAAC,EAAE,SAAS;IAC5B,CAAC,mBAAW,CAAC,KAAK,CAAC,EAAE,SAAS;IAC9B,CAAC,mBAAW,CAAC,KAAK,CAAC,EAAE,SAAS;IAC9B,CAAC,mBAAW,CAAC,IAAI,CAAC,EAAE,SAAS;CACrB,CAAC;AAOX;;GAEG;AACU,QAAA,UAAU,GAAG;IACxB,MAAM,EAAE,CAAe;IACvB,WAAW,EAAE,CAAe;IAC5B,KAAK,EAAE,CAAe;IACtB,YAAY,EAAE,CAAe;IAC7B,WAAW,EAAE,CAAe;CACpB,CAAC;AAEX;;GAEG;AACU,QAAA,eAAe,GAAG;IAC7B,CAAC,kBAAU,CAAC,MAAM,CAAC,EAAE,QAAQ;IAC7B,CAAC,kBAAU,CAAC,WAAW,CAAC,EAAE,gBAAgB;IAC1C,CAAC,kBAAU,CAAC,KAAK,CAAC,EAAE,SAAS;IAC7B,CAAC,kBAAU,CAAC,YAAY,CAAC,EAAE,eAAe;IAC1C,CAAC,kBAAU,CAAC,WAAW,CAAC,EAAE,QAAQ;CAC1B,CAAC;AA6GX,MAAa,WAAW;IAItB,YAAmB,MAAoB;QACrC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IAClB,CAAC;IAEM,MAAM;QACX,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;IAC/B,CAAC;IAEM,KAAK;QACV,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;CACF;AAhBD,kCAgBC;AAED,MAAa,mBAAuB,SAAQ,WAAW;IAGrD,YAAmB,KAAQ,EAAE,MAAoB;QAC/C,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAEM,KAAK;QACV,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;CACF;AAXD,kDAWC","sourcesContent":["import type { Biome, SpaceType } from './game_types';\nimport type { ArtifactId, EthAddress, LocationId } from './identifier';\nimport type { PlanetMessage } from './planetmessage';\nimport { Player } from './player';\nimport type { TransactionCollection } from './transaction';\nimport type { Upgrade, UpgradeState } from './upgrade';\nimport type { Abstract } from './utility';\nimport type { WorldLocation } from './world';\n\n/**\n * Abstract type representing a planet level.\n */\nexport type PlanetLevel = Abstract<number, 'PlanetLevel'>;\n\n/**\n * Enumeration of the possible planet levels.\n */\nexport const PlanetLevel = {\n  ZERO: 0 as PlanetLevel,\n  ONE: 1 as PlanetLevel,\n  TWO: 2 as PlanetLevel,\n  THREE: 3 as PlanetLevel,\n  FOUR: 4 as PlanetLevel,\n  FIVE: 5 as PlanetLevel,\n  SIX: 6 as PlanetLevel,\n  SEVEN: 7 as PlanetLevel,\n  EIGHT: 8 as PlanetLevel,\n  NINE: 9 as PlanetLevel,\n  // Don't forget to update MIN_PLANET_LEVEL and/or MAX_PLANET_LEVEL in the `constants` package\n} as const;\n\n/**\n * Mapping from PlanetLevel to pretty-printed names.\n */\nexport const PlanetLevelNames = {\n  [PlanetLevel.ZERO]: 'Level 0',\n  [PlanetLevel.ONE]: 'Level 1',\n  [PlanetLevel.TWO]: 'Level 2',\n  [PlanetLevel.THREE]: 'Level 3',\n  [PlanetLevel.FOUR]: 'Level 4',\n  [PlanetLevel.FIVE]: 'Level 5',\n  [PlanetLevel.SIX]: 'Level 6',\n  [PlanetLevel.SEVEN]: 'Level 7',\n  [PlanetLevel.EIGHT]: 'Level 8',\n  [PlanetLevel.NINE]: 'Level 9',\n} as const;\n\n/**\n * Abstract type representing a planet type.\n */\nexport type PlanetType = Abstract<number, 'PlanetType'>;\n\n/**\n * Enumeration of the planet types. (PLANET = 0, SILVER_BANK = 4)\n */\nexport const PlanetType = {\n  PLANET: 0 as PlanetType,\n  SILVER_MINE: 1 as PlanetType,\n  RUINS: 2 as PlanetType,\n  TRADING_POST: 3 as PlanetType,\n  SILVER_BANK: 4 as PlanetType,\n} as const;\n\n/**\n * Mapping from PlanetType to pretty-printed names.\n */\nexport const PlanetTypeNames = {\n  [PlanetType.PLANET]: 'Planet',\n  [PlanetType.SILVER_MINE]: 'Asteroid Field',\n  [PlanetType.RUINS]: 'Foundry',\n  [PlanetType.TRADING_POST]: 'Spacetime Rip',\n  [PlanetType.SILVER_BANK]: 'Quasar',\n} as const;\n\n/**\n * A list of five flags, indicating whether the planet has an attached comet\n * doubling each of five stats: (in order) [energyCap, energyGrowth, range,\n * speed, defense]\n */\nexport type PlanetBonus = [boolean, boolean, boolean, boolean, boolean, boolean];\n\n/**\n * Represents a Dark Forest planet object (planets, asteroid fields, quasars,\n * spacetime rips, and foundries). Note that some `Planet` fields (1) store\n * client-specific data that the blockchain is not aware of, such as\n * `unconfirmedDepartures` (tracks pending moves originating at this planet that\n * have been submitted to the blockchain from a client), or (2) store derived\n * data that is calculated separately client-side, such as `silverSpent` and\n * `bonus`. So this object does not cleanly map to any single object in the\n * DarkForest contract (or even any collection of objects).\n */\nexport type Planet = {\n  locationId: LocationId;\n  perlin: number;\n  spaceType: SpaceType;\n  owner: EthAddress; // should never be null; all unowned planets should have 0 address\n  hatLevel: number;\n\n  planetLevel: PlanetLevel;\n  planetType: PlanetType;\n  isHomePlanet: boolean;\n\n  energyCap: number;\n  energyGrowth: number;\n\n  silverCap: number;\n  silverGrowth: number;\n\n  range: number;\n  defense: number;\n  speed: number;\n\n  energy: number;\n  silver: number;\n\n  spaceJunk: number;\n\n  lastUpdated: number;\n  upgradeState: UpgradeState;\n  hasTriedFindingArtifact: boolean;\n  heldArtifactIds: ArtifactId[];\n  destroyed: boolean;\n  prospectedBlockNumber?: number;\n  localPhotoidUpgrade?: Upgrade;\n\n  transactions?: TransactionCollection;\n  unconfirmedAddEmoji: boolean;\n  unconfirmedClearEmoji: boolean;\n  loadingServerState: boolean;\n  needsServerRefresh: boolean;\n  lastLoadedServerState?: number;\n\n  emojiBobAnimation?: DFAnimation;\n  emojiZoopAnimation?: DFAnimation;\n  emojiZoopOutAnimation?: DFStatefulAnimation<string>;\n\n  silverSpent: number;\n\n  isInContract: boolean;\n  syncedWithContract: boolean;\n  coordsRevealed: boolean;\n  revealer?: EthAddress;\n  claimer?: EthAddress;\n  messages?: PlanetMessage<unknown>[];\n\n  bonus: PlanetBonus;\n\n  pausers: number;\n\n  invader?: EthAddress;\n  capturer?: EthAddress;\n  invadeStartBlock?: number;\n  isTargetPlanet: boolean;\n  isSpawnPlanet: boolean;\n  blockedPlanetIds: LocationId[];\n};\n\n/**\n * A planet whose coordinates are known to the client.\n */\nexport type LocatablePlanet = Planet & {\n  location: WorldLocation;\n  biome: Biome;\n};\n\n/**\n * A structure with default stats of planets in nebula at corresponding levels. For\n * example, silverCap[4] refers to the default silver capacity of a level 4\n * planet in nebula with no modifiers.\n */\nexport interface PlanetDefaults {\n  populationCap: number[];\n  populationGrowth: number[];\n  range: number[];\n  speed: number[];\n  defense: number[];\n  silverGrowth: number[];\n  silverCap: number[];\n  barbarianPercentage: number[];\n}\n\nexport class DFAnimation {\n  private readonly _update: () => number;\n  private _value: number;\n\n  public constructor(update: () => number) {\n    this._update = update;\n    this._value = 0;\n  }\n\n  public update() {\n    this._value = this._update();\n  }\n\n  public value() {\n    return this._value;\n  }\n}\n\nexport class DFStatefulAnimation<T> extends DFAnimation {\n  private readonly _state: T;\n\n  public constructor(state: T, update: () => number) {\n    super(update);\n    this._state = state;\n  }\n\n  public state(): T {\n    return this._state;\n  }\n}\n\nexport type AdminPlanet = {\n  x: number;\n  y: number;\n  level: number;\n  planetType: number;\n  requireValidLocationId: boolean;\n  revealLocation: boolean;\n  isTargetPlanet: boolean;\n  isSpawnPlanet: boolean;\n};\n"]}