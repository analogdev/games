{"version":3,"file":"identifier.js","sourceRoot":"","sources":["../src/identifier.ts"],"names":[],"mappings":"","sourcesContent":["import type { Abstract } from './utility';\n\n/**\n * a voyage UID. these start at 1 and auto-increment in the contract. this is\n * immutable and the only place a VoyageId should ever be created is on\n * initial deserialization of a QueuedArrival from contract data (see `serde`)\n */\nexport type VoyageId = Abstract<string, 'VoyageId'>;\n\n/**\n * a unique identifier for a location in the universe (corresponding to some\n * underlying coordinates (x, y)). This is a 64-character lowercase hex string\n * not prefixed with 0x. LocationIDs should only be instantiated through\n * `locationIdFromHexStr`, `locationIdFromDecStr`, `locationIdFromBigInt`, and\n * `locationIdFromEthersBN` in `serde`.\n */\nexport type LocationId = Abstract<string, 'LocationId'>;\n\n/**\n * This is expected to be a 40-character, lowercase hex string, prefixed with 0x\n * (so 42 characters in total). EthAddress should only ever be instantiated\n * through the `address` function in `serde`.\n */\nexport type EthAddress = Abstract<string, 'EthAddress'>;\n\n/**\n * A unique identifier for a Dark Forest NFT artifact. This is a 64-character\n * lowercase hex string not prefixed with 0x. ArtifactIDs should only be\n * instantiated through ArtifactIDs should only be instantiated through\n * `artifactIdFromHexStr`, `artifactIdFromDecStr`, and `artifactIdFromEthersBN`\n * in `serde`.\n */\nexport type ArtifactId = Abstract<string, 'ArtifactId'>;\n"]}