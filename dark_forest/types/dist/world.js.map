{"version":3,"file":"world.js","sourceRoot":"","sources":["../src/world.ts"],"names":[],"mappings":"","sourcesContent":["import type { LocationId } from './identifier';\n\n// TODO we should do the &never TS thing for world / canvas coords; as this is a\n// common source of bugs\n/**\n * Represents the coordinates of a location in the world.\n */\nexport type WorldCoords = {\n  x: number;\n  y: number;\n};\n\n/**\n * A location in the world with relevant properties: the location's ID\n * (deterministically generated from its coords), the spacetype perlin value at\n * these coordinates, and the biomebase perlin value at these coordinates\n * (combined with spacetype to derive the biome here)\n */\nexport type WorldLocation = {\n  coords: WorldCoords;\n  hash: LocationId;\n  perlin: number;\n  biomebase: number; // biome perlin value. combined with spaceType to get the actual biome\n};\n\n/**\n * Ok, this is gonna sound weird, but all rectangles are squares. Also, we only permit side lengths\n * that are powers of two, and ALSO!! The side lengths must be between {@link MIN_CHUNK_SIZE} and\n * {@link MAX_CHUNK_SIZE}.\n */\nexport interface Rectangle {\n  bottomLeft: WorldCoords;\n  sideLength: number;\n}\n\n/**\n * Represents a fully mined aligned square.\n */\nexport interface Chunk {\n  chunkFootprint: Rectangle;\n  planetLocations: WorldLocation[];\n  perlin: number; // approximate avg perlin value. used for rendering\n}\n\n/**\n * Various configuration used for calculating perlin.\n * Always make sure these values match the contracts you are working with\n * or else your transactions **will** be reverted.\n */\nexport interface PerlinConfig {\n  /**\n   * The key being used for the perlin calculation. Will be `SPACETYPE_KEY` or `BIOMEBASE_KEY`.\n   */\n  key: number;\n  /**\n   * The `PERLIN_LENGTH_SCALE` being used to calculate perlin.\n   */\n  scale: number;\n  /**\n   * Whether the X coordinate is being mirrored in the perlin calculation.\n   *\n   * @default false\n   */\n  mirrorX: boolean;\n  /**\n   * Whether the Y coordinate is being mirrored in the perlin calculation.\n   *\n   * @default false\n   */\n  mirrorY: boolean;\n  /**\n   * If the resulting perlin should be \"floored\".\n   *\n   * @default false\n   */\n  floor: boolean;\n}\n\n\n/**\n * Blocks move from one planet to another\n */\nexport type BlocklistMap = Map<LocationId, Map<LocationId, boolean>>;\n"]}