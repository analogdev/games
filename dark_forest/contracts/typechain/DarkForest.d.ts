/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DarkForestInterface extends ethers.utils.Interface {
  functions: {
    "_checkGameOver()": FunctionFragment;
    "arenaRevealLocation(tuple)": FunctionFragment;
    "bulkCreateAndReveal(tuple[])": FunctionFragment;
    "bulkCreatePlanet(tuple[])": FunctionFragment;
    "claimVictory()": FunctionFragment;
    "createAndReveal(tuple)": FunctionFragment;
    "createArenaPlanet(tuple)": FunctionFragment;
    "initializePlayer(uint256[2],uint256[2][2],uint256[2],uint256[8],uint256)": FunctionFragment;
    "isInitPlanet(tuple)": FunctionFragment;
    "notReady()": FunctionFragment;
    "ready()": FunctionFragment;
    "arenaPlayers(address)": FunctionFragment;
    "bulkGetArenaPlayers(uint256,uint256)": FunctionFragment;
    "bulkGetPlanetsArenaInfoByIds(uint256[])": FunctionFragment;
    "bulkGetSpawnPlanetIds(uint256,uint256)": FunctionFragment;
    "bulkGetTargetPlanetIds(uint256,uint256)": FunctionFragment;
    "getArenaConstants()": FunctionFragment;
    "getEndTime()": FunctionFragment;
    "getGameover()": FunctionFragment;
    "getGraphConstants()": FunctionFragment;
    "getGraphGameConstants()": FunctionFragment;
    "getInitPlanetHashes()": FunctionFragment;
    "getInitializers()": FunctionFragment;
    "getMatch(uint256)": FunctionFragment;
    "getMatches()": FunctionFragment;
    "getNSpawnPlanets()": FunctionFragment;
    "getNTargetPlanets()": FunctionFragment;
    "getNumMatches()": FunctionFragment;
    "getRoundDuration()": FunctionFragment;
    "getStartTime()": FunctionFragment;
    "getTeam(uint256)": FunctionFragment;
    "getWinners()": FunctionFragment;
    "isBlocked(uint256,uint256)": FunctionFragment;
    "planetsArenaInfo(uint256)": FunctionFragment;
    "spawnPlanetIds(uint256)": FunctionFragment;
    "targetPlanetIds(uint256)": FunctionFragment;
    "createLobby(address,bytes)": FunctionFragment;
    "giveSpaceShips(uint256)": FunctionFragment;
    "addScore(address,uint256)": FunctionFragment;
    "adminGiveSpaceShip(uint256,address,uint8)": FunctionFragment;
    "adminInitializePlanet(uint256,uint256)": FunctionFragment;
    "adminSetWorldRadius(uint256)": FunctionFragment;
    "changeLocationRevealCooldown(uint256)": FunctionFragment;
    "changeWorldRadiusMin(uint256)": FunctionFragment;
    "createPlanet(tuple)": FunctionFragment;
    "deductScore(address,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "safeSetOwner(address,uint256[2],uint256[2][2],uint256[2],uint256[8])": FunctionFragment;
    "setOwner(uint256,address)": FunctionFragment;
    "setPlanetTransferEnabled(bool)": FunctionFragment;
    "setTokenMintEndTime(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw()": FunctionFragment;
    "activateArtifact(uint256,uint256,uint256)": FunctionFragment;
    "adminGiveArtifact(tuple)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "createArtifact(tuple)": FunctionFragment;
    "deactivateArtifact(uint256)": FunctionFragment;
    "depositArtifact(uint256,uint256)": FunctionFragment;
    "doesArtifactExist(uint256)": FunctionFragment;
    "findArtifact(uint256[2],uint256[2][2],uint256[2],uint256[7])": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getArtifact(uint256)": FunctionFragment;
    "getArtifactAtIndex(uint256)": FunctionFragment;
    "getPlayerArtifactIds(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "prospectPlanet(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferArtifact(uint256,address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateArtifact(tuple)": FunctionFragment;
    "withdrawArtifact(uint256,uint256)": FunctionFragment;
    "capturePlanet(uint256)": FunctionFragment;
    "getIntFromUInt(uint256)": FunctionFragment;
    "invadePlanet(uint256[2],uint256[2][2],uint256[2],uint256[9])": FunctionFragment;
    "planetInCaptureZone(uint256,uint256)": FunctionFragment;
    "buyHat(uint256)": FunctionFragment;
    "checkRevealProof(uint256[2],uint256[2][2],uint256[2],uint256[9])": FunctionFragment;
    "getRefreshedPlanet(uint256,uint256)": FunctionFragment;
    "refreshPlanet(uint256)": FunctionFragment;
    "revealLocation(uint256[2],uint256[2][2],uint256[2],uint256[9])": FunctionFragment;
    "transferPlanet(uint256,address)": FunctionFragment;
    "upgradePlanet(uint256,uint256)": FunctionFragment;
    "withdrawSilver(uint256,uint256)": FunctionFragment;
    "adminFillPlanet(uint256)": FunctionFragment;
    "TOKEN_MINT_END_TIMESTAMP()": FunctionFragment;
    "adminAddress()": FunctionFragment;
    "artifactIdToPlanetId(uint256)": FunctionFragment;
    "artifactIdToVoyageId(uint256)": FunctionFragment;
    "bulkGetArtifacts(uint256,uint256)": FunctionFragment;
    "bulkGetArtifactsByIds(uint256[])": FunctionFragment;
    "bulkGetPlanetArrivals(uint256,uint256)": FunctionFragment;
    "bulkGetPlanetArrivalsByIds(uint256[])": FunctionFragment;
    "bulkGetPlanetArtifacts(uint256[])": FunctionFragment;
    "bulkGetPlanetIds(uint256,uint256)": FunctionFragment;
    "bulkGetPlanets(uint256,uint256)": FunctionFragment;
    "bulkGetPlanetsByIds(uint256[])": FunctionFragment;
    "bulkGetPlanetsDataByIds(uint256[])": FunctionFragment;
    "bulkGetPlanetsExtendedInfo(uint256,uint256)": FunctionFragment;
    "bulkGetPlanetsExtendedInfo2ByIds(uint256[])": FunctionFragment;
    "bulkGetPlanetsExtendedInfoByIds(uint256[])": FunctionFragment;
    "bulkGetPlayerIds(uint256,uint256)": FunctionFragment;
    "bulkGetPlayers(uint256,uint256)": FunctionFragment;
    "bulkGetRevealedCoordsByIds(uint256[])": FunctionFragment;
    "bulkGetRevealedPlanetIds(uint256,uint256)": FunctionFragment;
    "bulkGetVoyagesByIds(uint256[])": FunctionFragment;
    "getArtifactById(uint256)": FunctionFragment;
    "getArtifactPointValues()": FunctionFragment;
    "getArtifactsOnPlanet(uint256)": FunctionFragment;
    "getCumulativeRarities()": FunctionFragment;
    "getDefaultStats()": FunctionFragment;
    "getGameConstants()": FunctionFragment;
    "getNPlanets()": FunctionFragment;
    "getNPlayers()": FunctionFragment;
    "getNRevealedPlanets()": FunctionFragment;
    "getPlanetArrival(uint256)": FunctionFragment;
    "getPlanetArrivals(uint256)": FunctionFragment;
    "getPlanetEvent(uint256,uint256)": FunctionFragment;
    "getPlanetEventsCount(uint256)": FunctionFragment;
    "getPlanetLevelThresholds()": FunctionFragment;
    "getPlayerSpaceJunkLimit(address)": FunctionFragment;
    "getRevealCooldown()": FunctionFragment;
    "getRevealedCoords(uint256)": FunctionFragment;
    "getSnarkConstants()": FunctionFragment;
    "getTypeWeights()": FunctionFragment;
    "getUpgrades()": FunctionFragment;
    "paused()": FunctionFragment;
    "planetArrivals(uint256)": FunctionFragment;
    "planetArtifacts(uint256)": FunctionFragment;
    "planetDefaultStats(uint256)": FunctionFragment;
    "planetEvents(uint256)": FunctionFragment;
    "planetEventsCount()": FunctionFragment;
    "planetIds(uint256)": FunctionFragment;
    "planetLevelsCount()": FunctionFragment;
    "planets(uint256)": FunctionFragment;
    "planetsExtendedInfo(uint256)": FunctionFragment;
    "planetsExtendedInfo2(uint256)": FunctionFragment;
    "playerIds(uint256)": FunctionFragment;
    "players(address)": FunctionFragment;
    "revealedCoords(uint256)": FunctionFragment;
    "revealedPlanetIds(uint256)": FunctionFragment;
    "worldRadius()": FunctionFragment;
    "applySpaceshipDepart(tuple,tuple,tuple,tuple)": FunctionFragment;
    "move(uint256[2],uint256[2][2],uint256[2],uint256[14])": FunctionFragment;
    "initializeDefaults()": FunctionFragment;
    "initializeUpgrades()": FunctionFragment;
    "start()": FunctionFragment;
    "addKeys(uint256[])": FunctionFragment;
    "addToWhitelist(address)": FunctionFragment;
    "adminUseKey(uint256,address)": FunctionFragment;
    "allowListEnabled()": FunctionFragment;
    "bulkAddToWhitelist(address[])": FunctionFragment;
    "changeDrip(uint256)": FunctionFragment;
    "changeRelayerReward(uint256)": FunctionFragment;
    "disableKeys(uint256[])": FunctionFragment;
    "drip()": FunctionFragment;
    "getNAllowed()": FunctionFragment;
    "isKeyHashValid(uint256)": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "relayerReward()": FunctionFragment;
    "removeFromWhitelist(address)": FunctionFragment;
    "setRelayerRewardsEnabled(bool)": FunctionFragment;
    "useKey(uint256[2],uint256[2][2],uint256[2],uint256[2])": FunctionFragment;
    "diamondCut(tuple[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_checkGameOver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arenaRevealLocation",
    values: [
      {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkCreateAndReveal",
    values: [
      {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkCreatePlanet",
    values: [
      {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimVictory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAndReveal",
    values: [
      {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createArenaPlanet",
    values: [
      {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePlayer",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitPlanet",
    values: [
      {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "notReady", values?: undefined): string;
  encodeFunctionData(functionFragment: "ready", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "arenaPlayers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetArenaPlayers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetsArenaInfoByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetSpawnPlanetIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetTargetPlanetIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArenaConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGraphConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGraphGameConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitPlanetHashes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMatches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNSpawnPlanets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNTargetPlanets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumMatches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTeam",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocked",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetsArenaInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spawnPlanetIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "targetPlanetIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLobby",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "giveSpaceShips",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addScore",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminGiveSpaceShip",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminInitializePlanet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetWorldRadius",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLocationRevealCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeWorldRadiusMin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPlanet",
    values: [
      {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deductScore",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeSetOwner",
    values: [
      string,
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlanetTransferEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenMintEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activateArtifact",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminGiveArtifact",
    values: [
      {
        tokenId: BigNumberish;
        discoverer: string;
        planetId: BigNumberish;
        rarity: BigNumberish;
        biome: BigNumberish;
        artifactType: BigNumberish;
        owner: string;
        controller: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createArtifact",
    values: [
      {
        tokenId: BigNumberish;
        discoverer: string;
        planetId: BigNumberish;
        rarity: BigNumberish;
        biome: BigNumberish;
        artifactType: BigNumberish;
        owner: string;
        controller: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateArtifact",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositArtifact",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doesArtifactExist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findArtifact",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtifact",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtifactAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerArtifactIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prospectPlanet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferArtifact",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateArtifact",
    values: [
      {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawArtifact",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "capturePlanet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntFromUInt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invadePlanet",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "planetInCaptureZone",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyHat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRevealProof",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRefreshedPlanet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshPlanet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revealLocation",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPlanet",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePlanet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSilver",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminFillPlanet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_MINT_END_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "artifactIdToPlanetId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "artifactIdToVoyageId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetArtifacts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetArtifactsByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetArrivals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetArrivalsByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetArtifacts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetsByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetsDataByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetsExtendedInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetsExtendedInfo2ByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetsExtendedInfoByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlayerIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlayers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetRevealedCoordsByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetRevealedPlanetIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetVoyagesByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtifactById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtifactPointValues",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getArtifactsOnPlanet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCumulativeRarities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNPlanets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNRevealedPlanets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetArrival",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetArrivals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetEvent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetEventsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetLevelThresholds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerSpaceJunkLimit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevealCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRevealedCoords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSnarkConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTypeWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpgrades",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "planetArrivals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetArtifacts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetDefaultStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetEvents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetEventsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "planetIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetLevelsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "planets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetsExtendedInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetsExtendedInfo2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "players", values: [string]): string;
  encodeFunctionData(
    functionFragment: "revealedCoords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revealedPlanetIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "worldRadius",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applySpaceshipDepart",
    values: [
      {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      },
      {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      },
      {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      {
        isInitialized: boolean;
        pausers: BigNumberish;
        invader: string;
        invadeStartBlock: BigNumberish;
        capturer: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeDefaults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeUpgrades",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addKeys",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminUseKey",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowListEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bulkAddToWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDrip",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRelayerReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableKeys",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "drip", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isKeyHashValid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayerRewardsEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "useKey",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [
      {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_checkGameOver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arenaRevealLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkCreateAndReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkCreatePlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimVictory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAndReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createArenaPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "notReady", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ready", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arenaPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetArenaPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetsArenaInfoByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetSpawnPlanetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetTargetPlanetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArenaConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEndTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGraphConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGraphGameConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitPlanetHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMatches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNSpawnPlanets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNTargetPlanets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumMatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTeam", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWinners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isBlocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planetsArenaInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spawnPlanetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetPlanetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLobby",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveSpaceShips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminGiveSpaceShip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminInitializePlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetWorldRadius",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLocationRevealCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeWorldRadiusMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deductScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeSetOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPlanetTransferEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenMintEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminGiveArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesArtifactExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtifactAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerArtifactIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prospectPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "capturePlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntFromUInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invadePlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetInCaptureZone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyHat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkRevealProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefreshedPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSilver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminFillPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_MINT_END_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artifactIdToPlanetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artifactIdToVoyageId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetArtifactsByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetArrivals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetArrivalsByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetsByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetsDataByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetsExtendedInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetsExtendedInfo2ByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetsExtendedInfoByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlayerIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetRevealedCoordsByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetRevealedPlanetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetVoyagesByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtifactById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtifactPointValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtifactsOnPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCumulativeRarities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNPlanets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNRevealedPlanets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetArrival",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetArrivals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetEventsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetLevelThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerSpaceJunkLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevealCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevealedCoords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSnarkConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypeWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpgrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planetArrivals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetDefaultStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetEventsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "planetIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planetLevelsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "planets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planetsExtendedInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetsExtendedInfo2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playerIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revealedCoords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealedPlanetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldRadius",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applySpaceshipDepart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeDefaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeUpgrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminUseKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowListEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkAddToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeDrip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRelayerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKeyHashValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayerRewardsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "useKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AdminPlanetCreated(uint256)": EventFragment;
    "GameStarted(address,uint256)": EventFragment;
    "Gameover(address)": EventFragment;
    "LocationRevealed(address,uint256,uint256,uint256)": EventFragment;
    "PauseStateChanged(bool)": EventFragment;
    "PlayerInitialized(address,uint256)": EventFragment;
    "PlayerNotReady(address,uint256)": EventFragment;
    "PlayerReady(address,uint256)": EventFragment;
    "TargetCaptured(uint256,address)": EventFragment;
    "LobbyCreated(address,address)": EventFragment;
    "ArtifactFound(address,uint256,uint256)": EventFragment;
    "AdminGiveSpaceship(uint256,address,uint8)": EventFragment;
    "AdminOwnershipChanged(uint256,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ArtifactActivated(address,uint256,uint256)": EventFragment;
    "ArtifactDeactivated(address,uint256,uint256)": EventFragment;
    "ArtifactDeposited(address,uint256,uint256)": EventFragment;
    "ArtifactWithdrawn(address,uint256,uint256)": EventFragment;
    "PlanetProspected(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "PlanetCaptured(address,uint256)": EventFragment;
    "PlanetInvaded(address,uint256)": EventFragment;
    "PlanetHatBought(address,uint256,uint256)": EventFragment;
    "PlanetSilverWithdrawn(address,uint256,uint256)": EventFragment;
    "PlanetTransferred(address,uint256,address)": EventFragment;
    "PlanetUpgraded(address,uint256,uint256,uint256)": EventFragment;
    "ArrivalQueued(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ArenaInitialized(address,address)": EventFragment;
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminPlanetCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Gameover"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocationRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerNotReady"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerReady"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetCaptured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LobbyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArtifactFound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminGiveSpaceship"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminOwnershipChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArtifactActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArtifactDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArtifactDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArtifactWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetProspected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetCaptured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetInvaded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetHatBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetSilverWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArrivalQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArenaInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AdminPlanetCreatedEvent = TypedEvent<
  [BigNumber] & { loc: BigNumber }
>;

export type GameStartedEvent = TypedEvent<
  [string, BigNumber] & { startPlayer: string; startTime: BigNumber }
>;

export type GameoverEvent = TypedEvent<[string] & { winner: string }>;

export type LocationRevealedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    revealer: string;
    loc: BigNumber;
    x: BigNumber;
    y: BigNumber;
  }
>;

export type PauseStateChangedEvent = TypedEvent<
  [boolean] & { paused: boolean }
>;

export type PlayerInitializedEvent = TypedEvent<
  [string, BigNumber] & { player: string; loc: BigNumber }
>;

export type PlayerNotReadyEvent = TypedEvent<
  [string, BigNumber] & { player: string; time: BigNumber }
>;

export type PlayerReadyEvent = TypedEvent<
  [string, BigNumber] & { player: string; time: BigNumber }
>;

export type TargetCapturedEvent = TypedEvent<
  [BigNumber, string] & { loc: BigNumber; player: string }
>;

export type LobbyCreatedEvent = TypedEvent<
  [string, string] & { creatorAddress: string; lobbyAddress: string }
>;

export type ArtifactFoundEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    artifactId: BigNumber;
    loc: BigNumber;
  }
>;

export type AdminGiveSpaceshipEvent = TypedEvent<
  [BigNumber, string, number] & {
    loc: BigNumber;
    owner: string;
    artifactType: number;
  }
>;

export type AdminOwnershipChangedEvent = TypedEvent<
  [BigNumber, string] & { loc: BigNumber; newOwner: string }
>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    operator: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type ArtifactActivatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    artifactId: BigNumber;
    loc: BigNumber;
  }
>;

export type ArtifactDeactivatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    artifactId: BigNumber;
    loc: BigNumber;
  }
>;

export type ArtifactDepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    artifactId: BigNumber;
    loc: BigNumber;
  }
>;

export type ArtifactWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    artifactId: BigNumber;
    loc: BigNumber;
  }
>;

export type PlanetProspectedEvent = TypedEvent<
  [string, BigNumber] & { player: string; loc: BigNumber }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export type PlanetCapturedEvent = TypedEvent<
  [string, BigNumber] & { player: string; loc: BigNumber }
>;

export type PlanetInvadedEvent = TypedEvent<
  [string, BigNumber] & { player: string; loc: BigNumber }
>;

export type PlanetHatBoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    loc: BigNumber;
    tohatLevel: BigNumber;
  }
>;

export type PlanetSilverWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    loc: BigNumber;
    amount: BigNumber;
  }
>;

export type PlanetTransferredEvent = TypedEvent<
  [string, BigNumber, string] & {
    sender: string;
    loc: BigNumber;
    receiver: string;
  }
>;

export type PlanetUpgradedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    player: string;
    loc: BigNumber;
    branch: BigNumber;
    toBranchLevel: BigNumber;
  }
>;

export type ArrivalQueuedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    player: string;
    arrivalId: BigNumber;
    from: BigNumber;
    to: BigNumber;
    artifactId: BigNumber;
    abandoning: BigNumber;
  }
>;

export type ArenaInitializedEvent = TypedEvent<
  [string, string] & { ownerAddress: string; lobbyAddress: string }
>;

export type DiamondCutEvent = TypedEvent<
  [
    ([string, number, string[]] & {
      facetAddress: string;
      action: number;
      functionSelectors: string[];
    })[],
    string,
    string
  ] & {
    _diamondCut: ([string, number, string[]] & {
      facetAddress: string;
      action: number;
      functionSelectors: string[];
    })[];
    _init: string;
    _calldata: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class DarkForest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DarkForestInterface;

  functions: {
    _checkGameOver(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arenaRevealLocation(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkCreateAndReveal(
      createArgsList: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkCreatePlanet(
      planets: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimVictory(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAndReveal(
      createPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createArenaPlanet(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializePlayer(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      team: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitPlanet(
      _initPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    notReady(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ready(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arenaPlayers(
      key: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, BigNumber] & {
          moves: BigNumber;
          ready: boolean;
          lastReadyTime: BigNumber;
          team: BigNumber;
        }
      ]
    >;

    bulkGetArenaPlayers(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, boolean, BigNumber, BigNumber] & {
          moves: BigNumber;
          ready: boolean;
          lastReadyTime: BigNumber;
          team: BigNumber;
        })[]
      ] & {
        ret: ([BigNumber, boolean, BigNumber, BigNumber] & {
          moves: BigNumber;
          ready: boolean;
          lastReadyTime: BigNumber;
          team: BigNumber;
        })[];
      }
    >;

    bulkGetPlanetsArenaInfoByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([boolean, boolean, BigNumber[]] & {
          spawnPlanet: boolean;
          targetPlanet: boolean;
          blockedPlanetIds: BigNumber[];
        })[]
      ] & {
        ret: ([boolean, boolean, BigNumber[]] & {
          spawnPlanet: boolean;
          targetPlanet: boolean;
          blockedPlanetIds: BigNumber[];
        })[];
      }
    >;

    bulkGetSpawnPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { ret: BigNumber[] }>;

    bulkGetTargetPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { ret: BigNumber[] }>;

    getArenaConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          boolean,
          string,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCap: BigNumber;
            popGrowth: BigNumber;
            silverCap: BigNumber;
            silverGrowth: BigNumber;
            range: BigNumber;
            speed: BigNumber;
            defense: BigNumber;
            barbarianPercentage: BigNumber;
          },
          [boolean, boolean, boolean, boolean, boolean] & {
            mothership: boolean;
            whale: boolean;
            crescent: boolean;
            gear: boolean;
            titan: boolean;
          },
          BigNumber,
          boolean,
          boolean,
          string[],
          boolean,
          BigNumber,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          boolean
        ] & {
          TARGET_PLANETS: boolean;
          MANUAL_SPAWN: boolean;
          CONFIG_HASH: string;
          MODIFIERS: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCap: BigNumber;
            popGrowth: BigNumber;
            silverCap: BigNumber;
            silverGrowth: BigNumber;
            range: BigNumber;
            speed: BigNumber;
            defense: BigNumber;
            barbarianPercentage: BigNumber;
          };
          SPACESHIPS: [boolean, boolean, boolean, boolean, boolean] & {
            mothership: boolean;
            whale: boolean;
            crescent: boolean;
            gear: boolean;
            titan: boolean;
          };
          CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
          RANDOM_ARTIFACTS: boolean;
          NO_ADMIN: boolean;
          INIT_PLANET_HASHES: string[];
          CONFIRM_START: boolean;
          TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
          BLOCK_MOVES: boolean;
          BLOCK_CAPTURE: boolean;
          START_PAUSED: boolean;
          TEAMS_ENABLED: boolean;
          NUM_TEAMS: BigNumber;
          RANKED: boolean;
        }
      ]
    >;

    getEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGameover(overrides?: CallOverrides): Promise<[boolean]>;

    getGraphConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            boolean,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ],
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            [
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number
            ],
            BigNumber,
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
            boolean,
            BigNumber,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ],
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ],
            BigNumber,
            BigNumber
          ] & {
            ADMIN_CAN_ADD_PLANETS: boolean;
            TOKEN_MINT_END_TIMESTAMP: BigNumber;
            WORLD_RADIUS_LOCKED: boolean;
            WORLD_RADIUS_MIN: BigNumber;
            MAX_NATURAL_PLANET_LEVEL: BigNumber;
            TIME_FACTOR_HUNDREDTHS: BigNumber;
            PERLIN_THRESHOLD_1: BigNumber;
            PERLIN_THRESHOLD_2: BigNumber;
            PERLIN_THRESHOLD_3: BigNumber;
            INIT_PERLIN_MIN: BigNumber;
            INIT_PERLIN_MAX: BigNumber;
            SPAWN_RIM_AREA: BigNumber;
            BIOME_THRESHOLD_1: BigNumber;
            BIOME_THRESHOLD_2: BigNumber;
            PLANET_LEVEL_THRESHOLDS: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            PLANET_RARITY: BigNumber;
            PLANET_TRANSFER_ENABLED: boolean;
            PHOTOID_ACTIVATION_DELAY: BigNumber;
            LOCATION_REVEAL_COOLDOWN: BigNumber;
            PLANET_TYPE_WEIGHTS: [
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number
            ];
            SILVER_SCORE_VALUE: BigNumber;
            ARTIFACT_POINT_VALUES: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            SPACE_JUNK_ENABLED: boolean;
            SPACE_JUNK_LIMIT: BigNumber;
            PLANET_LEVEL_JUNK: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
            ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
            GAME_START_BLOCK: BigNumber;
            CAPTURE_ZONES_ENABLED: boolean;
            CAPTURE_ZONE_COUNT: BigNumber;
            CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
            CAPTURE_ZONE_RADIUS: BigNumber;
            CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
            CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
          },
          [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            boolean,
            BigNumber
          ] & {
            DISABLE_ZK_CHECKS: boolean;
            PLANETHASH_KEY: BigNumber;
            SPACETYPE_KEY: BigNumber;
            BIOMEBASE_KEY: BigNumber;
            PERLIN_MIRROR_X: boolean;
            PERLIN_MIRROR_Y: boolean;
            PERLIN_LENGTH_SCALE: BigNumber;
          },
          [
            boolean,
            boolean,
            string,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              popCap: BigNumber;
              popGrowth: BigNumber;
              silverCap: BigNumber;
              silverGrowth: BigNumber;
              range: BigNumber;
              speed: BigNumber;
              defense: BigNumber;
              barbarianPercentage: BigNumber;
            },
            [boolean, boolean, boolean, boolean, boolean] & {
              mothership: boolean;
              whale: boolean;
              crescent: boolean;
              gear: boolean;
              titan: boolean;
            },
            BigNumber,
            boolean,
            boolean,
            string[],
            boolean,
            BigNumber,
            boolean,
            boolean,
            boolean,
            boolean,
            BigNumber,
            boolean
          ] & {
            TARGET_PLANETS: boolean;
            MANUAL_SPAWN: boolean;
            CONFIG_HASH: string;
            MODIFIERS: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              popCap: BigNumber;
              popGrowth: BigNumber;
              silverCap: BigNumber;
              silverGrowth: BigNumber;
              range: BigNumber;
              speed: BigNumber;
              defense: BigNumber;
              barbarianPercentage: BigNumber;
            };
            SPACESHIPS: [boolean, boolean, boolean, boolean, boolean] & {
              mothership: boolean;
              whale: boolean;
              crescent: boolean;
              gear: boolean;
              titan: boolean;
            };
            CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
            RANDOM_ARTIFACTS: boolean;
            NO_ADMIN: boolean;
            INIT_PLANET_HASHES: string[];
            CONFIRM_START: boolean;
            TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
            BLOCK_MOVES: boolean;
            BLOCK_CAPTURE: boolean;
            START_PAUSED: boolean;
            TEAMS_ENABLED: boolean;
            NUM_TEAMS: BigNumber;
            RANKED: boolean;
          },
          [boolean, string, string[]] & {
            allowListEnabled: boolean;
            artifactBaseURI: string;
            allowedAddresses: string[];
          }
        ] & {
          gc: [
            boolean,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ],
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            [
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number
            ],
            BigNumber,
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
            boolean,
            BigNumber,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ],
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ],
            BigNumber,
            BigNumber
          ] & {
            ADMIN_CAN_ADD_PLANETS: boolean;
            TOKEN_MINT_END_TIMESTAMP: BigNumber;
            WORLD_RADIUS_LOCKED: boolean;
            WORLD_RADIUS_MIN: BigNumber;
            MAX_NATURAL_PLANET_LEVEL: BigNumber;
            TIME_FACTOR_HUNDREDTHS: BigNumber;
            PERLIN_THRESHOLD_1: BigNumber;
            PERLIN_THRESHOLD_2: BigNumber;
            PERLIN_THRESHOLD_3: BigNumber;
            INIT_PERLIN_MIN: BigNumber;
            INIT_PERLIN_MAX: BigNumber;
            SPAWN_RIM_AREA: BigNumber;
            BIOME_THRESHOLD_1: BigNumber;
            BIOME_THRESHOLD_2: BigNumber;
            PLANET_LEVEL_THRESHOLDS: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            PLANET_RARITY: BigNumber;
            PLANET_TRANSFER_ENABLED: boolean;
            PHOTOID_ACTIVATION_DELAY: BigNumber;
            LOCATION_REVEAL_COOLDOWN: BigNumber;
            PLANET_TYPE_WEIGHTS: [
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number,
              number
            ];
            SILVER_SCORE_VALUE: BigNumber;
            ARTIFACT_POINT_VALUES: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            SPACE_JUNK_ENABLED: boolean;
            SPACE_JUNK_LIMIT: BigNumber;
            PLANET_LEVEL_JUNK: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
            ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
            GAME_START_BLOCK: BigNumber;
            CAPTURE_ZONES_ENABLED: boolean;
            CAPTURE_ZONE_COUNT: BigNumber;
            CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
            CAPTURE_ZONE_RADIUS: BigNumber;
            CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
            CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
          };
          sc: [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            boolean,
            BigNumber
          ] & {
            DISABLE_ZK_CHECKS: boolean;
            PLANETHASH_KEY: BigNumber;
            SPACETYPE_KEY: BigNumber;
            BIOMEBASE_KEY: BigNumber;
            PERLIN_MIRROR_X: boolean;
            PERLIN_MIRROR_Y: boolean;
            PERLIN_LENGTH_SCALE: BigNumber;
          };
          ac: [
            boolean,
            boolean,
            string,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              popCap: BigNumber;
              popGrowth: BigNumber;
              silverCap: BigNumber;
              silverGrowth: BigNumber;
              range: BigNumber;
              speed: BigNumber;
              defense: BigNumber;
              barbarianPercentage: BigNumber;
            },
            [boolean, boolean, boolean, boolean, boolean] & {
              mothership: boolean;
              whale: boolean;
              crescent: boolean;
              gear: boolean;
              titan: boolean;
            },
            BigNumber,
            boolean,
            boolean,
            string[],
            boolean,
            BigNumber,
            boolean,
            boolean,
            boolean,
            boolean,
            BigNumber,
            boolean
          ] & {
            TARGET_PLANETS: boolean;
            MANUAL_SPAWN: boolean;
            CONFIG_HASH: string;
            MODIFIERS: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              popCap: BigNumber;
              popGrowth: BigNumber;
              silverCap: BigNumber;
              silverGrowth: BigNumber;
              range: BigNumber;
              speed: BigNumber;
              defense: BigNumber;
              barbarianPercentage: BigNumber;
            };
            SPACESHIPS: [boolean, boolean, boolean, boolean, boolean] & {
              mothership: boolean;
              whale: boolean;
              crescent: boolean;
              gear: boolean;
              titan: boolean;
            };
            CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
            RANDOM_ARTIFACTS: boolean;
            NO_ADMIN: boolean;
            INIT_PLANET_HASHES: string[];
            CONFIRM_START: boolean;
            TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
            BLOCK_MOVES: boolean;
            BLOCK_CAPTURE: boolean;
            START_PAUSED: boolean;
            TEAMS_ENABLED: boolean;
            NUM_TEAMS: BigNumber;
            RANKED: boolean;
          };
          ai: [boolean, string, string[]] & {
            allowListEnabled: boolean;
            artifactBaseURI: string;
            allowedAddresses: string[];
          };
        }
      ]
    >;

    getGraphGameConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          [
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
          ],
          BigNumber,
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
          boolean,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          BigNumber
        ] & {
          ADMIN_CAN_ADD_PLANETS: boolean;
          TOKEN_MINT_END_TIMESTAMP: BigNumber;
          WORLD_RADIUS_LOCKED: boolean;
          WORLD_RADIUS_MIN: BigNumber;
          MAX_NATURAL_PLANET_LEVEL: BigNumber;
          TIME_FACTOR_HUNDREDTHS: BigNumber;
          PERLIN_THRESHOLD_1: BigNumber;
          PERLIN_THRESHOLD_2: BigNumber;
          PERLIN_THRESHOLD_3: BigNumber;
          INIT_PERLIN_MIN: BigNumber;
          INIT_PERLIN_MAX: BigNumber;
          SPAWN_RIM_AREA: BigNumber;
          BIOME_THRESHOLD_1: BigNumber;
          BIOME_THRESHOLD_2: BigNumber;
          PLANET_LEVEL_THRESHOLDS: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          PLANET_RARITY: BigNumber;
          PLANET_TRANSFER_ENABLED: boolean;
          PHOTOID_ACTIVATION_DELAY: BigNumber;
          LOCATION_REVEAL_COOLDOWN: BigNumber;
          PLANET_TYPE_WEIGHTS: [
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
          ];
          SILVER_SCORE_VALUE: BigNumber;
          ARTIFACT_POINT_VALUES: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          SPACE_JUNK_ENABLED: boolean;
          SPACE_JUNK_LIMIT: BigNumber;
          PLANET_LEVEL_JUNK: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
          ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
          GAME_START_BLOCK: BigNumber;
          CAPTURE_ZONES_ENABLED: boolean;
          CAPTURE_ZONE_COUNT: BigNumber;
          CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
          CAPTURE_ZONE_RADIUS: BigNumber;
          CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
          CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
        }
      ]
    >;

    getInitPlanetHashes(overrides?: CallOverrides): Promise<[string[]]>;

    getInitializers(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            boolean,
            boolean,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ],
            BigNumber,
            boolean,
            [
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ],
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ],
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ],
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ]
            ],
            BigNumber,
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
            BigNumber,
            boolean,
            BigNumber,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ],
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ],
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            boolean,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ],
            [boolean, boolean, boolean, boolean, boolean],
            boolean,
            boolean,
            ([
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              boolean,
              boolean,
              boolean,
              BigNumber[]
            ] & {
              location: BigNumber;
              x: BigNumber;
              y: BigNumber;
              perlin: BigNumber;
              level: BigNumber;
              planetType: number;
              requireValidLocationId: boolean;
              isTargetPlanet: boolean;
              isSpawnPlanet: boolean;
              blockedPlanetIds: BigNumber[];
            })[],
            boolean,
            BigNumber,
            boolean,
            boolean,
            boolean,
            BigNumber,
            boolean
          ] & {
            START_PAUSED: boolean;
            ADMIN_CAN_ADD_PLANETS: boolean;
            LOCATION_REVEAL_COOLDOWN: BigNumber;
            TOKEN_MINT_END_TIMESTAMP: BigNumber;
            WORLD_RADIUS_LOCKED: boolean;
            WORLD_RADIUS_MIN: BigNumber;
            DISABLE_ZK_CHECKS: boolean;
            PLANETHASH_KEY: BigNumber;
            SPACETYPE_KEY: BigNumber;
            BIOMEBASE_KEY: BigNumber;
            PERLIN_MIRROR_X: boolean;
            PERLIN_MIRROR_Y: boolean;
            PERLIN_LENGTH_SCALE: BigNumber;
            MAX_NATURAL_PLANET_LEVEL: BigNumber;
            TIME_FACTOR_HUNDREDTHS: BigNumber;
            PERLIN_THRESHOLD_1: BigNumber;
            PERLIN_THRESHOLD_2: BigNumber;
            PERLIN_THRESHOLD_3: BigNumber;
            INIT_PERLIN_MIN: BigNumber;
            INIT_PERLIN_MAX: BigNumber;
            SPAWN_RIM_AREA: BigNumber;
            BIOME_THRESHOLD_1: BigNumber;
            BIOME_THRESHOLD_2: BigNumber;
            PLANET_LEVEL_THRESHOLDS: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            PLANET_RARITY: BigNumber;
            PLANET_TRANSFER_ENABLED: boolean;
            PLANET_TYPE_WEIGHTS: [
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ],
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ],
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ],
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ]
            ];
            SILVER_SCORE_VALUE: BigNumber;
            ARTIFACT_POINT_VALUES: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            PHOTOID_ACTIVATION_DELAY: BigNumber;
            SPACE_JUNK_ENABLED: boolean;
            SPACE_JUNK_LIMIT: BigNumber;
            PLANET_LEVEL_JUNK: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
            ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
            CAPTURE_ZONES_ENABLED: boolean;
            CAPTURE_ZONE_COUNT: BigNumber;
            CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
            CAPTURE_ZONE_RADIUS: BigNumber;
            CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
            CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
            TARGET_PLANETS: boolean;
            CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
            MANUAL_SPAWN: boolean;
            MODIFIERS: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            SPACESHIPS: [boolean, boolean, boolean, boolean, boolean];
            RANDOM_ARTIFACTS: boolean;
            NO_ADMIN: boolean;
            INIT_PLANETS: ([
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              boolean,
              boolean,
              boolean,
              BigNumber[]
            ] & {
              location: BigNumber;
              x: BigNumber;
              y: BigNumber;
              perlin: BigNumber;
              level: BigNumber;
              planetType: number;
              requireValidLocationId: boolean;
              isTargetPlanet: boolean;
              isSpawnPlanet: boolean;
              blockedPlanetIds: BigNumber[];
            })[];
            CONFIRM_START: boolean;
            TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
            BLOCK_MOVES: boolean;
            BLOCK_CAPTURE: boolean;
            TEAMS_ENABLED: boolean;
            NUM_TEAMS: BigNumber;
            RANKED: boolean;
          },
          [boolean, string, string[]] & {
            allowListEnabled: boolean;
            artifactBaseURI: string;
            allowedAddresses: string[];
          }
        ] & {
          initArgs: [
            boolean,
            boolean,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ],
            BigNumber,
            boolean,
            [
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ],
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ],
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ],
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ]
            ],
            BigNumber,
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
            BigNumber,
            boolean,
            BigNumber,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ],
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ],
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            boolean,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ],
            [boolean, boolean, boolean, boolean, boolean],
            boolean,
            boolean,
            ([
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              boolean,
              boolean,
              boolean,
              BigNumber[]
            ] & {
              location: BigNumber;
              x: BigNumber;
              y: BigNumber;
              perlin: BigNumber;
              level: BigNumber;
              planetType: number;
              requireValidLocationId: boolean;
              isTargetPlanet: boolean;
              isSpawnPlanet: boolean;
              blockedPlanetIds: BigNumber[];
            })[],
            boolean,
            BigNumber,
            boolean,
            boolean,
            boolean,
            BigNumber,
            boolean
          ] & {
            START_PAUSED: boolean;
            ADMIN_CAN_ADD_PLANETS: boolean;
            LOCATION_REVEAL_COOLDOWN: BigNumber;
            TOKEN_MINT_END_TIMESTAMP: BigNumber;
            WORLD_RADIUS_LOCKED: boolean;
            WORLD_RADIUS_MIN: BigNumber;
            DISABLE_ZK_CHECKS: boolean;
            PLANETHASH_KEY: BigNumber;
            SPACETYPE_KEY: BigNumber;
            BIOMEBASE_KEY: BigNumber;
            PERLIN_MIRROR_X: boolean;
            PERLIN_MIRROR_Y: boolean;
            PERLIN_LENGTH_SCALE: BigNumber;
            MAX_NATURAL_PLANET_LEVEL: BigNumber;
            TIME_FACTOR_HUNDREDTHS: BigNumber;
            PERLIN_THRESHOLD_1: BigNumber;
            PERLIN_THRESHOLD_2: BigNumber;
            PERLIN_THRESHOLD_3: BigNumber;
            INIT_PERLIN_MIN: BigNumber;
            INIT_PERLIN_MAX: BigNumber;
            SPAWN_RIM_AREA: BigNumber;
            BIOME_THRESHOLD_1: BigNumber;
            BIOME_THRESHOLD_2: BigNumber;
            PLANET_LEVEL_THRESHOLDS: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            PLANET_RARITY: BigNumber;
            PLANET_TRANSFER_ENABLED: boolean;
            PLANET_TYPE_WEIGHTS: [
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ],
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ],
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ],
              [
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number],
                [number, number, number, number, number]
              ]
            ];
            SILVER_SCORE_VALUE: BigNumber;
            ARTIFACT_POINT_VALUES: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            PHOTOID_ACTIVATION_DELAY: BigNumber;
            SPACE_JUNK_ENABLED: boolean;
            SPACE_JUNK_LIMIT: BigNumber;
            PLANET_LEVEL_JUNK: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
            ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
            CAPTURE_ZONES_ENABLED: boolean;
            CAPTURE_ZONE_COUNT: BigNumber;
            CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
            CAPTURE_ZONE_RADIUS: BigNumber;
            CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
            CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
            TARGET_PLANETS: boolean;
            CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
            MANUAL_SPAWN: boolean;
            MODIFIERS: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ];
            SPACESHIPS: [boolean, boolean, boolean, boolean, boolean];
            RANDOM_ARTIFACTS: boolean;
            NO_ADMIN: boolean;
            INIT_PLANETS: ([
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              number,
              boolean,
              boolean,
              boolean,
              BigNumber[]
            ] & {
              location: BigNumber;
              x: BigNumber;
              y: BigNumber;
              perlin: BigNumber;
              level: BigNumber;
              planetType: number;
              requireValidLocationId: boolean;
              isTargetPlanet: boolean;
              isSpawnPlanet: boolean;
              blockedPlanetIds: BigNumber[];
            })[];
            CONFIRM_START: boolean;
            TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
            BLOCK_MOVES: boolean;
            BLOCK_CAPTURE: boolean;
            TEAMS_ENABLED: boolean;
            NUM_TEAMS: BigNumber;
            RANKED: boolean;
          };
          auxArgs: [boolean, string, string[]] & {
            allowListEnabled: boolean;
            artifactBaseURI: string;
            allowedAddresses: string[];
          };
        }
      ]
    >;

    getMatch(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getMatches(overrides?: CallOverrides): Promise<[string[]]>;

    getNSpawnPlanets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNTargetPlanets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNumMatches(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoundDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTeam(team: BigNumberish, overrides?: CallOverrides): Promise<[string[]]>;

    getWinners(overrides?: CallOverrides): Promise<[string[]]>;

    isBlocked(
      dest: BigNumberish,
      src: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    planetsArenaInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, boolean, BigNumber[]] & {
          spawnPlanet: boolean;
          targetPlanet: boolean;
          blockedPlanetIds: BigNumber[];
        }
      ]
    >;

    spawnPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    targetPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createLobby(
      initAddress: string,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    giveSpaceShips(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminGiveSpaceShip(
      locationId: BigNumberish,
      owner: string,
      artifactType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminInitializePlanet(
      locationId: BigNumberish,
      perlin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminSetWorldRadius(
      _newRadius: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeLocationRevealCooldown(
      newCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeWorldRadiusMin(
      _newConstant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPlanet(
      args: {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deductScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeSetOwner(
      newOwner: string,
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      planetId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlanetTransferEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenMintEndTime(
      newTokenMintEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activateArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      wormholeTo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminGiveArtifact(
      args: {
        tokenId: BigNumberish;
        discoverer: string;
        planetId: BigNumberish;
        rarity: BigNumberish;
        biome: BigNumberish;
        artifactType: BigNumberish;
        owner: string;
        controller: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    createArtifact(
      args: {
        tokenId: BigNumberish;
        discoverer: string;
        planetId: BigNumberish;
        rarity: BigNumberish;
        biome: BigNumberish;
        artifactType: BigNumberish;
        owner: string;
        controller: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deactivateArtifact(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    doesArtifactExist(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    findArtifact(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getArtifact(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        }
      ]
    >;

    getArtifactAtIndex(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        }
      ]
    >;

    getPlayerArtifactIds(
      playerId: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    prospectPlanet(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferArtifact(
      tokenId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateArtifact(
      updatedArtifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    capturePlanet(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getIntFromUInt(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    invadePlanet(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    planetInCaptureZone(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyHat(
      _location: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkRevealProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRefreshedPlanet(
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        },
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        },
        [boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ] & {
        eventsToRemove: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        artifactsToAdd: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
      }
    >;

    refreshPlanet(
      location: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealLocation(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferPlanet(
      _location: BigNumberish,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradePlanet(
      _location: BigNumberish,
      _branch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSilver(
      locationId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminFillPlanet(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    TOKEN_MINT_END_TIMESTAMP(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    artifactIdToPlanetId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    artifactIdToVoyageId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bulkGetArtifacts(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        })[]
      ] & {
        ret: ([
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        })[];
      }
    >;

    bulkGetArtifactsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        })[]
      ] & {
        ret: ([
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        })[];
      }
    >;

    bulkGetPlanetArrivals(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        })[][]
      ]
    >;

    bulkGetPlanetArrivalsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        })[][]
      ]
    >;

    bulkGetPlanetArtifacts(
      planetIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        })[][]
      ]
    >;

    bulkGetPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { ret: BigNumber[] }>;

    bulkGetPlanets(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        })[]
      ] & {
        ret: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        })[];
      }
    >;

    bulkGetPlanetsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        })[]
      ] & {
        ret: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        })[];
      }
    >;

    bulkGetPlanetsDataByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            boolean
          ] & {
            owner: string;
            range: BigNumber;
            speed: BigNumber;
            defense: BigNumber;
            population: BigNumber;
            populationCap: BigNumber;
            populationGrowth: BigNumber;
            silverCap: BigNumber;
            silverGrowth: BigNumber;
            silver: BigNumber;
            planetLevel: BigNumber;
            planetType: number;
            isHomePlanet: boolean;
          },
          [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            boolean,
            BigNumber
          ] & {
            isInitialized: boolean;
            createdAt: BigNumber;
            lastUpdated: BigNumber;
            perlin: BigNumber;
            spaceType: number;
            upgradeState0: BigNumber;
            upgradeState1: BigNumber;
            upgradeState2: BigNumber;
            hatLevel: BigNumber;
            hasTriedFindingArtifact: boolean;
            prospectedBlockNumber: BigNumber;
            destroyed: boolean;
            spaceJunk: BigNumber;
          },
          [boolean, BigNumber, string, BigNumber, string] & {
            isInitialized: boolean;
            pausers: BigNumber;
            invader: string;
            invadeStartBlock: BigNumber;
            capturer: string;
          },
          [BigNumber, BigNumber, BigNumber, string] & {
            locationId: BigNumber;
            x: BigNumber;
            y: BigNumber;
            revealer: string;
          }
        ] & {
          planet: [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            boolean
          ] & {
            owner: string;
            range: BigNumber;
            speed: BigNumber;
            defense: BigNumber;
            population: BigNumber;
            populationCap: BigNumber;
            populationGrowth: BigNumber;
            silverCap: BigNumber;
            silverGrowth: BigNumber;
            silver: BigNumber;
            planetLevel: BigNumber;
            planetType: number;
            isHomePlanet: boolean;
          };
          info: [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            boolean,
            BigNumber
          ] & {
            isInitialized: boolean;
            createdAt: BigNumber;
            lastUpdated: BigNumber;
            perlin: BigNumber;
            spaceType: number;
            upgradeState0: BigNumber;
            upgradeState1: BigNumber;
            upgradeState2: BigNumber;
            hatLevel: BigNumber;
            hasTriedFindingArtifact: boolean;
            prospectedBlockNumber: BigNumber;
            destroyed: boolean;
            spaceJunk: BigNumber;
          };
          info2: [boolean, BigNumber, string, BigNumber, string] & {
            isInitialized: boolean;
            pausers: BigNumber;
            invader: string;
            invadeStartBlock: BigNumber;
            capturer: string;
          };
          revealedCoords: [BigNumber, BigNumber, BigNumber, string] & {
            locationId: BigNumber;
            x: BigNumber;
            y: BigNumber;
            revealer: string;
          };
        })[]
      ] & {
        ret: ([
          [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            boolean
          ] & {
            owner: string;
            range: BigNumber;
            speed: BigNumber;
            defense: BigNumber;
            population: BigNumber;
            populationCap: BigNumber;
            populationGrowth: BigNumber;
            silverCap: BigNumber;
            silverGrowth: BigNumber;
            silver: BigNumber;
            planetLevel: BigNumber;
            planetType: number;
            isHomePlanet: boolean;
          },
          [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            boolean,
            BigNumber
          ] & {
            isInitialized: boolean;
            createdAt: BigNumber;
            lastUpdated: BigNumber;
            perlin: BigNumber;
            spaceType: number;
            upgradeState0: BigNumber;
            upgradeState1: BigNumber;
            upgradeState2: BigNumber;
            hatLevel: BigNumber;
            hasTriedFindingArtifact: boolean;
            prospectedBlockNumber: BigNumber;
            destroyed: boolean;
            spaceJunk: BigNumber;
          },
          [boolean, BigNumber, string, BigNumber, string] & {
            isInitialized: boolean;
            pausers: BigNumber;
            invader: string;
            invadeStartBlock: BigNumber;
            capturer: string;
          },
          [BigNumber, BigNumber, BigNumber, string] & {
            locationId: BigNumber;
            x: BigNumber;
            y: BigNumber;
            revealer: string;
          }
        ] & {
          planet: [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            boolean
          ] & {
            owner: string;
            range: BigNumber;
            speed: BigNumber;
            defense: BigNumber;
            population: BigNumber;
            populationCap: BigNumber;
            populationGrowth: BigNumber;
            silverCap: BigNumber;
            silverGrowth: BigNumber;
            silver: BigNumber;
            planetLevel: BigNumber;
            planetType: number;
            isHomePlanet: boolean;
          };
          info: [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            boolean,
            BigNumber
          ] & {
            isInitialized: boolean;
            createdAt: BigNumber;
            lastUpdated: BigNumber;
            perlin: BigNumber;
            spaceType: number;
            upgradeState0: BigNumber;
            upgradeState1: BigNumber;
            upgradeState2: BigNumber;
            hatLevel: BigNumber;
            hasTriedFindingArtifact: boolean;
            prospectedBlockNumber: BigNumber;
            destroyed: boolean;
            spaceJunk: BigNumber;
          };
          info2: [boolean, BigNumber, string, BigNumber, string] & {
            isInitialized: boolean;
            pausers: BigNumber;
            invader: string;
            invadeStartBlock: BigNumber;
            capturer: string;
          };
          revealedCoords: [BigNumber, BigNumber, BigNumber, string] & {
            locationId: BigNumber;
            x: BigNumber;
            y: BigNumber;
            revealer: string;
          };
        })[];
      }
    >;

    bulkGetPlanetsExtendedInfo(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        })[]
      ] & {
        ret: ([
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        })[];
      }
    >;

    bulkGetPlanetsExtendedInfo2ByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        })[]
      ] & {
        ret: ([boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        })[];
      }
    >;

    bulkGetPlanetsExtendedInfoByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        })[]
      ] & {
        ret: ([
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        })[];
      }
    >;

    bulkGetPlayerIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { ret: string[] }>;

    bulkGetPlayers(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          boolean,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          isInitialized: boolean;
          player: string;
          initTimestamp: BigNumber;
          homePlanetId: BigNumber;
          lastRevealTimestamp: BigNumber;
          score: BigNumber;
          spaceJunk: BigNumber;
          spaceJunkLimit: BigNumber;
          claimedShips: boolean;
        })[]
      ] & {
        ret: ([
          boolean,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          isInitialized: boolean;
          player: string;
          initTimestamp: BigNumber;
          homePlanetId: BigNumber;
          lastRevealTimestamp: BigNumber;
          score: BigNumber;
          spaceJunk: BigNumber;
          spaceJunkLimit: BigNumber;
          claimedShips: boolean;
        })[];
      }
    >;

    bulkGetRevealedCoordsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, string] & {
          locationId: BigNumber;
          x: BigNumber;
          y: BigNumber;
          revealer: string;
        })[]
      ] & {
        ret: ([BigNumber, BigNumber, BigNumber, string] & {
          locationId: BigNumber;
          x: BigNumber;
          y: BigNumber;
          revealer: string;
        })[];
      }
    >;

    bulkGetRevealedPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { ret: BigNumber[] }>;

    bulkGetVoyagesByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        })[]
      ] & {
        ret: ([
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        })[];
      }
    >;

    getArtifactById(
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        }
      ] & {
        ret: [
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        };
      }
    >;

    getArtifactPointValues(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]]
    >;

    getArtifactsOnPlanet(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        })[]
      ] & {
        ret: ([
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        })[];
      }
    >;

    getCumulativeRarities(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getDefaultStats(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          label: string;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          silverGrowth: BigNumber;
          silverCap: BigNumber;
          barbarianPercentage: BigNumber;
        })[]
      ]
    >;

    getGameConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ],
          BigNumber,
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
          boolean,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          BigNumber
        ] & {
          ADMIN_CAN_ADD_PLANETS: boolean;
          WORLD_RADIUS_LOCKED: boolean;
          WORLD_RADIUS_MIN: BigNumber;
          MAX_NATURAL_PLANET_LEVEL: BigNumber;
          TIME_FACTOR_HUNDREDTHS: BigNumber;
          PERLIN_THRESHOLD_1: BigNumber;
          PERLIN_THRESHOLD_2: BigNumber;
          PERLIN_THRESHOLD_3: BigNumber;
          INIT_PERLIN_MIN: BigNumber;
          INIT_PERLIN_MAX: BigNumber;
          SPAWN_RIM_AREA: BigNumber;
          BIOME_THRESHOLD_1: BigNumber;
          BIOME_THRESHOLD_2: BigNumber;
          PLANET_LEVEL_THRESHOLDS: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          PLANET_RARITY: BigNumber;
          PLANET_TRANSFER_ENABLED: boolean;
          PHOTOID_ACTIVATION_DELAY: BigNumber;
          LOCATION_REVEAL_COOLDOWN: BigNumber;
          PLANET_TYPE_WEIGHTS: [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ];
          SILVER_SCORE_VALUE: BigNumber;
          ARTIFACT_POINT_VALUES: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          SPACE_JUNK_ENABLED: boolean;
          SPACE_JUNK_LIMIT: BigNumber;
          PLANET_LEVEL_JUNK: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
          ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
          GAME_START_BLOCK: BigNumber;
          CAPTURE_ZONES_ENABLED: boolean;
          CAPTURE_ZONE_COUNT: BigNumber;
          CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
          CAPTURE_ZONE_RADIUS: BigNumber;
          CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
          CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
        }
      ]
    >;

    getNPlanets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNPlayers(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNRevealedPlanets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlanetArrival(
      arrivalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        }
      ]
    >;

    getPlanetArrivals(
      _location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        })[]
      ] & {
        ret: ([
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        })[];
      }
    >;

    getPlanetEvent(
      locationId: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, BigNumber, BigNumber] & {
          id: BigNumber;
          eventType: number;
          timeTrigger: BigNumber;
          timeAdded: BigNumber;
        }
      ]
    >;

    getPlanetEventsCount(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlanetLevelThresholds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getPlayerSpaceJunkLimit(
      playerId: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRevealCooldown(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRevealedCoords(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, string] & {
          locationId: BigNumber;
          x: BigNumber;
          y: BigNumber;
          revealer: string;
        }
      ]
    >;

    getSnarkConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber
        ] & {
          DISABLE_ZK_CHECKS: boolean;
          PLANETHASH_KEY: BigNumber;
          SPACETYPE_KEY: BigNumber;
          BIOMEBASE_KEY: BigNumber;
          PERLIN_MIRROR_X: boolean;
          PERLIN_MIRROR_Y: boolean;
          PERLIN_LENGTH_SCALE: BigNumber;
        }
      ]
    >;

    getTypeWeights(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ]
      ]
    >;

    getUpgrades(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            }
          ],
          [
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            }
          ],
          [
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            }
          ]
        ]
      ]
    >;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    planetArrivals(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        }
      ]
    >;

    planetArtifacts(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    planetDefaultStats(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          label: string;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          silverGrowth: BigNumber;
          silverCap: BigNumber;
          barbarianPercentage: BigNumber;
        }
      ]
    >;

    planetEvents(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, number, BigNumber, BigNumber] & {
          id: BigNumber;
          eventType: number;
          timeTrigger: BigNumber;
          timeAdded: BigNumber;
        })[]
      ]
    >;

    planetEventsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    planetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    planetLevelsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    planets(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        }
      ]
    >;

    planetsExtendedInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        }
      ]
    >;

    planetsExtendedInfo2(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        }
      ]
    >;

    playerIds(idx: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    players(
      key: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          isInitialized: boolean;
          player: string;
          initTimestamp: BigNumber;
          homePlanetId: BigNumber;
          lastRevealTimestamp: BigNumber;
          score: BigNumber;
          spaceJunk: BigNumber;
          spaceJunkLimit: BigNumber;
          claimedShips: boolean;
        }
      ]
    >;

    revealedCoords(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, string] & {
          locationId: BigNumber;
          x: BigNumber;
          y: BigNumber;
          revealer: string;
        }
      ]
    >;

    revealedPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    worldRadius(overrides?: CallOverrides): Promise<[BigNumber]>;

    applySpaceshipDepart(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      },
      planet: {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      },
      planetExtendedInfo: {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      planetExtendedInfo2: {
        isInitialized: boolean;
        pausers: BigNumberish;
        invader: string;
        invadeStartBlock: BigNumberish;
        capturer: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        },
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        },
        [boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        }
      ]
    >;

    move(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeDefaults(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeUpgrades(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addKeys(
      hashes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToWhitelist(
      toAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminUseKey(
      keyHash: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowListEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    bulkAddToWhitelist(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeDrip(
      newDrip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRelayerReward(
      newReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableKeys(
      keys: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    drip(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNAllowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    isKeyHashValid(
      hashed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelisted(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    relayerReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeFromWhitelist(
      toRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRelayerRewardsEnabled(
      newRewardsEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    useKey(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _facetFunctionSelectors: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string[]] & {
          facetAddress: string;
          functionSelectors: string[];
        })[]
      ] & {
        facets_: ([string, string[]] & {
          facetAddress: string;
          functionSelectors: string[];
        })[];
      }
    >;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _checkGameOver(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arenaRevealLocation(
    args: {
      location: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
      isTargetPlanet: boolean;
      isSpawnPlanet: boolean;
      blockedPlanetIds: BigNumberish[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkCreateAndReveal(
    createArgsList: {
      location: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
      isTargetPlanet: boolean;
      isSpawnPlanet: boolean;
      blockedPlanetIds: BigNumberish[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkCreatePlanet(
    planets: {
      location: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
      isTargetPlanet: boolean;
      isSpawnPlanet: boolean;
      blockedPlanetIds: BigNumberish[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimVictory(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAndReveal(
    createPlanetArgs: {
      location: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
      isTargetPlanet: boolean;
      isSpawnPlanet: boolean;
      blockedPlanetIds: BigNumberish[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createArenaPlanet(
    args: {
      location: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
      isTargetPlanet: boolean;
      isSpawnPlanet: boolean;
      blockedPlanetIds: BigNumberish[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializePlayer(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    team: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitPlanet(
    _initPlanetArgs: {
      location: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
      isTargetPlanet: boolean;
      isSpawnPlanet: boolean;
      blockedPlanetIds: BigNumberish[];
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  notReady(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ready(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arenaPlayers(
    key: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, BigNumber] & {
      moves: BigNumber;
      ready: boolean;
      lastReadyTime: BigNumber;
      team: BigNumber;
    }
  >;

  bulkGetArenaPlayers(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, boolean, BigNumber, BigNumber] & {
      moves: BigNumber;
      ready: boolean;
      lastReadyTime: BigNumber;
      team: BigNumber;
    })[]
  >;

  bulkGetPlanetsArenaInfoByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([boolean, boolean, BigNumber[]] & {
      spawnPlanet: boolean;
      targetPlanet: boolean;
      blockedPlanetIds: BigNumber[];
    })[]
  >;

  bulkGetSpawnPlanetIds(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  bulkGetTargetPlanetIds(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getArenaConstants(
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      string,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        popCap: BigNumber;
        popGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        barbarianPercentage: BigNumber;
      },
      [boolean, boolean, boolean, boolean, boolean] & {
        mothership: boolean;
        whale: boolean;
        crescent: boolean;
        gear: boolean;
        titan: boolean;
      },
      BigNumber,
      boolean,
      boolean,
      string[],
      boolean,
      BigNumber,
      boolean,
      boolean,
      boolean,
      boolean,
      BigNumber,
      boolean
    ] & {
      TARGET_PLANETS: boolean;
      MANUAL_SPAWN: boolean;
      CONFIG_HASH: string;
      MODIFIERS: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        popCap: BigNumber;
        popGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        barbarianPercentage: BigNumber;
      };
      SPACESHIPS: [boolean, boolean, boolean, boolean, boolean] & {
        mothership: boolean;
        whale: boolean;
        crescent: boolean;
        gear: boolean;
        titan: boolean;
      };
      CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
      RANDOM_ARTIFACTS: boolean;
      NO_ADMIN: boolean;
      INIT_PLANET_HASHES: string[];
      CONFIRM_START: boolean;
      TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
      BLOCK_MOVES: boolean;
      BLOCK_CAPTURE: boolean;
      START_PAUSED: boolean;
      TEAMS_ENABLED: boolean;
      NUM_TEAMS: BigNumber;
      RANKED: boolean;
    }
  >;

  getEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  getGameover(overrides?: CallOverrides): Promise<boolean>;

  getGraphConstants(
    overrides?: CallOverrides
  ): Promise<
    [
      [
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
        boolean,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        BigNumber
      ] & {
        ADMIN_CAN_ADD_PLANETS: boolean;
        TOKEN_MINT_END_TIMESTAMP: BigNumber;
        WORLD_RADIUS_LOCKED: boolean;
        WORLD_RADIUS_MIN: BigNumber;
        MAX_NATURAL_PLANET_LEVEL: BigNumber;
        TIME_FACTOR_HUNDREDTHS: BigNumber;
        PERLIN_THRESHOLD_1: BigNumber;
        PERLIN_THRESHOLD_2: BigNumber;
        PERLIN_THRESHOLD_3: BigNumber;
        INIT_PERLIN_MIN: BigNumber;
        INIT_PERLIN_MAX: BigNumber;
        SPAWN_RIM_AREA: BigNumber;
        BIOME_THRESHOLD_1: BigNumber;
        BIOME_THRESHOLD_2: BigNumber;
        PLANET_LEVEL_THRESHOLDS: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        PLANET_RARITY: BigNumber;
        PLANET_TRANSFER_ENABLED: boolean;
        PHOTOID_ACTIVATION_DELAY: BigNumber;
        LOCATION_REVEAL_COOLDOWN: BigNumber;
        PLANET_TYPE_WEIGHTS: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        SILVER_SCORE_VALUE: BigNumber;
        ARTIFACT_POINT_VALUES: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        SPACE_JUNK_ENABLED: boolean;
        SPACE_JUNK_LIMIT: BigNumber;
        PLANET_LEVEL_JUNK: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
        ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
        GAME_START_BLOCK: BigNumber;
        CAPTURE_ZONES_ENABLED: boolean;
        CAPTURE_ZONE_COUNT: BigNumber;
        CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
        CAPTURE_ZONE_RADIUS: BigNumber;
        CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
        CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
      },
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        DISABLE_ZK_CHECKS: boolean;
        PLANETHASH_KEY: BigNumber;
        SPACETYPE_KEY: BigNumber;
        BIOMEBASE_KEY: BigNumber;
        PERLIN_MIRROR_X: boolean;
        PERLIN_MIRROR_Y: boolean;
        PERLIN_LENGTH_SCALE: BigNumber;
      },
      [
        boolean,
        boolean,
        string,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCap: BigNumber;
          popGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          barbarianPercentage: BigNumber;
        },
        [boolean, boolean, boolean, boolean, boolean] & {
          mothership: boolean;
          whale: boolean;
          crescent: boolean;
          gear: boolean;
          titan: boolean;
        },
        BigNumber,
        boolean,
        boolean,
        string[],
        boolean,
        BigNumber,
        boolean,
        boolean,
        boolean,
        boolean,
        BigNumber,
        boolean
      ] & {
        TARGET_PLANETS: boolean;
        MANUAL_SPAWN: boolean;
        CONFIG_HASH: string;
        MODIFIERS: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCap: BigNumber;
          popGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          barbarianPercentage: BigNumber;
        };
        SPACESHIPS: [boolean, boolean, boolean, boolean, boolean] & {
          mothership: boolean;
          whale: boolean;
          crescent: boolean;
          gear: boolean;
          titan: boolean;
        };
        CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
        RANDOM_ARTIFACTS: boolean;
        NO_ADMIN: boolean;
        INIT_PLANET_HASHES: string[];
        CONFIRM_START: boolean;
        TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
        BLOCK_MOVES: boolean;
        BLOCK_CAPTURE: boolean;
        START_PAUSED: boolean;
        TEAMS_ENABLED: boolean;
        NUM_TEAMS: BigNumber;
        RANKED: boolean;
      },
      [boolean, string, string[]] & {
        allowListEnabled: boolean;
        artifactBaseURI: string;
        allowedAddresses: string[];
      }
    ] & {
      gc: [
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
        boolean,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        BigNumber
      ] & {
        ADMIN_CAN_ADD_PLANETS: boolean;
        TOKEN_MINT_END_TIMESTAMP: BigNumber;
        WORLD_RADIUS_LOCKED: boolean;
        WORLD_RADIUS_MIN: BigNumber;
        MAX_NATURAL_PLANET_LEVEL: BigNumber;
        TIME_FACTOR_HUNDREDTHS: BigNumber;
        PERLIN_THRESHOLD_1: BigNumber;
        PERLIN_THRESHOLD_2: BigNumber;
        PERLIN_THRESHOLD_3: BigNumber;
        INIT_PERLIN_MIN: BigNumber;
        INIT_PERLIN_MAX: BigNumber;
        SPAWN_RIM_AREA: BigNumber;
        BIOME_THRESHOLD_1: BigNumber;
        BIOME_THRESHOLD_2: BigNumber;
        PLANET_LEVEL_THRESHOLDS: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        PLANET_RARITY: BigNumber;
        PLANET_TRANSFER_ENABLED: boolean;
        PHOTOID_ACTIVATION_DELAY: BigNumber;
        LOCATION_REVEAL_COOLDOWN: BigNumber;
        PLANET_TYPE_WEIGHTS: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        SILVER_SCORE_VALUE: BigNumber;
        ARTIFACT_POINT_VALUES: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        SPACE_JUNK_ENABLED: boolean;
        SPACE_JUNK_LIMIT: BigNumber;
        PLANET_LEVEL_JUNK: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
        ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
        GAME_START_BLOCK: BigNumber;
        CAPTURE_ZONES_ENABLED: boolean;
        CAPTURE_ZONE_COUNT: BigNumber;
        CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
        CAPTURE_ZONE_RADIUS: BigNumber;
        CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
        CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
      };
      sc: [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        DISABLE_ZK_CHECKS: boolean;
        PLANETHASH_KEY: BigNumber;
        SPACETYPE_KEY: BigNumber;
        BIOMEBASE_KEY: BigNumber;
        PERLIN_MIRROR_X: boolean;
        PERLIN_MIRROR_Y: boolean;
        PERLIN_LENGTH_SCALE: BigNumber;
      };
      ac: [
        boolean,
        boolean,
        string,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCap: BigNumber;
          popGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          barbarianPercentage: BigNumber;
        },
        [boolean, boolean, boolean, boolean, boolean] & {
          mothership: boolean;
          whale: boolean;
          crescent: boolean;
          gear: boolean;
          titan: boolean;
        },
        BigNumber,
        boolean,
        boolean,
        string[],
        boolean,
        BigNumber,
        boolean,
        boolean,
        boolean,
        boolean,
        BigNumber,
        boolean
      ] & {
        TARGET_PLANETS: boolean;
        MANUAL_SPAWN: boolean;
        CONFIG_HASH: string;
        MODIFIERS: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCap: BigNumber;
          popGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          barbarianPercentage: BigNumber;
        };
        SPACESHIPS: [boolean, boolean, boolean, boolean, boolean] & {
          mothership: boolean;
          whale: boolean;
          crescent: boolean;
          gear: boolean;
          titan: boolean;
        };
        CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
        RANDOM_ARTIFACTS: boolean;
        NO_ADMIN: boolean;
        INIT_PLANET_HASHES: string[];
        CONFIRM_START: boolean;
        TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
        BLOCK_MOVES: boolean;
        BLOCK_CAPTURE: boolean;
        START_PAUSED: boolean;
        TEAMS_ENABLED: boolean;
        NUM_TEAMS: BigNumber;
        RANKED: boolean;
      };
      ai: [boolean, string, string[]] & {
        allowListEnabled: boolean;
        artifactBaseURI: string;
        allowedAddresses: string[];
      };
    }
  >;

  getGraphGameConstants(
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ],
      BigNumber,
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      boolean,
      BigNumber,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      BigNumber,
      BigNumber
    ] & {
      ADMIN_CAN_ADD_PLANETS: boolean;
      TOKEN_MINT_END_TIMESTAMP: BigNumber;
      WORLD_RADIUS_LOCKED: boolean;
      WORLD_RADIUS_MIN: BigNumber;
      MAX_NATURAL_PLANET_LEVEL: BigNumber;
      TIME_FACTOR_HUNDREDTHS: BigNumber;
      PERLIN_THRESHOLD_1: BigNumber;
      PERLIN_THRESHOLD_2: BigNumber;
      PERLIN_THRESHOLD_3: BigNumber;
      INIT_PERLIN_MIN: BigNumber;
      INIT_PERLIN_MAX: BigNumber;
      SPAWN_RIM_AREA: BigNumber;
      BIOME_THRESHOLD_1: BigNumber;
      BIOME_THRESHOLD_2: BigNumber;
      PLANET_LEVEL_THRESHOLDS: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      PLANET_RARITY: BigNumber;
      PLANET_TRANSFER_ENABLED: boolean;
      PHOTOID_ACTIVATION_DELAY: BigNumber;
      LOCATION_REVEAL_COOLDOWN: BigNumber;
      PLANET_TYPE_WEIGHTS: [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ];
      SILVER_SCORE_VALUE: BigNumber;
      ARTIFACT_POINT_VALUES: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      SPACE_JUNK_ENABLED: boolean;
      SPACE_JUNK_LIMIT: BigNumber;
      PLANET_LEVEL_JUNK: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
      ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
      GAME_START_BLOCK: BigNumber;
      CAPTURE_ZONES_ENABLED: boolean;
      CAPTURE_ZONE_COUNT: BigNumber;
      CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
      CAPTURE_ZONE_RADIUS: BigNumber;
      CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
      CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
    }
  >;

  getInitPlanetHashes(overrides?: CallOverrides): Promise<string[]>;

  getInitializers(
    overrides?: CallOverrides
  ): Promise<
    [
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        boolean,
        [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ],
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
        BigNumber,
        boolean,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        [boolean, boolean, boolean, boolean, boolean],
        boolean,
        boolean,
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean,
          boolean,
          boolean,
          BigNumber[]
        ] & {
          location: BigNumber;
          x: BigNumber;
          y: BigNumber;
          perlin: BigNumber;
          level: BigNumber;
          planetType: number;
          requireValidLocationId: boolean;
          isTargetPlanet: boolean;
          isSpawnPlanet: boolean;
          blockedPlanetIds: BigNumber[];
        })[],
        boolean,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        boolean
      ] & {
        START_PAUSED: boolean;
        ADMIN_CAN_ADD_PLANETS: boolean;
        LOCATION_REVEAL_COOLDOWN: BigNumber;
        TOKEN_MINT_END_TIMESTAMP: BigNumber;
        WORLD_RADIUS_LOCKED: boolean;
        WORLD_RADIUS_MIN: BigNumber;
        DISABLE_ZK_CHECKS: boolean;
        PLANETHASH_KEY: BigNumber;
        SPACETYPE_KEY: BigNumber;
        BIOMEBASE_KEY: BigNumber;
        PERLIN_MIRROR_X: boolean;
        PERLIN_MIRROR_Y: boolean;
        PERLIN_LENGTH_SCALE: BigNumber;
        MAX_NATURAL_PLANET_LEVEL: BigNumber;
        TIME_FACTOR_HUNDREDTHS: BigNumber;
        PERLIN_THRESHOLD_1: BigNumber;
        PERLIN_THRESHOLD_2: BigNumber;
        PERLIN_THRESHOLD_3: BigNumber;
        INIT_PERLIN_MIN: BigNumber;
        INIT_PERLIN_MAX: BigNumber;
        SPAWN_RIM_AREA: BigNumber;
        BIOME_THRESHOLD_1: BigNumber;
        BIOME_THRESHOLD_2: BigNumber;
        PLANET_LEVEL_THRESHOLDS: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        PLANET_RARITY: BigNumber;
        PLANET_TRANSFER_ENABLED: boolean;
        PLANET_TYPE_WEIGHTS: [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ];
        SILVER_SCORE_VALUE: BigNumber;
        ARTIFACT_POINT_VALUES: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        PHOTOID_ACTIVATION_DELAY: BigNumber;
        SPACE_JUNK_ENABLED: boolean;
        SPACE_JUNK_LIMIT: BigNumber;
        PLANET_LEVEL_JUNK: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
        ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
        CAPTURE_ZONES_ENABLED: boolean;
        CAPTURE_ZONE_COUNT: BigNumber;
        CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
        CAPTURE_ZONE_RADIUS: BigNumber;
        CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
        CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
        TARGET_PLANETS: boolean;
        CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
        MANUAL_SPAWN: boolean;
        MODIFIERS: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        SPACESHIPS: [boolean, boolean, boolean, boolean, boolean];
        RANDOM_ARTIFACTS: boolean;
        NO_ADMIN: boolean;
        INIT_PLANETS: ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean,
          boolean,
          boolean,
          BigNumber[]
        ] & {
          location: BigNumber;
          x: BigNumber;
          y: BigNumber;
          perlin: BigNumber;
          level: BigNumber;
          planetType: number;
          requireValidLocationId: boolean;
          isTargetPlanet: boolean;
          isSpawnPlanet: boolean;
          blockedPlanetIds: BigNumber[];
        })[];
        CONFIRM_START: boolean;
        TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
        BLOCK_MOVES: boolean;
        BLOCK_CAPTURE: boolean;
        TEAMS_ENABLED: boolean;
        NUM_TEAMS: BigNumber;
        RANKED: boolean;
      },
      [boolean, string, string[]] & {
        allowListEnabled: boolean;
        artifactBaseURI: string;
        allowedAddresses: string[];
      }
    ] & {
      initArgs: [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        boolean,
        [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ],
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
        BigNumber,
        boolean,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        [boolean, boolean, boolean, boolean, boolean],
        boolean,
        boolean,
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean,
          boolean,
          boolean,
          BigNumber[]
        ] & {
          location: BigNumber;
          x: BigNumber;
          y: BigNumber;
          perlin: BigNumber;
          level: BigNumber;
          planetType: number;
          requireValidLocationId: boolean;
          isTargetPlanet: boolean;
          isSpawnPlanet: boolean;
          blockedPlanetIds: BigNumber[];
        })[],
        boolean,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        boolean
      ] & {
        START_PAUSED: boolean;
        ADMIN_CAN_ADD_PLANETS: boolean;
        LOCATION_REVEAL_COOLDOWN: BigNumber;
        TOKEN_MINT_END_TIMESTAMP: BigNumber;
        WORLD_RADIUS_LOCKED: boolean;
        WORLD_RADIUS_MIN: BigNumber;
        DISABLE_ZK_CHECKS: boolean;
        PLANETHASH_KEY: BigNumber;
        SPACETYPE_KEY: BigNumber;
        BIOMEBASE_KEY: BigNumber;
        PERLIN_MIRROR_X: boolean;
        PERLIN_MIRROR_Y: boolean;
        PERLIN_LENGTH_SCALE: BigNumber;
        MAX_NATURAL_PLANET_LEVEL: BigNumber;
        TIME_FACTOR_HUNDREDTHS: BigNumber;
        PERLIN_THRESHOLD_1: BigNumber;
        PERLIN_THRESHOLD_2: BigNumber;
        PERLIN_THRESHOLD_3: BigNumber;
        INIT_PERLIN_MIN: BigNumber;
        INIT_PERLIN_MAX: BigNumber;
        SPAWN_RIM_AREA: BigNumber;
        BIOME_THRESHOLD_1: BigNumber;
        BIOME_THRESHOLD_2: BigNumber;
        PLANET_LEVEL_THRESHOLDS: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        PLANET_RARITY: BigNumber;
        PLANET_TRANSFER_ENABLED: boolean;
        PLANET_TYPE_WEIGHTS: [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ];
        SILVER_SCORE_VALUE: BigNumber;
        ARTIFACT_POINT_VALUES: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        PHOTOID_ACTIVATION_DELAY: BigNumber;
        SPACE_JUNK_ENABLED: boolean;
        SPACE_JUNK_LIMIT: BigNumber;
        PLANET_LEVEL_JUNK: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
        ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
        CAPTURE_ZONES_ENABLED: boolean;
        CAPTURE_ZONE_COUNT: BigNumber;
        CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
        CAPTURE_ZONE_RADIUS: BigNumber;
        CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
        CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
        TARGET_PLANETS: boolean;
        CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
        MANUAL_SPAWN: boolean;
        MODIFIERS: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        SPACESHIPS: [boolean, boolean, boolean, boolean, boolean];
        RANDOM_ARTIFACTS: boolean;
        NO_ADMIN: boolean;
        INIT_PLANETS: ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean,
          boolean,
          boolean,
          BigNumber[]
        ] & {
          location: BigNumber;
          x: BigNumber;
          y: BigNumber;
          perlin: BigNumber;
          level: BigNumber;
          planetType: number;
          requireValidLocationId: boolean;
          isTargetPlanet: boolean;
          isSpawnPlanet: boolean;
          blockedPlanetIds: BigNumber[];
        })[];
        CONFIRM_START: boolean;
        TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
        BLOCK_MOVES: boolean;
        BLOCK_CAPTURE: boolean;
        TEAMS_ENABLED: boolean;
        NUM_TEAMS: BigNumber;
        RANKED: boolean;
      };
      auxArgs: [boolean, string, string[]] & {
        allowListEnabled: boolean;
        artifactBaseURI: string;
        allowedAddresses: string[];
      };
    }
  >;

  getMatch(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getMatches(overrides?: CallOverrides): Promise<string[]>;

  getNSpawnPlanets(overrides?: CallOverrides): Promise<BigNumber>;

  getNTargetPlanets(overrides?: CallOverrides): Promise<BigNumber>;

  getNumMatches(overrides?: CallOverrides): Promise<BigNumber>;

  getRoundDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  getTeam(team: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

  getWinners(overrides?: CallOverrides): Promise<string[]>;

  isBlocked(
    dest: BigNumberish,
    src: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  planetsArenaInfo(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber[]] & {
      spawnPlanet: boolean;
      targetPlanet: boolean;
      blockedPlanetIds: BigNumber[];
    }
  >;

  spawnPlanetIds(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  targetPlanetIds(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createLobby(
    initAddress: string,
    initData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  giveSpaceShips(
    locationId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addScore(
    playerAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminGiveSpaceShip(
    locationId: BigNumberish,
    owner: string,
    artifactType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminInitializePlanet(
    locationId: BigNumberish,
    perlin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminSetWorldRadius(
    _newRadius: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeLocationRevealCooldown(
    newCooldown: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeWorldRadiusMin(
    _newConstant: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPlanet(
    args: {
      location: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deductScore(
    playerAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeSetOwner(
    newOwner: string,
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    planetId: BigNumberish,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlanetTransferEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenMintEndTime(
    newTokenMintEndTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activateArtifact(
    locationId: BigNumberish,
    artifactId: BigNumberish,
    wormholeTo: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminGiveArtifact(
    args: {
      tokenId: BigNumberish;
      discoverer: string;
      planetId: BigNumberish;
      rarity: BigNumberish;
      biome: BigNumberish;
      artifactType: BigNumberish;
      owner: string;
      controller: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    operator: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  createArtifact(
    args: {
      tokenId: BigNumberish;
      discoverer: string;
      planetId: BigNumberish;
      rarity: BigNumberish;
      biome: BigNumberish;
      artifactType: BigNumberish;
      owner: string;
      controller: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deactivateArtifact(
    locationId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositArtifact(
    locationId: BigNumberish,
    artifactId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  doesArtifactExist(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  findArtifact(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getArtifact(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      isInitialized: boolean;
      id: BigNumber;
      planetDiscoveredOn: BigNumber;
      rarity: number;
      planetBiome: number;
      mintedAtTimestamp: BigNumber;
      discoverer: string;
      artifactType: number;
      activations: BigNumber;
      lastActivated: BigNumber;
      lastDeactivated: BigNumber;
      wormholeTo: BigNumber;
      controller: string;
    }
  >;

  getArtifactAtIndex(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      isInitialized: boolean;
      id: BigNumber;
      planetDiscoveredOn: BigNumber;
      rarity: number;
      planetBiome: number;
      mintedAtTimestamp: BigNumber;
      discoverer: string;
      artifactType: number;
      activations: BigNumber;
      lastActivated: BigNumber;
      lastDeactivated: BigNumber;
      wormholeTo: BigNumber;
      controller: string;
    }
  >;

  getPlayerArtifactIds(
    playerId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  prospectPlanet(
    locationId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferArtifact(
    tokenId: BigNumberish,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateArtifact(
    updatedArtifact: {
      isInitialized: boolean;
      id: BigNumberish;
      planetDiscoveredOn: BigNumberish;
      rarity: BigNumberish;
      planetBiome: BigNumberish;
      mintedAtTimestamp: BigNumberish;
      discoverer: string;
      artifactType: BigNumberish;
      activations: BigNumberish;
      lastActivated: BigNumberish;
      lastDeactivated: BigNumberish;
      wormholeTo: BigNumberish;
      controller: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawArtifact(
    locationId: BigNumberish,
    artifactId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  capturePlanet(
    locationId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getIntFromUInt(
    n: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  invadePlanet(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  planetInCaptureZone(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyHat(
    _location: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkRevealProof(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRefreshedPlanet(
    location: BigNumberish,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      },
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
        spaceJunk: BigNumber;
      },
      [boolean, BigNumber, string, BigNumber, string] & {
        isInitialized: boolean;
        pausers: BigNumber;
        invader: string;
        invadeStartBlock: BigNumber;
        capturer: string;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    ] & {
      eventsToRemove: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      artifactsToAdd: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }
  >;

  refreshPlanet(
    location: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealLocation(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferPlanet(
    _location: BigNumberish,
    _player: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradePlanet(
    _location: BigNumberish,
    _branch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSilver(
    locationId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminFillPlanet(
    locationId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  TOKEN_MINT_END_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

  adminAddress(overrides?: CallOverrides): Promise<string>;

  artifactIdToPlanetId(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  artifactIdToVoyageId(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bulkGetArtifacts(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      string,
      BigNumber,
      BigNumber
    ] & {
      artifact: [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      };
      upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      timeDelayedUpgrade: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      owner: string;
      locationId: BigNumber;
      voyageId: BigNumber;
    })[]
  >;

  bulkGetArtifactsByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      string,
      BigNumber,
      BigNumber
    ] & {
      artifact: [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      };
      upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      timeDelayedUpgrade: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      owner: string;
      locationId: BigNumber;
      voyageId: BigNumber;
    })[]
  >;

  bulkGetPlanetArrivals(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      player: string;
      fromPlanet: BigNumber;
      toPlanet: BigNumber;
      popArriving: BigNumber;
      silverMoved: BigNumber;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      arrivalType: number;
      carriedArtifactId: BigNumber;
      distance: BigNumber;
    })[][]
  >;

  bulkGetPlanetArrivalsByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      player: string;
      fromPlanet: BigNumber;
      toPlanet: BigNumber;
      popArriving: BigNumber;
      silverMoved: BigNumber;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      arrivalType: number;
      carriedArtifactId: BigNumber;
      distance: BigNumber;
    })[][]
  >;

  bulkGetPlanetArtifacts(
    planetIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      string,
      BigNumber,
      BigNumber
    ] & {
      artifact: [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      };
      upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      timeDelayedUpgrade: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      owner: string;
      locationId: BigNumber;
      voyageId: BigNumber;
    })[][]
  >;

  bulkGetPlanetIds(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  bulkGetPlanets(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      owner: string;
      range: BigNumber;
      speed: BigNumber;
      defense: BigNumber;
      population: BigNumber;
      populationCap: BigNumber;
      populationGrowth: BigNumber;
      silverCap: BigNumber;
      silverGrowth: BigNumber;
      silver: BigNumber;
      planetLevel: BigNumber;
      planetType: number;
      isHomePlanet: boolean;
    })[]
  >;

  bulkGetPlanetsByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      owner: string;
      range: BigNumber;
      speed: BigNumber;
      defense: BigNumber;
      population: BigNumber;
      populationCap: BigNumber;
      populationGrowth: BigNumber;
      silverCap: BigNumber;
      silverGrowth: BigNumber;
      silver: BigNumber;
      planetLevel: BigNumber;
      planetType: number;
      isHomePlanet: boolean;
    })[]
  >;

  bulkGetPlanetsDataByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      },
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
        spaceJunk: BigNumber;
      },
      [boolean, BigNumber, string, BigNumber, string] & {
        isInitialized: boolean;
        pausers: BigNumber;
        invader: string;
        invadeStartBlock: BigNumber;
        capturer: string;
      },
      [BigNumber, BigNumber, BigNumber, string] & {
        locationId: BigNumber;
        x: BigNumber;
        y: BigNumber;
        revealer: string;
      }
    ] & {
      planet: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      };
      info: [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
        spaceJunk: BigNumber;
      };
      info2: [boolean, BigNumber, string, BigNumber, string] & {
        isInitialized: boolean;
        pausers: BigNumber;
        invader: string;
        invadeStartBlock: BigNumber;
        capturer: string;
      };
      revealedCoords: [BigNumber, BigNumber, BigNumber, string] & {
        locationId: BigNumber;
        x: BigNumber;
        y: BigNumber;
        revealer: string;
      };
    })[]
  >;

  bulkGetPlanetsExtendedInfo(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      isInitialized: boolean;
      createdAt: BigNumber;
      lastUpdated: BigNumber;
      perlin: BigNumber;
      spaceType: number;
      upgradeState0: BigNumber;
      upgradeState1: BigNumber;
      upgradeState2: BigNumber;
      hatLevel: BigNumber;
      hasTriedFindingArtifact: boolean;
      prospectedBlockNumber: BigNumber;
      destroyed: boolean;
      spaceJunk: BigNumber;
    })[]
  >;

  bulkGetPlanetsExtendedInfo2ByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([boolean, BigNumber, string, BigNumber, string] & {
      isInitialized: boolean;
      pausers: BigNumber;
      invader: string;
      invadeStartBlock: BigNumber;
      capturer: string;
    })[]
  >;

  bulkGetPlanetsExtendedInfoByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      isInitialized: boolean;
      createdAt: BigNumber;
      lastUpdated: BigNumber;
      perlin: BigNumber;
      spaceType: number;
      upgradeState0: BigNumber;
      upgradeState1: BigNumber;
      upgradeState2: BigNumber;
      hatLevel: BigNumber;
      hasTriedFindingArtifact: boolean;
      prospectedBlockNumber: BigNumber;
      destroyed: boolean;
      spaceJunk: BigNumber;
    })[]
  >;

  bulkGetPlayerIds(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  bulkGetPlayers(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      isInitialized: boolean;
      player: string;
      initTimestamp: BigNumber;
      homePlanetId: BigNumber;
      lastRevealTimestamp: BigNumber;
      score: BigNumber;
      spaceJunk: BigNumber;
      spaceJunkLimit: BigNumber;
      claimedShips: boolean;
    })[]
  >;

  bulkGetRevealedCoordsByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, string] & {
      locationId: BigNumber;
      x: BigNumber;
      y: BigNumber;
      revealer: string;
    })[]
  >;

  bulkGetRevealedPlanetIds(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  bulkGetVoyagesByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      player: string;
      fromPlanet: BigNumber;
      toPlanet: BigNumber;
      popArriving: BigNumber;
      silverMoved: BigNumber;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      arrivalType: number;
      carriedArtifactId: BigNumber;
      distance: BigNumber;
    })[]
  >;

  getArtifactById(
    artifactId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      string,
      BigNumber,
      BigNumber
    ] & {
      artifact: [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      };
      upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      timeDelayedUpgrade: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      owner: string;
      locationId: BigNumber;
      voyageId: BigNumber;
    }
  >;

  getArtifactPointValues(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  >;

  getArtifactsOnPlanet(
    locationId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      string,
      BigNumber,
      BigNumber
    ] & {
      artifact: [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      };
      upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      timeDelayedUpgrade: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      owner: string;
      locationId: BigNumber;
      voyageId: BigNumber;
    })[]
  >;

  getCumulativeRarities(overrides?: CallOverrides): Promise<BigNumber[]>;

  getDefaultStats(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      label: string;
      populationCap: BigNumber;
      populationGrowth: BigNumber;
      range: BigNumber;
      speed: BigNumber;
      defense: BigNumber;
      silverGrowth: BigNumber;
      silverCap: BigNumber;
      barbarianPercentage: BigNumber;
    })[]
  >;

  getGameConstants(
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      [
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ]
      ],
      BigNumber,
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      boolean,
      BigNumber,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      BigNumber,
      BigNumber
    ] & {
      ADMIN_CAN_ADD_PLANETS: boolean;
      WORLD_RADIUS_LOCKED: boolean;
      WORLD_RADIUS_MIN: BigNumber;
      MAX_NATURAL_PLANET_LEVEL: BigNumber;
      TIME_FACTOR_HUNDREDTHS: BigNumber;
      PERLIN_THRESHOLD_1: BigNumber;
      PERLIN_THRESHOLD_2: BigNumber;
      PERLIN_THRESHOLD_3: BigNumber;
      INIT_PERLIN_MIN: BigNumber;
      INIT_PERLIN_MAX: BigNumber;
      SPAWN_RIM_AREA: BigNumber;
      BIOME_THRESHOLD_1: BigNumber;
      BIOME_THRESHOLD_2: BigNumber;
      PLANET_LEVEL_THRESHOLDS: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      PLANET_RARITY: BigNumber;
      PLANET_TRANSFER_ENABLED: boolean;
      PHOTOID_ACTIVATION_DELAY: BigNumber;
      LOCATION_REVEAL_COOLDOWN: BigNumber;
      PLANET_TYPE_WEIGHTS: [
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ]
      ];
      SILVER_SCORE_VALUE: BigNumber;
      ARTIFACT_POINT_VALUES: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      SPACE_JUNK_ENABLED: boolean;
      SPACE_JUNK_LIMIT: BigNumber;
      PLANET_LEVEL_JUNK: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
      ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
      GAME_START_BLOCK: BigNumber;
      CAPTURE_ZONES_ENABLED: boolean;
      CAPTURE_ZONE_COUNT: BigNumber;
      CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
      CAPTURE_ZONE_RADIUS: BigNumber;
      CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
      CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
    }
  >;

  getNPlanets(overrides?: CallOverrides): Promise<BigNumber>;

  getNPlayers(overrides?: CallOverrides): Promise<BigNumber>;

  getNRevealedPlanets(overrides?: CallOverrides): Promise<BigNumber>;

  getPlanetArrival(
    arrivalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      player: string;
      fromPlanet: BigNumber;
      toPlanet: BigNumber;
      popArriving: BigNumber;
      silverMoved: BigNumber;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      arrivalType: number;
      carriedArtifactId: BigNumber;
      distance: BigNumber;
    }
  >;

  getPlanetArrivals(
    _location: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      player: string;
      fromPlanet: BigNumber;
      toPlanet: BigNumber;
      popArriving: BigNumber;
      silverMoved: BigNumber;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      arrivalType: number;
      carriedArtifactId: BigNumber;
      distance: BigNumber;
    })[]
  >;

  getPlanetEvent(
    locationId: BigNumberish,
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber] & {
      id: BigNumber;
      eventType: number;
      timeTrigger: BigNumber;
      timeAdded: BigNumber;
    }
  >;

  getPlanetEventsCount(
    locationId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlanetLevelThresholds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getPlayerSpaceJunkLimit(
    playerId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRevealCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  getRevealedCoords(
    locationId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      locationId: BigNumber;
      x: BigNumber;
      y: BigNumber;
      revealer: string;
    }
  >;

  getSnarkConstants(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, boolean, boolean, BigNumber] & {
      DISABLE_ZK_CHECKS: boolean;
      PLANETHASH_KEY: BigNumber;
      SPACETYPE_KEY: BigNumber;
      BIOMEBASE_KEY: BigNumber;
      PERLIN_MIRROR_X: boolean;
      PERLIN_MIRROR_Y: boolean;
      PERLIN_LENGTH_SCALE: BigNumber;
    }
  >;

  getTypeWeights(
    overrides?: CallOverrides
  ): Promise<
    [
      [
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number]
      ],
      [
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number]
      ],
      [
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number]
      ],
      [
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number]
      ]
    ]
  >;

  getUpgrades(
    overrides?: CallOverrides
  ): Promise<
    [
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        }
      ],
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        }
      ],
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        }
      ]
    ]
  >;

  paused(overrides?: CallOverrides): Promise<boolean>;

  planetArrivals(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      player: string;
      fromPlanet: BigNumber;
      toPlanet: BigNumber;
      popArriving: BigNumber;
      silverMoved: BigNumber;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      arrivalType: number;
      carriedArtifactId: BigNumber;
      distance: BigNumber;
    }
  >;

  planetArtifacts(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  planetDefaultStats(
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      label: string;
      populationCap: BigNumber;
      populationGrowth: BigNumber;
      range: BigNumber;
      speed: BigNumber;
      defense: BigNumber;
      silverGrowth: BigNumber;
      silverCap: BigNumber;
      barbarianPercentage: BigNumber;
    }
  >;

  planetEvents(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, number, BigNumber, BigNumber] & {
      id: BigNumber;
      eventType: number;
      timeTrigger: BigNumber;
      timeAdded: BigNumber;
    })[]
  >;

  planetEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

  planetIds(idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  planetLevelsCount(overrides?: CallOverrides): Promise<BigNumber>;

  planets(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      owner: string;
      range: BigNumber;
      speed: BigNumber;
      defense: BigNumber;
      population: BigNumber;
      populationCap: BigNumber;
      populationGrowth: BigNumber;
      silverCap: BigNumber;
      silverGrowth: BigNumber;
      silver: BigNumber;
      planetLevel: BigNumber;
      planetType: number;
      isHomePlanet: boolean;
    }
  >;

  planetsExtendedInfo(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      isInitialized: boolean;
      createdAt: BigNumber;
      lastUpdated: BigNumber;
      perlin: BigNumber;
      spaceType: number;
      upgradeState0: BigNumber;
      upgradeState1: BigNumber;
      upgradeState2: BigNumber;
      hatLevel: BigNumber;
      hasTriedFindingArtifact: boolean;
      prospectedBlockNumber: BigNumber;
      destroyed: boolean;
      spaceJunk: BigNumber;
    }
  >;

  planetsExtendedInfo2(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, BigNumber, string] & {
      isInitialized: boolean;
      pausers: BigNumber;
      invader: string;
      invadeStartBlock: BigNumber;
      capturer: string;
    }
  >;

  playerIds(idx: BigNumberish, overrides?: CallOverrides): Promise<string>;

  players(
    key: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      isInitialized: boolean;
      player: string;
      initTimestamp: BigNumber;
      homePlanetId: BigNumber;
      lastRevealTimestamp: BigNumber;
      score: BigNumber;
      spaceJunk: BigNumber;
      spaceJunkLimit: BigNumber;
      claimedShips: boolean;
    }
  >;

  revealedCoords(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      locationId: BigNumber;
      x: BigNumber;
      y: BigNumber;
      revealer: string;
    }
  >;

  revealedPlanetIds(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  worldRadius(overrides?: CallOverrides): Promise<BigNumber>;

  applySpaceshipDepart(
    artifact: {
      isInitialized: boolean;
      id: BigNumberish;
      planetDiscoveredOn: BigNumberish;
      rarity: BigNumberish;
      planetBiome: BigNumberish;
      mintedAtTimestamp: BigNumberish;
      discoverer: string;
      artifactType: BigNumberish;
      activations: BigNumberish;
      lastActivated: BigNumberish;
      lastDeactivated: BigNumberish;
      wormholeTo: BigNumberish;
      controller: string;
    },
    planet: {
      owner: string;
      range: BigNumberish;
      speed: BigNumberish;
      defense: BigNumberish;
      population: BigNumberish;
      populationCap: BigNumberish;
      populationGrowth: BigNumberish;
      silverCap: BigNumberish;
      silverGrowth: BigNumberish;
      silver: BigNumberish;
      planetLevel: BigNumberish;
      planetType: BigNumberish;
      isHomePlanet: boolean;
    },
    planetExtendedInfo: {
      isInitialized: boolean;
      createdAt: BigNumberish;
      lastUpdated: BigNumberish;
      perlin: BigNumberish;
      spaceType: BigNumberish;
      upgradeState0: BigNumberish;
      upgradeState1: BigNumberish;
      upgradeState2: BigNumberish;
      hatLevel: BigNumberish;
      hasTriedFindingArtifact: boolean;
      prospectedBlockNumber: BigNumberish;
      destroyed: boolean;
      spaceJunk: BigNumberish;
    },
    planetExtendedInfo2: {
      isInitialized: boolean;
      pausers: BigNumberish;
      invader: string;
      invadeStartBlock: BigNumberish;
      capturer: string;
    },
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      },
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
        spaceJunk: BigNumber;
      },
      [boolean, BigNumber, string, BigNumber, string] & {
        isInitialized: boolean;
        pausers: BigNumber;
        invader: string;
        invadeStartBlock: BigNumber;
        capturer: string;
      }
    ]
  >;

  move(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeDefaults(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeUpgrades(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addKeys(
    hashes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToWhitelist(
    toAdd: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminUseKey(
    keyHash: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowListEnabled(overrides?: CallOverrides): Promise<boolean>;

  bulkAddToWhitelist(
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeDrip(
    newDrip: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRelayerReward(
    newReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableKeys(
    keys: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  drip(overrides?: CallOverrides): Promise<BigNumber>;

  getNAllowed(overrides?: CallOverrides): Promise<BigNumber>;

  isKeyHashValid(
    hashed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelisted(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  relayerReward(overrides?: CallOverrides): Promise<BigNumber>;

  removeFromWhitelist(
    toRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRelayerRewardsEnabled(
    newRewardsEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  useKey(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    _diamondCut: {
      facetAddress: string;
      action: BigNumberish;
      functionSelectors: BytesLike[];
    }[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(
    overrides?: CallOverrides
  ): Promise<
    ([string, string[]] & {
      facetAddress: string;
      functionSelectors: string[];
    })[]
  >;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _checkGameOver(overrides?: CallOverrides): Promise<boolean>;

    arenaRevealLocation(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkCreateAndReveal(
      createArgsList: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    bulkCreatePlanet(
      planets: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimVictory(overrides?: CallOverrides): Promise<void>;

    createAndReveal(
      createPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    createArenaPlanet(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    initializePlayer(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      team: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitPlanet(
      _initPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    notReady(overrides?: CallOverrides): Promise<void>;

    ready(overrides?: CallOverrides): Promise<void>;

    arenaPlayers(
      key: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber] & {
        moves: BigNumber;
        ready: boolean;
        lastReadyTime: BigNumber;
        team: BigNumber;
      }
    >;

    bulkGetArenaPlayers(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, boolean, BigNumber, BigNumber] & {
        moves: BigNumber;
        ready: boolean;
        lastReadyTime: BigNumber;
        team: BigNumber;
      })[]
    >;

    bulkGetPlanetsArenaInfoByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([boolean, boolean, BigNumber[]] & {
        spawnPlanet: boolean;
        targetPlanet: boolean;
        blockedPlanetIds: BigNumber[];
      })[]
    >;

    bulkGetSpawnPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    bulkGetTargetPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getArenaConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        string,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCap: BigNumber;
          popGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          barbarianPercentage: BigNumber;
        },
        [boolean, boolean, boolean, boolean, boolean] & {
          mothership: boolean;
          whale: boolean;
          crescent: boolean;
          gear: boolean;
          titan: boolean;
        },
        BigNumber,
        boolean,
        boolean,
        string[],
        boolean,
        BigNumber,
        boolean,
        boolean,
        boolean,
        boolean,
        BigNumber,
        boolean
      ] & {
        TARGET_PLANETS: boolean;
        MANUAL_SPAWN: boolean;
        CONFIG_HASH: string;
        MODIFIERS: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCap: BigNumber;
          popGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          barbarianPercentage: BigNumber;
        };
        SPACESHIPS: [boolean, boolean, boolean, boolean, boolean] & {
          mothership: boolean;
          whale: boolean;
          crescent: boolean;
          gear: boolean;
          titan: boolean;
        };
        CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
        RANDOM_ARTIFACTS: boolean;
        NO_ADMIN: boolean;
        INIT_PLANET_HASHES: string[];
        CONFIRM_START: boolean;
        TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
        BLOCK_MOVES: boolean;
        BLOCK_CAPTURE: boolean;
        START_PAUSED: boolean;
        TEAMS_ENABLED: boolean;
        NUM_TEAMS: BigNumber;
        RANKED: boolean;
      }
    >;

    getEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    getGameover(overrides?: CallOverrides): Promise<boolean>;

    getGraphConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          [
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
          ],
          BigNumber,
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
          boolean,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          BigNumber
        ] & {
          ADMIN_CAN_ADD_PLANETS: boolean;
          TOKEN_MINT_END_TIMESTAMP: BigNumber;
          WORLD_RADIUS_LOCKED: boolean;
          WORLD_RADIUS_MIN: BigNumber;
          MAX_NATURAL_PLANET_LEVEL: BigNumber;
          TIME_FACTOR_HUNDREDTHS: BigNumber;
          PERLIN_THRESHOLD_1: BigNumber;
          PERLIN_THRESHOLD_2: BigNumber;
          PERLIN_THRESHOLD_3: BigNumber;
          INIT_PERLIN_MIN: BigNumber;
          INIT_PERLIN_MAX: BigNumber;
          SPAWN_RIM_AREA: BigNumber;
          BIOME_THRESHOLD_1: BigNumber;
          BIOME_THRESHOLD_2: BigNumber;
          PLANET_LEVEL_THRESHOLDS: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          PLANET_RARITY: BigNumber;
          PLANET_TRANSFER_ENABLED: boolean;
          PHOTOID_ACTIVATION_DELAY: BigNumber;
          LOCATION_REVEAL_COOLDOWN: BigNumber;
          PLANET_TYPE_WEIGHTS: [
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
          ];
          SILVER_SCORE_VALUE: BigNumber;
          ARTIFACT_POINT_VALUES: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          SPACE_JUNK_ENABLED: boolean;
          SPACE_JUNK_LIMIT: BigNumber;
          PLANET_LEVEL_JUNK: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
          ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
          GAME_START_BLOCK: BigNumber;
          CAPTURE_ZONES_ENABLED: boolean;
          CAPTURE_ZONE_COUNT: BigNumber;
          CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
          CAPTURE_ZONE_RADIUS: BigNumber;
          CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
          CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
        },
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber
        ] & {
          DISABLE_ZK_CHECKS: boolean;
          PLANETHASH_KEY: BigNumber;
          SPACETYPE_KEY: BigNumber;
          BIOMEBASE_KEY: BigNumber;
          PERLIN_MIRROR_X: boolean;
          PERLIN_MIRROR_Y: boolean;
          PERLIN_LENGTH_SCALE: BigNumber;
        },
        [
          boolean,
          boolean,
          string,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCap: BigNumber;
            popGrowth: BigNumber;
            silverCap: BigNumber;
            silverGrowth: BigNumber;
            range: BigNumber;
            speed: BigNumber;
            defense: BigNumber;
            barbarianPercentage: BigNumber;
          },
          [boolean, boolean, boolean, boolean, boolean] & {
            mothership: boolean;
            whale: boolean;
            crescent: boolean;
            gear: boolean;
            titan: boolean;
          },
          BigNumber,
          boolean,
          boolean,
          string[],
          boolean,
          BigNumber,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          boolean
        ] & {
          TARGET_PLANETS: boolean;
          MANUAL_SPAWN: boolean;
          CONFIG_HASH: string;
          MODIFIERS: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCap: BigNumber;
            popGrowth: BigNumber;
            silverCap: BigNumber;
            silverGrowth: BigNumber;
            range: BigNumber;
            speed: BigNumber;
            defense: BigNumber;
            barbarianPercentage: BigNumber;
          };
          SPACESHIPS: [boolean, boolean, boolean, boolean, boolean] & {
            mothership: boolean;
            whale: boolean;
            crescent: boolean;
            gear: boolean;
            titan: boolean;
          };
          CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
          RANDOM_ARTIFACTS: boolean;
          NO_ADMIN: boolean;
          INIT_PLANET_HASHES: string[];
          CONFIRM_START: boolean;
          TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
          BLOCK_MOVES: boolean;
          BLOCK_CAPTURE: boolean;
          START_PAUSED: boolean;
          TEAMS_ENABLED: boolean;
          NUM_TEAMS: BigNumber;
          RANKED: boolean;
        },
        [boolean, string, string[]] & {
          allowListEnabled: boolean;
          artifactBaseURI: string;
          allowedAddresses: string[];
        }
      ] & {
        gc: [
          boolean,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          [
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
          ],
          BigNumber,
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
          boolean,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          BigNumber
        ] & {
          ADMIN_CAN_ADD_PLANETS: boolean;
          TOKEN_MINT_END_TIMESTAMP: BigNumber;
          WORLD_RADIUS_LOCKED: boolean;
          WORLD_RADIUS_MIN: BigNumber;
          MAX_NATURAL_PLANET_LEVEL: BigNumber;
          TIME_FACTOR_HUNDREDTHS: BigNumber;
          PERLIN_THRESHOLD_1: BigNumber;
          PERLIN_THRESHOLD_2: BigNumber;
          PERLIN_THRESHOLD_3: BigNumber;
          INIT_PERLIN_MIN: BigNumber;
          INIT_PERLIN_MAX: BigNumber;
          SPAWN_RIM_AREA: BigNumber;
          BIOME_THRESHOLD_1: BigNumber;
          BIOME_THRESHOLD_2: BigNumber;
          PLANET_LEVEL_THRESHOLDS: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          PLANET_RARITY: BigNumber;
          PLANET_TRANSFER_ENABLED: boolean;
          PHOTOID_ACTIVATION_DELAY: BigNumber;
          LOCATION_REVEAL_COOLDOWN: BigNumber;
          PLANET_TYPE_WEIGHTS: [
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number
          ];
          SILVER_SCORE_VALUE: BigNumber;
          ARTIFACT_POINT_VALUES: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          SPACE_JUNK_ENABLED: boolean;
          SPACE_JUNK_LIMIT: BigNumber;
          PLANET_LEVEL_JUNK: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
          ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
          GAME_START_BLOCK: BigNumber;
          CAPTURE_ZONES_ENABLED: boolean;
          CAPTURE_ZONE_COUNT: BigNumber;
          CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
          CAPTURE_ZONE_RADIUS: BigNumber;
          CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
          CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
        };
        sc: [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber
        ] & {
          DISABLE_ZK_CHECKS: boolean;
          PLANETHASH_KEY: BigNumber;
          SPACETYPE_KEY: BigNumber;
          BIOMEBASE_KEY: BigNumber;
          PERLIN_MIRROR_X: boolean;
          PERLIN_MIRROR_Y: boolean;
          PERLIN_LENGTH_SCALE: BigNumber;
        };
        ac: [
          boolean,
          boolean,
          string,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCap: BigNumber;
            popGrowth: BigNumber;
            silverCap: BigNumber;
            silverGrowth: BigNumber;
            range: BigNumber;
            speed: BigNumber;
            defense: BigNumber;
            barbarianPercentage: BigNumber;
          },
          [boolean, boolean, boolean, boolean, boolean] & {
            mothership: boolean;
            whale: boolean;
            crescent: boolean;
            gear: boolean;
            titan: boolean;
          },
          BigNumber,
          boolean,
          boolean,
          string[],
          boolean,
          BigNumber,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          boolean
        ] & {
          TARGET_PLANETS: boolean;
          MANUAL_SPAWN: boolean;
          CONFIG_HASH: string;
          MODIFIERS: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCap: BigNumber;
            popGrowth: BigNumber;
            silverCap: BigNumber;
            silverGrowth: BigNumber;
            range: BigNumber;
            speed: BigNumber;
            defense: BigNumber;
            barbarianPercentage: BigNumber;
          };
          SPACESHIPS: [boolean, boolean, boolean, boolean, boolean] & {
            mothership: boolean;
            whale: boolean;
            crescent: boolean;
            gear: boolean;
            titan: boolean;
          };
          CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
          RANDOM_ARTIFACTS: boolean;
          NO_ADMIN: boolean;
          INIT_PLANET_HASHES: string[];
          CONFIRM_START: boolean;
          TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
          BLOCK_MOVES: boolean;
          BLOCK_CAPTURE: boolean;
          START_PAUSED: boolean;
          TEAMS_ENABLED: boolean;
          NUM_TEAMS: BigNumber;
          RANKED: boolean;
        };
        ai: [boolean, string, string[]] & {
          allowListEnabled: boolean;
          artifactBaseURI: string;
          allowedAddresses: string[];
        };
      }
    >;

    getGraphGameConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
        boolean,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        BigNumber
      ] & {
        ADMIN_CAN_ADD_PLANETS: boolean;
        TOKEN_MINT_END_TIMESTAMP: BigNumber;
        WORLD_RADIUS_LOCKED: boolean;
        WORLD_RADIUS_MIN: BigNumber;
        MAX_NATURAL_PLANET_LEVEL: BigNumber;
        TIME_FACTOR_HUNDREDTHS: BigNumber;
        PERLIN_THRESHOLD_1: BigNumber;
        PERLIN_THRESHOLD_2: BigNumber;
        PERLIN_THRESHOLD_3: BigNumber;
        INIT_PERLIN_MIN: BigNumber;
        INIT_PERLIN_MAX: BigNumber;
        SPAWN_RIM_AREA: BigNumber;
        BIOME_THRESHOLD_1: BigNumber;
        BIOME_THRESHOLD_2: BigNumber;
        PLANET_LEVEL_THRESHOLDS: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        PLANET_RARITY: BigNumber;
        PLANET_TRANSFER_ENABLED: boolean;
        PHOTOID_ACTIVATION_DELAY: BigNumber;
        LOCATION_REVEAL_COOLDOWN: BigNumber;
        PLANET_TYPE_WEIGHTS: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        SILVER_SCORE_VALUE: BigNumber;
        ARTIFACT_POINT_VALUES: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        SPACE_JUNK_ENABLED: boolean;
        SPACE_JUNK_LIMIT: BigNumber;
        PLANET_LEVEL_JUNK: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
        ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
        GAME_START_BLOCK: BigNumber;
        CAPTURE_ZONES_ENABLED: boolean;
        CAPTURE_ZONE_COUNT: BigNumber;
        CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
        CAPTURE_ZONE_RADIUS: BigNumber;
        CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
        CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
      }
    >;

    getInitPlanetHashes(overrides?: CallOverrides): Promise<string[]>;

    getInitializers(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          boolean,
          [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ],
          BigNumber,
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
          BigNumber,
          boolean,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          [boolean, boolean, boolean, boolean, boolean],
          boolean,
          boolean,
          ([
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            boolean,
            boolean,
            boolean,
            BigNumber[]
          ] & {
            location: BigNumber;
            x: BigNumber;
            y: BigNumber;
            perlin: BigNumber;
            level: BigNumber;
            planetType: number;
            requireValidLocationId: boolean;
            isTargetPlanet: boolean;
            isSpawnPlanet: boolean;
            blockedPlanetIds: BigNumber[];
          })[],
          boolean,
          BigNumber,
          boolean,
          boolean,
          boolean,
          BigNumber,
          boolean
        ] & {
          START_PAUSED: boolean;
          ADMIN_CAN_ADD_PLANETS: boolean;
          LOCATION_REVEAL_COOLDOWN: BigNumber;
          TOKEN_MINT_END_TIMESTAMP: BigNumber;
          WORLD_RADIUS_LOCKED: boolean;
          WORLD_RADIUS_MIN: BigNumber;
          DISABLE_ZK_CHECKS: boolean;
          PLANETHASH_KEY: BigNumber;
          SPACETYPE_KEY: BigNumber;
          BIOMEBASE_KEY: BigNumber;
          PERLIN_MIRROR_X: boolean;
          PERLIN_MIRROR_Y: boolean;
          PERLIN_LENGTH_SCALE: BigNumber;
          MAX_NATURAL_PLANET_LEVEL: BigNumber;
          TIME_FACTOR_HUNDREDTHS: BigNumber;
          PERLIN_THRESHOLD_1: BigNumber;
          PERLIN_THRESHOLD_2: BigNumber;
          PERLIN_THRESHOLD_3: BigNumber;
          INIT_PERLIN_MIN: BigNumber;
          INIT_PERLIN_MAX: BigNumber;
          SPAWN_RIM_AREA: BigNumber;
          BIOME_THRESHOLD_1: BigNumber;
          BIOME_THRESHOLD_2: BigNumber;
          PLANET_LEVEL_THRESHOLDS: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          PLANET_RARITY: BigNumber;
          PLANET_TRANSFER_ENABLED: boolean;
          PLANET_TYPE_WEIGHTS: [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ];
          SILVER_SCORE_VALUE: BigNumber;
          ARTIFACT_POINT_VALUES: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          PHOTOID_ACTIVATION_DELAY: BigNumber;
          SPACE_JUNK_ENABLED: boolean;
          SPACE_JUNK_LIMIT: BigNumber;
          PLANET_LEVEL_JUNK: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
          ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
          CAPTURE_ZONES_ENABLED: boolean;
          CAPTURE_ZONE_COUNT: BigNumber;
          CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
          CAPTURE_ZONE_RADIUS: BigNumber;
          CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
          CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
          TARGET_PLANETS: boolean;
          CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
          MANUAL_SPAWN: boolean;
          MODIFIERS: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          SPACESHIPS: [boolean, boolean, boolean, boolean, boolean];
          RANDOM_ARTIFACTS: boolean;
          NO_ADMIN: boolean;
          INIT_PLANETS: ([
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            boolean,
            boolean,
            boolean,
            BigNumber[]
          ] & {
            location: BigNumber;
            x: BigNumber;
            y: BigNumber;
            perlin: BigNumber;
            level: BigNumber;
            planetType: number;
            requireValidLocationId: boolean;
            isTargetPlanet: boolean;
            isSpawnPlanet: boolean;
            blockedPlanetIds: BigNumber[];
          })[];
          CONFIRM_START: boolean;
          TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
          BLOCK_MOVES: boolean;
          BLOCK_CAPTURE: boolean;
          TEAMS_ENABLED: boolean;
          NUM_TEAMS: BigNumber;
          RANKED: boolean;
        },
        [boolean, string, string[]] & {
          allowListEnabled: boolean;
          artifactBaseURI: string;
          allowedAddresses: string[];
        }
      ] & {
        initArgs: [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          boolean,
          [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ],
          BigNumber,
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
          BigNumber,
          boolean,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          [boolean, boolean, boolean, boolean, boolean],
          boolean,
          boolean,
          ([
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            boolean,
            boolean,
            boolean,
            BigNumber[]
          ] & {
            location: BigNumber;
            x: BigNumber;
            y: BigNumber;
            perlin: BigNumber;
            level: BigNumber;
            planetType: number;
            requireValidLocationId: boolean;
            isTargetPlanet: boolean;
            isSpawnPlanet: boolean;
            blockedPlanetIds: BigNumber[];
          })[],
          boolean,
          BigNumber,
          boolean,
          boolean,
          boolean,
          BigNumber,
          boolean
        ] & {
          START_PAUSED: boolean;
          ADMIN_CAN_ADD_PLANETS: boolean;
          LOCATION_REVEAL_COOLDOWN: BigNumber;
          TOKEN_MINT_END_TIMESTAMP: BigNumber;
          WORLD_RADIUS_LOCKED: boolean;
          WORLD_RADIUS_MIN: BigNumber;
          DISABLE_ZK_CHECKS: boolean;
          PLANETHASH_KEY: BigNumber;
          SPACETYPE_KEY: BigNumber;
          BIOMEBASE_KEY: BigNumber;
          PERLIN_MIRROR_X: boolean;
          PERLIN_MIRROR_Y: boolean;
          PERLIN_LENGTH_SCALE: BigNumber;
          MAX_NATURAL_PLANET_LEVEL: BigNumber;
          TIME_FACTOR_HUNDREDTHS: BigNumber;
          PERLIN_THRESHOLD_1: BigNumber;
          PERLIN_THRESHOLD_2: BigNumber;
          PERLIN_THRESHOLD_3: BigNumber;
          INIT_PERLIN_MIN: BigNumber;
          INIT_PERLIN_MAX: BigNumber;
          SPAWN_RIM_AREA: BigNumber;
          BIOME_THRESHOLD_1: BigNumber;
          BIOME_THRESHOLD_2: BigNumber;
          PLANET_LEVEL_THRESHOLDS: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          PLANET_RARITY: BigNumber;
          PLANET_TRANSFER_ENABLED: boolean;
          PLANET_TYPE_WEIGHTS: [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ];
          SILVER_SCORE_VALUE: BigNumber;
          ARTIFACT_POINT_VALUES: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          PHOTOID_ACTIVATION_DELAY: BigNumber;
          SPACE_JUNK_ENABLED: boolean;
          SPACE_JUNK_LIMIT: BigNumber;
          PLANET_LEVEL_JUNK: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
          ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
          CAPTURE_ZONES_ENABLED: boolean;
          CAPTURE_ZONE_COUNT: BigNumber;
          CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
          CAPTURE_ZONE_RADIUS: BigNumber;
          CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
          CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
          TARGET_PLANETS: boolean;
          CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;
          MANUAL_SPAWN: boolean;
          MODIFIERS: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          SPACESHIPS: [boolean, boolean, boolean, boolean, boolean];
          RANDOM_ARTIFACTS: boolean;
          NO_ADMIN: boolean;
          INIT_PLANETS: ([
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            boolean,
            boolean,
            boolean,
            BigNumber[]
          ] & {
            location: BigNumber;
            x: BigNumber;
            y: BigNumber;
            perlin: BigNumber;
            level: BigNumber;
            planetType: number;
            requireValidLocationId: boolean;
            isTargetPlanet: boolean;
            isSpawnPlanet: boolean;
            blockedPlanetIds: BigNumber[];
          })[];
          CONFIRM_START: boolean;
          TARGETS_REQUIRED_FOR_VICTORY: BigNumber;
          BLOCK_MOVES: boolean;
          BLOCK_CAPTURE: boolean;
          TEAMS_ENABLED: boolean;
          NUM_TEAMS: BigNumber;
          RANKED: boolean;
        };
        auxArgs: [boolean, string, string[]] & {
          allowListEnabled: boolean;
          artifactBaseURI: string;
          allowedAddresses: string[];
        };
      }
    >;

    getMatch(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getMatches(overrides?: CallOverrides): Promise<string[]>;

    getNSpawnPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getNTargetPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getNumMatches(overrides?: CallOverrides): Promise<BigNumber>;

    getRoundDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    getTeam(team: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

    getWinners(overrides?: CallOverrides): Promise<string[]>;

    isBlocked(
      dest: BigNumberish,
      src: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    planetsArenaInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber[]] & {
        spawnPlanet: boolean;
        targetPlanet: boolean;
        blockedPlanetIds: BigNumber[];
      }
    >;

    spawnPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    targetPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLobby(
      initAddress: string,
      initData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    giveSpaceShips(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminGiveSpaceShip(
      locationId: BigNumberish,
      owner: string,
      artifactType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminInitializePlanet(
      locationId: BigNumberish,
      perlin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetWorldRadius(
      _newRadius: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeLocationRevealCooldown(
      newCooldown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeWorldRadiusMin(
      _newConstant: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createPlanet(
      args: {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    deductScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    safeSetOwner(
      newOwner: string,
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      planetId: BigNumberish,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlanetTransferEnabled(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenMintEndTime(
      newTokenMintEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    activateArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      wormholeTo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminGiveArtifact(
      args: {
        tokenId: BigNumberish;
        discoverer: string;
        planetId: BigNumberish;
        rarity: BigNumberish;
        biome: BigNumberish;
        artifactType: BigNumberish;
        owner: string;
        controller: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    createArtifact(
      args: {
        tokenId: BigNumberish;
        discoverer: string;
        planetId: BigNumberish;
        rarity: BigNumberish;
        biome: BigNumberish;
        artifactType: BigNumberish;
        owner: string;
        controller: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      }
    >;

    deactivateArtifact(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    doesArtifactExist(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    findArtifact(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getArtifact(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      }
    >;

    getArtifactAtIndex(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      }
    >;

    getPlayerArtifactIds(
      playerId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    prospectPlanet(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferArtifact(
      tokenId: BigNumberish,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateArtifact(
      updatedArtifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    capturePlanet(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getIntFromUInt(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invadePlanet(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    planetInCaptureZone(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    buyHat(_location: BigNumberish, overrides?: CallOverrides): Promise<void>;

    checkRevealProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRefreshedPlanet(
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        },
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        },
        [boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ] & {
        eventsToRemove: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        artifactsToAdd: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
      }
    >;

    refreshPlanet(
      location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revealLocation(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferPlanet(
      _location: BigNumberish,
      _player: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradePlanet(
      _location: BigNumberish,
      _branch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    withdrawSilver(
      locationId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminFillPlanet(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    TOKEN_MINT_END_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<string>;

    artifactIdToPlanetId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    artifactIdToVoyageId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetArtifacts(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        string,
        BigNumber,
        BigNumber
      ] & {
        artifact: [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        };
        upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        timeDelayedUpgrade: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        owner: string;
        locationId: BigNumber;
        voyageId: BigNumber;
      })[]
    >;

    bulkGetArtifactsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        string,
        BigNumber,
        BigNumber
      ] & {
        artifact: [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        };
        upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        timeDelayedUpgrade: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        owner: string;
        locationId: BigNumber;
        voyageId: BigNumber;
      })[]
    >;

    bulkGetPlanetArrivals(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        player: string;
        fromPlanet: BigNumber;
        toPlanet: BigNumber;
        popArriving: BigNumber;
        silverMoved: BigNumber;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        arrivalType: number;
        carriedArtifactId: BigNumber;
        distance: BigNumber;
      })[][]
    >;

    bulkGetPlanetArrivalsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        player: string;
        fromPlanet: BigNumber;
        toPlanet: BigNumber;
        popArriving: BigNumber;
        silverMoved: BigNumber;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        arrivalType: number;
        carriedArtifactId: BigNumber;
        distance: BigNumber;
      })[][]
    >;

    bulkGetPlanetArtifacts(
      planetIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        string,
        BigNumber,
        BigNumber
      ] & {
        artifact: [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        };
        upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        timeDelayedUpgrade: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        owner: string;
        locationId: BigNumber;
        voyageId: BigNumber;
      })[][]
    >;

    bulkGetPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    bulkGetPlanets(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      })[]
    >;

    bulkGetPlanetsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      })[]
    >;

    bulkGetPlanetsDataByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        },
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        },
        [boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        },
        [BigNumber, BigNumber, BigNumber, string] & {
          locationId: BigNumber;
          x: BigNumber;
          y: BigNumber;
          revealer: string;
        }
      ] & {
        planet: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        };
        info: [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        };
        info2: [boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        };
        revealedCoords: [BigNumber, BigNumber, BigNumber, string] & {
          locationId: BigNumber;
          x: BigNumber;
          y: BigNumber;
          revealer: string;
        };
      })[]
    >;

    bulkGetPlanetsExtendedInfo(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
        spaceJunk: BigNumber;
      })[]
    >;

    bulkGetPlanetsExtendedInfo2ByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([boolean, BigNumber, string, BigNumber, string] & {
        isInitialized: boolean;
        pausers: BigNumber;
        invader: string;
        invadeStartBlock: BigNumber;
        capturer: string;
      })[]
    >;

    bulkGetPlanetsExtendedInfoByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
        spaceJunk: BigNumber;
      })[]
    >;

    bulkGetPlayerIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    bulkGetPlayers(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        isInitialized: boolean;
        player: string;
        initTimestamp: BigNumber;
        homePlanetId: BigNumber;
        lastRevealTimestamp: BigNumber;
        score: BigNumber;
        spaceJunk: BigNumber;
        spaceJunkLimit: BigNumber;
        claimedShips: boolean;
      })[]
    >;

    bulkGetRevealedCoordsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, string] & {
        locationId: BigNumber;
        x: BigNumber;
        y: BigNumber;
        revealer: string;
      })[]
    >;

    bulkGetRevealedPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    bulkGetVoyagesByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        player: string;
        fromPlanet: BigNumber;
        toPlanet: BigNumber;
        popArriving: BigNumber;
        silverMoved: BigNumber;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        arrivalType: number;
        carriedArtifactId: BigNumber;
        distance: BigNumber;
      })[]
    >;

    getArtifactById(
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        string,
        BigNumber,
        BigNumber
      ] & {
        artifact: [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        };
        upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        timeDelayedUpgrade: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        owner: string;
        locationId: BigNumber;
        voyageId: BigNumber;
      }
    >;

    getArtifactPointValues(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    getArtifactsOnPlanet(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        string,
        BigNumber,
        BigNumber
      ] & {
        artifact: [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        };
        upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        timeDelayedUpgrade: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        owner: string;
        locationId: BigNumber;
        voyageId: BigNumber;
      })[]
    >;

    getCumulativeRarities(overrides?: CallOverrides): Promise<BigNumber[]>;

    getDefaultStats(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        label: string;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        silverGrowth: BigNumber;
        silverCap: BigNumber;
        barbarianPercentage: BigNumber;
      })[]
    >;

    getGameConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ],
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
        boolean,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        BigNumber
      ] & {
        ADMIN_CAN_ADD_PLANETS: boolean;
        WORLD_RADIUS_LOCKED: boolean;
        WORLD_RADIUS_MIN: BigNumber;
        MAX_NATURAL_PLANET_LEVEL: BigNumber;
        TIME_FACTOR_HUNDREDTHS: BigNumber;
        PERLIN_THRESHOLD_1: BigNumber;
        PERLIN_THRESHOLD_2: BigNumber;
        PERLIN_THRESHOLD_3: BigNumber;
        INIT_PERLIN_MIN: BigNumber;
        INIT_PERLIN_MAX: BigNumber;
        SPAWN_RIM_AREA: BigNumber;
        BIOME_THRESHOLD_1: BigNumber;
        BIOME_THRESHOLD_2: BigNumber;
        PLANET_LEVEL_THRESHOLDS: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        PLANET_RARITY: BigNumber;
        PLANET_TRANSFER_ENABLED: boolean;
        PHOTOID_ACTIVATION_DELAY: BigNumber;
        LOCATION_REVEAL_COOLDOWN: BigNumber;
        PLANET_TYPE_WEIGHTS: [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ];
        SILVER_SCORE_VALUE: BigNumber;
        ARTIFACT_POINT_VALUES: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        SPACE_JUNK_ENABLED: boolean;
        SPACE_JUNK_LIMIT: BigNumber;
        PLANET_LEVEL_JUNK: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
        ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
        GAME_START_BLOCK: BigNumber;
        CAPTURE_ZONES_ENABLED: boolean;
        CAPTURE_ZONE_COUNT: BigNumber;
        CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
        CAPTURE_ZONE_RADIUS: BigNumber;
        CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
        CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
      }
    >;

    getNPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getNPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    getNRevealedPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getPlanetArrival(
      arrivalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        player: string;
        fromPlanet: BigNumber;
        toPlanet: BigNumber;
        popArriving: BigNumber;
        silverMoved: BigNumber;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        arrivalType: number;
        carriedArtifactId: BigNumber;
        distance: BigNumber;
      }
    >;

    getPlanetArrivals(
      _location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        player: string;
        fromPlanet: BigNumber;
        toPlanet: BigNumber;
        popArriving: BigNumber;
        silverMoved: BigNumber;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        arrivalType: number;
        carriedArtifactId: BigNumber;
        distance: BigNumber;
      })[]
    >;

    getPlanetEvent(
      locationId: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber] & {
        id: BigNumber;
        eventType: number;
        timeTrigger: BigNumber;
        timeAdded: BigNumber;
      }
    >;

    getPlanetEventsCount(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetLevelThresholds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getPlayerSpaceJunkLimit(
      playerId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevealCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    getRevealedCoords(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        locationId: BigNumber;
        x: BigNumber;
        y: BigNumber;
        revealer: string;
      }
    >;

    getSnarkConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        DISABLE_ZK_CHECKS: boolean;
        PLANETHASH_KEY: BigNumber;
        SPACETYPE_KEY: BigNumber;
        BIOMEBASE_KEY: BigNumber;
        PERLIN_MIRROR_X: boolean;
        PERLIN_MIRROR_Y: boolean;
        PERLIN_LENGTH_SCALE: BigNumber;
      }
    >;

    getTypeWeights(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ]
      ]
    >;

    getUpgrades(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          }
        ],
        [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          }
        ],
        [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          }
        ]
      ]
    >;

    paused(overrides?: CallOverrides): Promise<boolean>;

    planetArrivals(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        player: string;
        fromPlanet: BigNumber;
        toPlanet: BigNumber;
        popArriving: BigNumber;
        silverMoved: BigNumber;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        arrivalType: number;
        carriedArtifactId: BigNumber;
        distance: BigNumber;
      }
    >;

    planetArtifacts(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    planetDefaultStats(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        label: string;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        silverGrowth: BigNumber;
        silverCap: BigNumber;
        barbarianPercentage: BigNumber;
      }
    >;

    planetEvents(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, number, BigNumber, BigNumber] & {
        id: BigNumber;
        eventType: number;
        timeTrigger: BigNumber;
        timeAdded: BigNumber;
      })[]
    >;

    planetEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

    planetIds(idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    planetLevelsCount(overrides?: CallOverrides): Promise<BigNumber>;

    planets(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      }
    >;

    planetsExtendedInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
        spaceJunk: BigNumber;
      }
    >;

    planetsExtendedInfo2(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber, string] & {
        isInitialized: boolean;
        pausers: BigNumber;
        invader: string;
        invadeStartBlock: BigNumber;
        capturer: string;
      }
    >;

    playerIds(idx: BigNumberish, overrides?: CallOverrides): Promise<string>;

    players(
      key: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        isInitialized: boolean;
        player: string;
        initTimestamp: BigNumber;
        homePlanetId: BigNumber;
        lastRevealTimestamp: BigNumber;
        score: BigNumber;
        spaceJunk: BigNumber;
        spaceJunkLimit: BigNumber;
        claimedShips: boolean;
      }
    >;

    revealedCoords(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        locationId: BigNumber;
        x: BigNumber;
        y: BigNumber;
        revealer: string;
      }
    >;

    revealedPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worldRadius(overrides?: CallOverrides): Promise<BigNumber>;

    applySpaceshipDepart(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      },
      planet: {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      },
      planetExtendedInfo: {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      planetExtendedInfo2: {
        isInitialized: boolean;
        pausers: BigNumberish;
        invader: string;
        invadeStartBlock: BigNumberish;
        capturer: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        },
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        },
        [boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        }
      ]
    >;

    move(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeDefaults(overrides?: CallOverrides): Promise<void>;

    initializeUpgrades(overrides?: CallOverrides): Promise<void>;

    start(overrides?: CallOverrides): Promise<void>;

    addKeys(hashes: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    addToWhitelist(toAdd: string, overrides?: CallOverrides): Promise<void>;

    adminUseKey(
      keyHash: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowListEnabled(overrides?: CallOverrides): Promise<boolean>;

    bulkAddToWhitelist(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeDrip(newDrip: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeRelayerReward(
      newReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disableKeys(keys: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    drip(overrides?: CallOverrides): Promise<BigNumber>;

    getNAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    isKeyHashValid(
      hashed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelisted(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    relayerReward(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(
      toRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayerRewardsEnabled(
      newRewardsEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    useKey(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    diamondCut(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      ([string, string[]] & {
        facetAddress: string;
        functionSelectors: string[];
      })[]
    >;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminPlanetCreated(uint256)"(
      loc?: null
    ): TypedEventFilter<[BigNumber], { loc: BigNumber }>;

    AdminPlanetCreated(
      loc?: null
    ): TypedEventFilter<[BigNumber], { loc: BigNumber }>;

    "GameStarted(address,uint256)"(
      startPlayer?: null,
      startTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { startPlayer: string; startTime: BigNumber }
    >;

    GameStarted(
      startPlayer?: null,
      startTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { startPlayer: string; startTime: BigNumber }
    >;

    "Gameover(address)"(
      winner?: null
    ): TypedEventFilter<[string], { winner: string }>;

    Gameover(winner?: null): TypedEventFilter<[string], { winner: string }>;

    "LocationRevealed(address,uint256,uint256,uint256)"(
      revealer?: null,
      loc?: null,
      x?: null,
      y?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { revealer: string; loc: BigNumber; x: BigNumber; y: BigNumber }
    >;

    LocationRevealed(
      revealer?: null,
      loc?: null,
      x?: null,
      y?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { revealer: string; loc: BigNumber; x: BigNumber; y: BigNumber }
    >;

    "PauseStateChanged(bool)"(
      paused?: null
    ): TypedEventFilter<[boolean], { paused: boolean }>;

    PauseStateChanged(
      paused?: null
    ): TypedEventFilter<[boolean], { paused: boolean }>;

    "PlayerInitialized(address,uint256)"(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;

    PlayerInitialized(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;

    "PlayerNotReady(address,uint256)"(
      player?: null,
      time?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; time: BigNumber }
    >;

    PlayerNotReady(
      player?: null,
      time?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; time: BigNumber }
    >;

    "PlayerReady(address,uint256)"(
      player?: null,
      time?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; time: BigNumber }
    >;

    PlayerReady(
      player?: null,
      time?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; time: BigNumber }
    >;

    "TargetCaptured(uint256,address)"(
      loc?: null,
      player?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { loc: BigNumber; player: string }
    >;

    TargetCaptured(
      loc?: null,
      player?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { loc: BigNumber; player: string }
    >;

    "LobbyCreated(address,address)"(
      creatorAddress?: null,
      lobbyAddress?: null
    ): TypedEventFilter<
      [string, string],
      { creatorAddress: string; lobbyAddress: string }
    >;

    LobbyCreated(
      creatorAddress?: null,
      lobbyAddress?: null
    ): TypedEventFilter<
      [string, string],
      { creatorAddress: string; lobbyAddress: string }
    >;

    "ArtifactFound(address,uint256,uint256)"(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    ArtifactFound(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    "AdminGiveSpaceship(uint256,address,uint8)"(
      loc?: null,
      owner?: null,
      artifactType?: null
    ): TypedEventFilter<
      [BigNumber, string, number],
      { loc: BigNumber; owner: string; artifactType: number }
    >;

    AdminGiveSpaceship(
      loc?: null,
      owner?: null,
      artifactType?: null
    ): TypedEventFilter<
      [BigNumber, string, number],
      { loc: BigNumber; owner: string; artifactType: number }
    >;

    "AdminOwnershipChanged(uint256,address)"(
      loc?: null,
      newOwner?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { loc: BigNumber; newOwner: string }
    >;

    AdminOwnershipChanged(
      loc?: null,
      newOwner?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { loc: BigNumber; newOwner: string }
    >;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      operator?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; operator: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      operator?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; operator: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "ArtifactActivated(address,uint256,uint256)"(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    ArtifactActivated(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    "ArtifactDeactivated(address,uint256,uint256)"(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    ArtifactDeactivated(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    "ArtifactDeposited(address,uint256,uint256)"(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    ArtifactDeposited(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    "ArtifactWithdrawn(address,uint256,uint256)"(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    ArtifactWithdrawn(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    "PlanetProspected(address,uint256)"(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;

    PlanetProspected(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    "PlanetCaptured(address,uint256)"(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;

    PlanetCaptured(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;

    "PlanetInvaded(address,uint256)"(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;

    PlanetInvaded(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;

    "PlanetHatBought(address,uint256,uint256)"(
      player?: null,
      loc?: null,
      tohatLevel?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; loc: BigNumber; tohatLevel: BigNumber }
    >;

    PlanetHatBought(
      player?: null,
      loc?: null,
      tohatLevel?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; loc: BigNumber; tohatLevel: BigNumber }
    >;

    "PlanetSilverWithdrawn(address,uint256,uint256)"(
      player?: null,
      loc?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; loc: BigNumber; amount: BigNumber }
    >;

    PlanetSilverWithdrawn(
      player?: null,
      loc?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; loc: BigNumber; amount: BigNumber }
    >;

    "PlanetTransferred(address,uint256,address)"(
      sender?: null,
      loc?: null,
      receiver?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { sender: string; loc: BigNumber; receiver: string }
    >;

    PlanetTransferred(
      sender?: null,
      loc?: null,
      receiver?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { sender: string; loc: BigNumber; receiver: string }
    >;

    "PlanetUpgraded(address,uint256,uint256,uint256)"(
      player?: null,
      loc?: null,
      branch?: null,
      toBranchLevel?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        player: string;
        loc: BigNumber;
        branch: BigNumber;
        toBranchLevel: BigNumber;
      }
    >;

    PlanetUpgraded(
      player?: null,
      loc?: null,
      branch?: null,
      toBranchLevel?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        player: string;
        loc: BigNumber;
        branch: BigNumber;
        toBranchLevel: BigNumber;
      }
    >;

    "ArrivalQueued(address,uint256,uint256,uint256,uint256,uint256)"(
      player?: null,
      arrivalId?: null,
      from?: null,
      to?: null,
      artifactId?: null,
      abandoning?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        player: string;
        arrivalId: BigNumber;
        from: BigNumber;
        to: BigNumber;
        artifactId: BigNumber;
        abandoning: BigNumber;
      }
    >;

    ArrivalQueued(
      player?: null,
      arrivalId?: null,
      from?: null,
      to?: null,
      artifactId?: null,
      abandoning?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        player: string;
        arrivalId: BigNumber;
        from: BigNumber;
        to: BigNumber;
        artifactId: BigNumber;
        abandoning: BigNumber;
      }
    >;

    "ArenaInitialized(address,address)"(
      ownerAddress?: null,
      lobbyAddress?: null
    ): TypedEventFilter<
      [string, string],
      { ownerAddress: string; lobbyAddress: string }
    >;

    ArenaInitialized(
      ownerAddress?: null,
      lobbyAddress?: null
    ): TypedEventFilter<
      [string, string],
      { ownerAddress: string; lobbyAddress: string }
    >;

    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): TypedEventFilter<
      [
        ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[],
        string,
        string
      ],
      {
        _diamondCut: ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[];
        _init: string;
        _calldata: string;
      }
    >;

    DiamondCut(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): TypedEventFilter<
      [
        ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[],
        string,
        string
      ],
      {
        _diamondCut: ([string, number, string[]] & {
          facetAddress: string;
          action: number;
          functionSelectors: string[];
        })[];
        _init: string;
        _calldata: string;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    _checkGameOver(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arenaRevealLocation(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkCreateAndReveal(
      createArgsList: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkCreatePlanet(
      planets: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimVictory(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAndReveal(
      createPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createArenaPlanet(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializePlayer(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      team: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitPlanet(
      _initPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    notReady(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ready(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arenaPlayers(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    bulkGetArenaPlayers(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetsArenaInfoByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetSpawnPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetTargetPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArenaConstants(overrides?: CallOverrides): Promise<BigNumber>;

    getEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    getGameover(overrides?: CallOverrides): Promise<BigNumber>;

    getGraphConstants(overrides?: CallOverrides): Promise<BigNumber>;

    getGraphGameConstants(overrides?: CallOverrides): Promise<BigNumber>;

    getInitPlanetHashes(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializers(overrides?: CallOverrides): Promise<BigNumber>;

    getMatch(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getMatches(overrides?: CallOverrides): Promise<BigNumber>;

    getNSpawnPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getNTargetPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getNumMatches(overrides?: CallOverrides): Promise<BigNumber>;

    getRoundDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    getTeam(team: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getWinners(overrides?: CallOverrides): Promise<BigNumber>;

    isBlocked(
      dest: BigNumberish,
      src: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetsArenaInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spawnPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    targetPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLobby(
      initAddress: string,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    giveSpaceShips(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminGiveSpaceShip(
      locationId: BigNumberish,
      owner: string,
      artifactType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminInitializePlanet(
      locationId: BigNumberish,
      perlin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminSetWorldRadius(
      _newRadius: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeLocationRevealCooldown(
      newCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeWorldRadiusMin(
      _newConstant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPlanet(
      args: {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deductScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeSetOwner(
      newOwner: string,
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      planetId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlanetTransferEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenMintEndTime(
      newTokenMintEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activateArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      wormholeTo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminGiveArtifact(
      args: {
        tokenId: BigNumberish;
        discoverer: string;
        planetId: BigNumberish;
        rarity: BigNumberish;
        biome: BigNumberish;
        artifactType: BigNumberish;
        owner: string;
        controller: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    createArtifact(
      args: {
        tokenId: BigNumberish;
        discoverer: string;
        planetId: BigNumberish;
        rarity: BigNumberish;
        biome: BigNumberish;
        artifactType: BigNumberish;
        owner: string;
        controller: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deactivateArtifact(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    doesArtifactExist(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findArtifact(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArtifact(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArtifactAtIndex(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerArtifactIds(
      playerId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prospectPlanet(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferArtifact(
      tokenId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateArtifact(
      updatedArtifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    capturePlanet(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getIntFromUInt(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invadePlanet(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    planetInCaptureZone(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyHat(
      _location: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkRevealProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRefreshedPlanet(
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refreshPlanet(
      location: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealLocation(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferPlanet(
      _location: BigNumberish,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradePlanet(
      _location: BigNumberish,
      _branch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSilver(
      locationId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminFillPlanet(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    TOKEN_MINT_END_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    artifactIdToPlanetId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    artifactIdToVoyageId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetArtifacts(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetArtifactsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetArrivals(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetArrivalsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetArtifacts(
      planetIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanets(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetsDataByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetsExtendedInfo(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetsExtendedInfo2ByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetsExtendedInfoByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlayerIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlayers(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetRevealedCoordsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetRevealedPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetVoyagesByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArtifactById(
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArtifactPointValues(overrides?: CallOverrides): Promise<BigNumber>;

    getArtifactsOnPlanet(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCumulativeRarities(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultStats(overrides?: CallOverrides): Promise<BigNumber>;

    getGameConstants(overrides?: CallOverrides): Promise<BigNumber>;

    getNPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getNPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    getNRevealedPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getPlanetArrival(
      arrivalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetArrivals(
      _location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetEvent(
      locationId: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetEventsCount(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetLevelThresholds(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayerSpaceJunkLimit(
      playerId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevealCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    getRevealedCoords(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSnarkConstants(overrides?: CallOverrides): Promise<BigNumber>;

    getTypeWeights(overrides?: CallOverrides): Promise<BigNumber>;

    getUpgrades(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    planetArrivals(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetArtifacts(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetDefaultStats(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetEvents(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

    planetIds(idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    planetLevelsCount(overrides?: CallOverrides): Promise<BigNumber>;

    planets(key: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    planetsExtendedInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetsExtendedInfo2(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerIds(idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    players(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    revealedCoords(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revealedPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worldRadius(overrides?: CallOverrides): Promise<BigNumber>;

    applySpaceshipDepart(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      },
      planet: {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      },
      planetExtendedInfo: {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      planetExtendedInfo2: {
        isInitialized: boolean;
        pausers: BigNumberish;
        invader: string;
        invadeStartBlock: BigNumberish;
        capturer: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    move(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeDefaults(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeUpgrades(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addKeys(
      hashes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToWhitelist(
      toAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminUseKey(
      keyHash: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowListEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    bulkAddToWhitelist(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeDrip(
      newDrip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRelayerReward(
      newReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableKeys(
      keys: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    drip(overrides?: CallOverrides): Promise<BigNumber>;

    getNAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    isKeyHashValid(
      hashed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelisted(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    relayerReward(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(
      toRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRelayerRewardsEnabled(
      newRewardsEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    useKey(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    diamondCut(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _checkGameOver(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arenaRevealLocation(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkCreateAndReveal(
      createArgsList: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkCreatePlanet(
      planets: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimVictory(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAndReveal(
      createPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createArenaPlanet(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializePlayer(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      team: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitPlanet(
      _initPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    notReady(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ready(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arenaPlayers(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetArenaPlayers(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetsArenaInfoByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetSpawnPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetTargetPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArenaConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGameover(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGraphConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGraphGameConstants(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitPlanetHashes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitializers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMatch(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMatches(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNSpawnPlanets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNTargetPlanets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumMatches(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoundDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTeam(
      team: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBlocked(
      dest: BigNumberish,
      src: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetsArenaInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spawnPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createLobby(
      initAddress: string,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    giveSpaceShips(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminGiveSpaceShip(
      locationId: BigNumberish,
      owner: string,
      artifactType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminInitializePlanet(
      locationId: BigNumberish,
      perlin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminSetWorldRadius(
      _newRadius: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeLocationRevealCooldown(
      newCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeWorldRadiusMin(
      _newConstant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPlanet(
      args: {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deductScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeSetOwner(
      newOwner: string,
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      planetId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlanetTransferEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenMintEndTime(
      newTokenMintEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activateArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      wormholeTo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminGiveArtifact(
      args: {
        tokenId: BigNumberish;
        discoverer: string;
        planetId: BigNumberish;
        rarity: BigNumberish;
        biome: BigNumberish;
        artifactType: BigNumberish;
        owner: string;
        controller: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createArtifact(
      args: {
        tokenId: BigNumberish;
        discoverer: string;
        planetId: BigNumberish;
        rarity: BigNumberish;
        biome: BigNumberish;
        artifactType: BigNumberish;
        owner: string;
        controller: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deactivateArtifact(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    doesArtifactExist(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findArtifact(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArtifact(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArtifactAtIndex(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerArtifactIds(
      playerId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prospectPlanet(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferArtifact(
      tokenId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateArtifact(
      updatedArtifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawArtifact(
      locationId: BigNumberish,
      artifactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    capturePlanet(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getIntFromUInt(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invadePlanet(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    planetInCaptureZone(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyHat(
      _location: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkRevealProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRefreshedPlanet(
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refreshPlanet(
      location: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealLocation(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferPlanet(
      _location: BigNumberish,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradePlanet(
      _location: BigNumberish,
      _branch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSilver(
      locationId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminFillPlanet(
      locationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    TOKEN_MINT_END_TIMESTAMP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    artifactIdToPlanetId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    artifactIdToVoyageId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetArtifacts(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetArtifactsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetArrivals(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetArrivalsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetArtifacts(
      planetIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanets(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetsDataByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetsExtendedInfo(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetsExtendedInfo2ByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetsExtendedInfoByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlayerIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlayers(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetRevealedCoordsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetRevealedPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetVoyagesByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArtifactById(
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArtifactPointValues(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArtifactsOnPlanet(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCumulativeRarities(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGameConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNPlanets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNPlayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNRevealedPlanets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetArrival(
      arrivalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetArrivals(
      _location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetEvent(
      locationId: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetEventsCount(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetLevelThresholds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerSpaceJunkLimit(
      playerId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevealCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRevealedCoords(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSnarkConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTypeWeights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUpgrades(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    planetArrivals(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetArtifacts(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetDefaultStats(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetEvents(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetEventsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    planetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetLevelsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    planets(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetsExtendedInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetsExtendedInfo2(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    players(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revealedCoords(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revealedPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    worldRadius(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applySpaceshipDepart(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      },
      planet: {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      },
      planetExtendedInfo: {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      planetExtendedInfo2: {
        isInitialized: boolean;
        pausers: BigNumberish;
        invader: string;
        invadeStartBlock: BigNumberish;
        capturer: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    move(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeDefaults(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeUpgrades(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addKeys(
      hashes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToWhitelist(
      toAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminUseKey(
      keyHash: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowListEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bulkAddToWhitelist(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeDrip(
      newDrip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRelayerReward(
      newReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableKeys(
      keys: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    drip(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isKeyHashValid(
      hashed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayerReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      toRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRelayerRewardsEnabled(
      newRewardsEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    useKey(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      _diamondCut: {
        facetAddress: string;
        action: BigNumberish;
        functionSelectors: BytesLike[];
      }[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
