/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LibArtifactUtilsInterface extends ethers.utils.Interface {
  functions: {
    "checkFindArtifact(uint256,tuple,tuple)": FunctionFragment;
    "containsGear(uint256)": FunctionFragment;
    "isSpaceship(uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkFindArtifact",
    values: [
      BigNumberish,
      {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "containsGear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSpaceship",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkFindArtifact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "containsGear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSpaceship",
    data: BytesLike
  ): Result;

  events: {
    "ArtifactActivated(address,uint256,uint256)": EventFragment;
    "ArtifactDeactivated(address,uint256,uint256)": EventFragment;
    "PlanetUpgraded(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArtifactActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArtifactDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetUpgraded"): EventFragment;
}

export type ArtifactActivatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    artifactId: BigNumber;
    loc: BigNumber;
  }
>;

export type ArtifactDeactivatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    artifactId: BigNumber;
    loc: BigNumber;
  }
>;

export type PlanetUpgradedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    player: string;
    loc: BigNumber;
    branch: BigNumber;
    toBranchLevel: BigNumber;
  }
>;

export class LibArtifactUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LibArtifactUtilsInterface;

  functions: {
    checkFindArtifact(
      locationId: BigNumberish,
      info: {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      planet: {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    containsGear(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSpaceship(
      artifactType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  checkFindArtifact(
    locationId: BigNumberish,
    info: {
      isInitialized: boolean;
      createdAt: BigNumberish;
      lastUpdated: BigNumberish;
      perlin: BigNumberish;
      spaceType: BigNumberish;
      upgradeState0: BigNumberish;
      upgradeState1: BigNumberish;
      upgradeState2: BigNumberish;
      hatLevel: BigNumberish;
      hasTriedFindingArtifact: boolean;
      prospectedBlockNumber: BigNumberish;
      destroyed: boolean;
      spaceJunk: BigNumberish;
    },
    planet: {
      owner: string;
      range: BigNumberish;
      speed: BigNumberish;
      defense: BigNumberish;
      population: BigNumberish;
      populationCap: BigNumberish;
      populationGrowth: BigNumberish;
      silverCap: BigNumberish;
      silverGrowth: BigNumberish;
      silver: BigNumberish;
      planetLevel: BigNumberish;
      planetType: BigNumberish;
      isHomePlanet: boolean;
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  containsGear(
    locationId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSpaceship(
    artifactType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    checkFindArtifact(
      locationId: BigNumberish,
      info: {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      planet: {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    containsGear(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSpaceship(
      artifactType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ArtifactActivated(address,uint256,uint256)"(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    ArtifactActivated(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    "ArtifactDeactivated(address,uint256,uint256)"(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    ArtifactDeactivated(
      player?: null,
      artifactId?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; artifactId: BigNumber; loc: BigNumber }
    >;

    "PlanetUpgraded(address,uint256,uint256,uint256)"(
      player?: null,
      loc?: null,
      branch?: null,
      toBranchLevel?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        player: string;
        loc: BigNumber;
        branch: BigNumber;
        toBranchLevel: BigNumber;
      }
    >;

    PlanetUpgraded(
      player?: null,
      loc?: null,
      branch?: null,
      toBranchLevel?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        player: string;
        loc: BigNumber;
        branch: BigNumber;
        toBranchLevel: BigNumber;
      }
    >;
  };

  estimateGas: {
    checkFindArtifact(
      locationId: BigNumberish,
      info: {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      planet: {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    containsGear(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSpaceship(
      artifactType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkFindArtifact(
      locationId: BigNumberish,
      info: {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      planet: {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    containsGear(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSpaceship(
      artifactType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
