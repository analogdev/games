/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DFArenaCoreFacetInterface extends ethers.utils.Interface {
  functions: {
    "_checkGameOver()": FunctionFragment;
    "arenaRevealLocation(tuple)": FunctionFragment;
    "bulkCreateAndReveal(tuple[])": FunctionFragment;
    "bulkCreatePlanet(tuple[])": FunctionFragment;
    "claimVictory()": FunctionFragment;
    "createAndReveal(tuple)": FunctionFragment;
    "createArenaPlanet(tuple)": FunctionFragment;
    "initializePlayer(uint256[2],uint256[2][2],uint256[2],uint256[8],uint256)": FunctionFragment;
    "isInitPlanet(tuple)": FunctionFragment;
    "notReady()": FunctionFragment;
    "ready()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_checkGameOver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arenaRevealLocation",
    values: [
      {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkCreateAndReveal",
    values: [
      {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkCreatePlanet",
    values: [
      {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimVictory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAndReveal",
    values: [
      {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createArenaPlanet",
    values: [
      {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePlayer",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitPlanet",
    values: [
      {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "notReady", values?: undefined): string;
  encodeFunctionData(functionFragment: "ready", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "_checkGameOver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arenaRevealLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkCreateAndReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkCreatePlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimVictory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAndReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createArenaPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "notReady", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ready", data: BytesLike): Result;

  events: {
    "AdminPlanetCreated(uint256)": EventFragment;
    "GameStarted(address,uint256)": EventFragment;
    "Gameover(address)": EventFragment;
    "LocationRevealed(address,uint256,uint256,uint256)": EventFragment;
    "PauseStateChanged(bool)": EventFragment;
    "PlayerInitialized(address,uint256)": EventFragment;
    "PlayerNotReady(address,uint256)": EventFragment;
    "PlayerReady(address,uint256)": EventFragment;
    "TargetCaptured(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminPlanetCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Gameover"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocationRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerNotReady"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerReady"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetCaptured"): EventFragment;
}

export type AdminPlanetCreatedEvent = TypedEvent<
  [BigNumber] & { loc: BigNumber }
>;

export type GameStartedEvent = TypedEvent<
  [string, BigNumber] & { startPlayer: string; startTime: BigNumber }
>;

export type GameoverEvent = TypedEvent<[string] & { winner: string }>;

export type LocationRevealedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    revealer: string;
    loc: BigNumber;
    x: BigNumber;
    y: BigNumber;
  }
>;

export type PauseStateChangedEvent = TypedEvent<
  [boolean] & { paused: boolean }
>;

export type PlayerInitializedEvent = TypedEvent<
  [string, BigNumber] & { player: string; loc: BigNumber }
>;

export type PlayerNotReadyEvent = TypedEvent<
  [string, BigNumber] & { player: string; time: BigNumber }
>;

export type PlayerReadyEvent = TypedEvent<
  [string, BigNumber] & { player: string; time: BigNumber }
>;

export type TargetCapturedEvent = TypedEvent<
  [BigNumber, string] & { loc: BigNumber; player: string }
>;

export class DFArenaCoreFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DFArenaCoreFacetInterface;

  functions: {
    _checkGameOver(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arenaRevealLocation(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkCreateAndReveal(
      createArgsList: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkCreatePlanet(
      planets: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimVictory(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAndReveal(
      createPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createArenaPlanet(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializePlayer(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      team: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitPlanet(
      _initPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    notReady(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ready(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _checkGameOver(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arenaRevealLocation(
    args: {
      location: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
      isTargetPlanet: boolean;
      isSpawnPlanet: boolean;
      blockedPlanetIds: BigNumberish[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkCreateAndReveal(
    createArgsList: {
      location: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
      isTargetPlanet: boolean;
      isSpawnPlanet: boolean;
      blockedPlanetIds: BigNumberish[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkCreatePlanet(
    planets: {
      location: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
      isTargetPlanet: boolean;
      isSpawnPlanet: boolean;
      blockedPlanetIds: BigNumberish[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimVictory(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAndReveal(
    createPlanetArgs: {
      location: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
      isTargetPlanet: boolean;
      isSpawnPlanet: boolean;
      blockedPlanetIds: BigNumberish[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createArenaPlanet(
    args: {
      location: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
      isTargetPlanet: boolean;
      isSpawnPlanet: boolean;
      blockedPlanetIds: BigNumberish[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializePlayer(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    team: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitPlanet(
    _initPlanetArgs: {
      location: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
      isTargetPlanet: boolean;
      isSpawnPlanet: boolean;
      blockedPlanetIds: BigNumberish[];
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  notReady(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ready(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _checkGameOver(overrides?: CallOverrides): Promise<boolean>;

    arenaRevealLocation(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkCreateAndReveal(
      createArgsList: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    bulkCreatePlanet(
      planets: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimVictory(overrides?: CallOverrides): Promise<void>;

    createAndReveal(
      createPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    createArenaPlanet(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    initializePlayer(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      team: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitPlanet(
      _initPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    notReady(overrides?: CallOverrides): Promise<void>;

    ready(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminPlanetCreated(uint256)"(
      loc?: null
    ): TypedEventFilter<[BigNumber], { loc: BigNumber }>;

    AdminPlanetCreated(
      loc?: null
    ): TypedEventFilter<[BigNumber], { loc: BigNumber }>;

    "GameStarted(address,uint256)"(
      startPlayer?: null,
      startTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { startPlayer: string; startTime: BigNumber }
    >;

    GameStarted(
      startPlayer?: null,
      startTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { startPlayer: string; startTime: BigNumber }
    >;

    "Gameover(address)"(
      winner?: null
    ): TypedEventFilter<[string], { winner: string }>;

    Gameover(winner?: null): TypedEventFilter<[string], { winner: string }>;

    "LocationRevealed(address,uint256,uint256,uint256)"(
      revealer?: null,
      loc?: null,
      x?: null,
      y?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { revealer: string; loc: BigNumber; x: BigNumber; y: BigNumber }
    >;

    LocationRevealed(
      revealer?: null,
      loc?: null,
      x?: null,
      y?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { revealer: string; loc: BigNumber; x: BigNumber; y: BigNumber }
    >;

    "PauseStateChanged(bool)"(
      paused?: null
    ): TypedEventFilter<[boolean], { paused: boolean }>;

    PauseStateChanged(
      paused?: null
    ): TypedEventFilter<[boolean], { paused: boolean }>;

    "PlayerInitialized(address,uint256)"(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;

    PlayerInitialized(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;

    "PlayerNotReady(address,uint256)"(
      player?: null,
      time?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; time: BigNumber }
    >;

    PlayerNotReady(
      player?: null,
      time?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; time: BigNumber }
    >;

    "PlayerReady(address,uint256)"(
      player?: null,
      time?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; time: BigNumber }
    >;

    PlayerReady(
      player?: null,
      time?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; time: BigNumber }
    >;

    "TargetCaptured(uint256,address)"(
      loc?: null,
      player?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { loc: BigNumber; player: string }
    >;

    TargetCaptured(
      loc?: null,
      player?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { loc: BigNumber; player: string }
    >;
  };

  estimateGas: {
    _checkGameOver(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arenaRevealLocation(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkCreateAndReveal(
      createArgsList: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkCreatePlanet(
      planets: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimVictory(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAndReveal(
      createPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createArenaPlanet(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializePlayer(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      team: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitPlanet(
      _initPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    notReady(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ready(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _checkGameOver(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arenaRevealLocation(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkCreateAndReveal(
      createArgsList: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkCreatePlanet(
      planets: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimVictory(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAndReveal(
      createPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createArenaPlanet(
      args: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializePlayer(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      team: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitPlanet(
      _initPlanetArgs: {
        location: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
        isTargetPlanet: boolean;
        isSpawnPlanet: boolean;
        blockedPlanetIds: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    notReady(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ready(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
