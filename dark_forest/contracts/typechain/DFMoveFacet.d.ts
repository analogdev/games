/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DFMoveFacetInterface extends ethers.utils.Interface {
  functions: {
    "applySpaceshipDepart(tuple,tuple,tuple,tuple)": FunctionFragment;
    "move(uint256[2],uint256[2][2],uint256[2],uint256[14])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "applySpaceshipDepart",
    values: [
      {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      },
      {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      },
      {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      {
        isInitialized: boolean;
        pausers: BigNumberish;
        invader: string;
        invadeStartBlock: BigNumberish;
        capturer: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "applySpaceshipDepart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;

  events: {
    "ArrivalQueued(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "GameStarted(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArrivalQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
}

export type ArrivalQueuedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    player: string;
    arrivalId: BigNumber;
    from: BigNumber;
    to: BigNumber;
    artifactId: BigNumber;
    abandoning: BigNumber;
  }
>;

export type GameStartedEvent = TypedEvent<
  [string, BigNumber] & { startPlayer: string; startTime: BigNumber }
>;

export class DFMoveFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DFMoveFacetInterface;

  functions: {
    applySpaceshipDepart(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      },
      planet: {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      },
      planetExtendedInfo: {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      planetExtendedInfo2: {
        isInitialized: boolean;
        pausers: BigNumberish;
        invader: string;
        invadeStartBlock: BigNumberish;
        capturer: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        },
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        },
        [boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        }
      ]
    >;

    move(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  applySpaceshipDepart(
    artifact: {
      isInitialized: boolean;
      id: BigNumberish;
      planetDiscoveredOn: BigNumberish;
      rarity: BigNumberish;
      planetBiome: BigNumberish;
      mintedAtTimestamp: BigNumberish;
      discoverer: string;
      artifactType: BigNumberish;
      activations: BigNumberish;
      lastActivated: BigNumberish;
      lastDeactivated: BigNumberish;
      wormholeTo: BigNumberish;
      controller: string;
    },
    planet: {
      owner: string;
      range: BigNumberish;
      speed: BigNumberish;
      defense: BigNumberish;
      population: BigNumberish;
      populationCap: BigNumberish;
      populationGrowth: BigNumberish;
      silverCap: BigNumberish;
      silverGrowth: BigNumberish;
      silver: BigNumberish;
      planetLevel: BigNumberish;
      planetType: BigNumberish;
      isHomePlanet: boolean;
    },
    planetExtendedInfo: {
      isInitialized: boolean;
      createdAt: BigNumberish;
      lastUpdated: BigNumberish;
      perlin: BigNumberish;
      spaceType: BigNumberish;
      upgradeState0: BigNumberish;
      upgradeState1: BigNumberish;
      upgradeState2: BigNumberish;
      hatLevel: BigNumberish;
      hasTriedFindingArtifact: boolean;
      prospectedBlockNumber: BigNumberish;
      destroyed: boolean;
      spaceJunk: BigNumberish;
    },
    planetExtendedInfo2: {
      isInitialized: boolean;
      pausers: BigNumberish;
      invader: string;
      invadeStartBlock: BigNumberish;
      capturer: string;
    },
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      },
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
        spaceJunk: BigNumber;
      },
      [boolean, BigNumber, string, BigNumber, string] & {
        isInitialized: boolean;
        pausers: BigNumber;
        invader: string;
        invadeStartBlock: BigNumber;
        capturer: string;
      }
    ]
  >;

  move(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    applySpaceshipDepart(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      },
      planet: {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      },
      planetExtendedInfo: {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      planetExtendedInfo2: {
        isInitialized: boolean;
        pausers: BigNumberish;
        invader: string;
        invadeStartBlock: BigNumberish;
        capturer: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        },
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        },
        [boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        }
      ]
    >;

    move(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ArrivalQueued(address,uint256,uint256,uint256,uint256,uint256)"(
      player?: null,
      arrivalId?: null,
      from?: null,
      to?: null,
      artifactId?: null,
      abandoning?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        player: string;
        arrivalId: BigNumber;
        from: BigNumber;
        to: BigNumber;
        artifactId: BigNumber;
        abandoning: BigNumber;
      }
    >;

    ArrivalQueued(
      player?: null,
      arrivalId?: null,
      from?: null,
      to?: null,
      artifactId?: null,
      abandoning?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        player: string;
        arrivalId: BigNumber;
        from: BigNumber;
        to: BigNumber;
        artifactId: BigNumber;
        abandoning: BigNumber;
      }
    >;

    "GameStarted(address,uint256)"(
      startPlayer?: null,
      startTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { startPlayer: string; startTime: BigNumber }
    >;

    GameStarted(
      startPlayer?: null,
      startTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { startPlayer: string; startTime: BigNumber }
    >;
  };

  estimateGas: {
    applySpaceshipDepart(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      },
      planet: {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      },
      planetExtendedInfo: {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      planetExtendedInfo2: {
        isInitialized: boolean;
        pausers: BigNumberish;
        invader: string;
        invadeStartBlock: BigNumberish;
        capturer: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    move(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    applySpaceshipDepart(
      artifact: {
        isInitialized: boolean;
        id: BigNumberish;
        planetDiscoveredOn: BigNumberish;
        rarity: BigNumberish;
        planetBiome: BigNumberish;
        mintedAtTimestamp: BigNumberish;
        discoverer: string;
        artifactType: BigNumberish;
        activations: BigNumberish;
        lastActivated: BigNumberish;
        lastDeactivated: BigNumberish;
        wormholeTo: BigNumberish;
        controller: string;
      },
      planet: {
        owner: string;
        range: BigNumberish;
        speed: BigNumberish;
        defense: BigNumberish;
        population: BigNumberish;
        populationCap: BigNumberish;
        populationGrowth: BigNumberish;
        silverCap: BigNumberish;
        silverGrowth: BigNumberish;
        silver: BigNumberish;
        planetLevel: BigNumberish;
        planetType: BigNumberish;
        isHomePlanet: boolean;
      },
      planetExtendedInfo: {
        isInitialized: boolean;
        createdAt: BigNumberish;
        lastUpdated: BigNumberish;
        perlin: BigNumberish;
        spaceType: BigNumberish;
        upgradeState0: BigNumberish;
        upgradeState1: BigNumberish;
        upgradeState2: BigNumberish;
        hatLevel: BigNumberish;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumberish;
        destroyed: boolean;
        spaceJunk: BigNumberish;
      },
      planetExtendedInfo2: {
        isInitialized: boolean;
        pausers: BigNumberish;
        invader: string;
        invadeStartBlock: BigNumberish;
        capturer: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    move(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
