/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DFGetterFacetInterface extends ethers.utils.Interface {
  functions: {
    "TOKEN_MINT_END_TIMESTAMP()": FunctionFragment;
    "adminAddress()": FunctionFragment;
    "artifactIdToPlanetId(uint256)": FunctionFragment;
    "artifactIdToVoyageId(uint256)": FunctionFragment;
    "bulkGetArtifacts(uint256,uint256)": FunctionFragment;
    "bulkGetArtifactsByIds(uint256[])": FunctionFragment;
    "bulkGetPlanetArrivals(uint256,uint256)": FunctionFragment;
    "bulkGetPlanetArrivalsByIds(uint256[])": FunctionFragment;
    "bulkGetPlanetArtifacts(uint256[])": FunctionFragment;
    "bulkGetPlanetIds(uint256,uint256)": FunctionFragment;
    "bulkGetPlanets(uint256,uint256)": FunctionFragment;
    "bulkGetPlanetsByIds(uint256[])": FunctionFragment;
    "bulkGetPlanetsDataByIds(uint256[])": FunctionFragment;
    "bulkGetPlanetsExtendedInfo(uint256,uint256)": FunctionFragment;
    "bulkGetPlanetsExtendedInfo2ByIds(uint256[])": FunctionFragment;
    "bulkGetPlanetsExtendedInfoByIds(uint256[])": FunctionFragment;
    "bulkGetPlayerIds(uint256,uint256)": FunctionFragment;
    "bulkGetPlayers(uint256,uint256)": FunctionFragment;
    "bulkGetRevealedCoordsByIds(uint256[])": FunctionFragment;
    "bulkGetRevealedPlanetIds(uint256,uint256)": FunctionFragment;
    "bulkGetVoyagesByIds(uint256[])": FunctionFragment;
    "getArtifactById(uint256)": FunctionFragment;
    "getArtifactPointValues()": FunctionFragment;
    "getArtifactsOnPlanet(uint256)": FunctionFragment;
    "getCumulativeRarities()": FunctionFragment;
    "getDefaultStats()": FunctionFragment;
    "getGameConstants()": FunctionFragment;
    "getNPlanets()": FunctionFragment;
    "getNPlayers()": FunctionFragment;
    "getNRevealedPlanets()": FunctionFragment;
    "getPlanetArrival(uint256)": FunctionFragment;
    "getPlanetArrivals(uint256)": FunctionFragment;
    "getPlanetEvent(uint256,uint256)": FunctionFragment;
    "getPlanetEventsCount(uint256)": FunctionFragment;
    "getPlanetLevelThresholds()": FunctionFragment;
    "getPlayerSpaceJunkLimit(address)": FunctionFragment;
    "getRevealCooldown()": FunctionFragment;
    "getRevealedCoords(uint256)": FunctionFragment;
    "getSnarkConstants()": FunctionFragment;
    "getTypeWeights()": FunctionFragment;
    "getUpgrades()": FunctionFragment;
    "paused()": FunctionFragment;
    "planetArrivals(uint256)": FunctionFragment;
    "planetArtifacts(uint256)": FunctionFragment;
    "planetDefaultStats(uint256)": FunctionFragment;
    "planetEvents(uint256)": FunctionFragment;
    "planetEventsCount()": FunctionFragment;
    "planetIds(uint256)": FunctionFragment;
    "planetLevelsCount()": FunctionFragment;
    "planets(uint256)": FunctionFragment;
    "planetsExtendedInfo(uint256)": FunctionFragment;
    "planetsExtendedInfo2(uint256)": FunctionFragment;
    "playerIds(uint256)": FunctionFragment;
    "players(address)": FunctionFragment;
    "revealedCoords(uint256)": FunctionFragment;
    "revealedPlanetIds(uint256)": FunctionFragment;
    "worldRadius()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TOKEN_MINT_END_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "artifactIdToPlanetId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "artifactIdToVoyageId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetArtifacts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetArtifactsByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetArrivals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetArrivalsByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetArtifacts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetsByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetsDataByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetsExtendedInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetsExtendedInfo2ByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlanetsExtendedInfoByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlayerIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetPlayers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetRevealedCoordsByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetRevealedPlanetIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetVoyagesByIds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtifactById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtifactPointValues",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getArtifactsOnPlanet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCumulativeRarities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNPlanets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNRevealedPlanets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetArrival",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetArrivals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetEvent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetEventsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanetLevelThresholds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerSpaceJunkLimit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevealCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRevealedCoords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSnarkConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTypeWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpgrades",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "planetArrivals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetArtifacts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetDefaultStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetEvents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetEventsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "planetIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetLevelsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "planets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetsExtendedInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "planetsExtendedInfo2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "players", values: [string]): string;
  encodeFunctionData(
    functionFragment: "revealedCoords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revealedPlanetIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "worldRadius",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "TOKEN_MINT_END_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artifactIdToPlanetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artifactIdToVoyageId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetArtifactsByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetArrivals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetArrivalsByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetsByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetsDataByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetsExtendedInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetsExtendedInfo2ByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlanetsExtendedInfoByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlayerIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetRevealedCoordsByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetRevealedPlanetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetVoyagesByIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtifactById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtifactPointValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtifactsOnPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCumulativeRarities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNPlanets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNRevealedPlanets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetArrival",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetArrivals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetEventsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanetLevelThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerSpaceJunkLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevealCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevealedCoords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSnarkConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypeWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpgrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planetArrivals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetDefaultStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetEventsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "planetIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planetLevelsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "planets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planetsExtendedInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "planetsExtendedInfo2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playerIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revealedCoords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealedPlanetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldRadius",
    data: BytesLike
  ): Result;

  events: {};
}

export class DFGetterFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DFGetterFacetInterface;

  functions: {
    TOKEN_MINT_END_TIMESTAMP(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    artifactIdToPlanetId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    artifactIdToVoyageId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bulkGetArtifacts(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        })[]
      ] & {
        ret: ([
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        })[];
      }
    >;

    bulkGetArtifactsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        })[]
      ] & {
        ret: ([
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        })[];
      }
    >;

    bulkGetPlanetArrivals(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        })[][]
      ]
    >;

    bulkGetPlanetArrivalsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        })[][]
      ]
    >;

    bulkGetPlanetArtifacts(
      planetIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        })[][]
      ]
    >;

    bulkGetPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { ret: BigNumber[] }>;

    bulkGetPlanets(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        })[]
      ] & {
        ret: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        })[];
      }
    >;

    bulkGetPlanetsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        })[]
      ] & {
        ret: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        })[];
      }
    >;

    bulkGetPlanetsDataByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            boolean
          ] & {
            owner: string;
            range: BigNumber;
            speed: BigNumber;
            defense: BigNumber;
            population: BigNumber;
            populationCap: BigNumber;
            populationGrowth: BigNumber;
            silverCap: BigNumber;
            silverGrowth: BigNumber;
            silver: BigNumber;
            planetLevel: BigNumber;
            planetType: number;
            isHomePlanet: boolean;
          },
          [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            boolean,
            BigNumber
          ] & {
            isInitialized: boolean;
            createdAt: BigNumber;
            lastUpdated: BigNumber;
            perlin: BigNumber;
            spaceType: number;
            upgradeState0: BigNumber;
            upgradeState1: BigNumber;
            upgradeState2: BigNumber;
            hatLevel: BigNumber;
            hasTriedFindingArtifact: boolean;
            prospectedBlockNumber: BigNumber;
            destroyed: boolean;
            spaceJunk: BigNumber;
          },
          [boolean, BigNumber, string, BigNumber, string] & {
            isInitialized: boolean;
            pausers: BigNumber;
            invader: string;
            invadeStartBlock: BigNumber;
            capturer: string;
          },
          [BigNumber, BigNumber, BigNumber, string] & {
            locationId: BigNumber;
            x: BigNumber;
            y: BigNumber;
            revealer: string;
          }
        ] & {
          planet: [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            boolean
          ] & {
            owner: string;
            range: BigNumber;
            speed: BigNumber;
            defense: BigNumber;
            population: BigNumber;
            populationCap: BigNumber;
            populationGrowth: BigNumber;
            silverCap: BigNumber;
            silverGrowth: BigNumber;
            silver: BigNumber;
            planetLevel: BigNumber;
            planetType: number;
            isHomePlanet: boolean;
          };
          info: [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            boolean,
            BigNumber
          ] & {
            isInitialized: boolean;
            createdAt: BigNumber;
            lastUpdated: BigNumber;
            perlin: BigNumber;
            spaceType: number;
            upgradeState0: BigNumber;
            upgradeState1: BigNumber;
            upgradeState2: BigNumber;
            hatLevel: BigNumber;
            hasTriedFindingArtifact: boolean;
            prospectedBlockNumber: BigNumber;
            destroyed: boolean;
            spaceJunk: BigNumber;
          };
          info2: [boolean, BigNumber, string, BigNumber, string] & {
            isInitialized: boolean;
            pausers: BigNumber;
            invader: string;
            invadeStartBlock: BigNumber;
            capturer: string;
          };
          revealedCoords: [BigNumber, BigNumber, BigNumber, string] & {
            locationId: BigNumber;
            x: BigNumber;
            y: BigNumber;
            revealer: string;
          };
        })[]
      ] & {
        ret: ([
          [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            boolean
          ] & {
            owner: string;
            range: BigNumber;
            speed: BigNumber;
            defense: BigNumber;
            population: BigNumber;
            populationCap: BigNumber;
            populationGrowth: BigNumber;
            silverCap: BigNumber;
            silverGrowth: BigNumber;
            silver: BigNumber;
            planetLevel: BigNumber;
            planetType: number;
            isHomePlanet: boolean;
          },
          [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            boolean,
            BigNumber
          ] & {
            isInitialized: boolean;
            createdAt: BigNumber;
            lastUpdated: BigNumber;
            perlin: BigNumber;
            spaceType: number;
            upgradeState0: BigNumber;
            upgradeState1: BigNumber;
            upgradeState2: BigNumber;
            hatLevel: BigNumber;
            hasTriedFindingArtifact: boolean;
            prospectedBlockNumber: BigNumber;
            destroyed: boolean;
            spaceJunk: BigNumber;
          },
          [boolean, BigNumber, string, BigNumber, string] & {
            isInitialized: boolean;
            pausers: BigNumber;
            invader: string;
            invadeStartBlock: BigNumber;
            capturer: string;
          },
          [BigNumber, BigNumber, BigNumber, string] & {
            locationId: BigNumber;
            x: BigNumber;
            y: BigNumber;
            revealer: string;
          }
        ] & {
          planet: [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            boolean
          ] & {
            owner: string;
            range: BigNumber;
            speed: BigNumber;
            defense: BigNumber;
            population: BigNumber;
            populationCap: BigNumber;
            populationGrowth: BigNumber;
            silverCap: BigNumber;
            silverGrowth: BigNumber;
            silver: BigNumber;
            planetLevel: BigNumber;
            planetType: number;
            isHomePlanet: boolean;
          };
          info: [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            BigNumber,
            boolean,
            BigNumber
          ] & {
            isInitialized: boolean;
            createdAt: BigNumber;
            lastUpdated: BigNumber;
            perlin: BigNumber;
            spaceType: number;
            upgradeState0: BigNumber;
            upgradeState1: BigNumber;
            upgradeState2: BigNumber;
            hatLevel: BigNumber;
            hasTriedFindingArtifact: boolean;
            prospectedBlockNumber: BigNumber;
            destroyed: boolean;
            spaceJunk: BigNumber;
          };
          info2: [boolean, BigNumber, string, BigNumber, string] & {
            isInitialized: boolean;
            pausers: BigNumber;
            invader: string;
            invadeStartBlock: BigNumber;
            capturer: string;
          };
          revealedCoords: [BigNumber, BigNumber, BigNumber, string] & {
            locationId: BigNumber;
            x: BigNumber;
            y: BigNumber;
            revealer: string;
          };
        })[];
      }
    >;

    bulkGetPlanetsExtendedInfo(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        })[]
      ] & {
        ret: ([
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        })[];
      }
    >;

    bulkGetPlanetsExtendedInfo2ByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        })[]
      ] & {
        ret: ([boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        })[];
      }
    >;

    bulkGetPlanetsExtendedInfoByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        })[]
      ] & {
        ret: ([
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        })[];
      }
    >;

    bulkGetPlayerIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { ret: string[] }>;

    bulkGetPlayers(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          boolean,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          isInitialized: boolean;
          player: string;
          initTimestamp: BigNumber;
          homePlanetId: BigNumber;
          lastRevealTimestamp: BigNumber;
          score: BigNumber;
          spaceJunk: BigNumber;
          spaceJunkLimit: BigNumber;
          claimedShips: boolean;
        })[]
      ] & {
        ret: ([
          boolean,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          isInitialized: boolean;
          player: string;
          initTimestamp: BigNumber;
          homePlanetId: BigNumber;
          lastRevealTimestamp: BigNumber;
          score: BigNumber;
          spaceJunk: BigNumber;
          spaceJunkLimit: BigNumber;
          claimedShips: boolean;
        })[];
      }
    >;

    bulkGetRevealedCoordsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, string] & {
          locationId: BigNumber;
          x: BigNumber;
          y: BigNumber;
          revealer: string;
        })[]
      ] & {
        ret: ([BigNumber, BigNumber, BigNumber, string] & {
          locationId: BigNumber;
          x: BigNumber;
          y: BigNumber;
          revealer: string;
        })[];
      }
    >;

    bulkGetRevealedPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { ret: BigNumber[] }>;

    bulkGetVoyagesByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        })[]
      ] & {
        ret: ([
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        })[];
      }
    >;

    getArtifactById(
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        }
      ] & {
        ret: [
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        };
      }
    >;

    getArtifactPointValues(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]]
    >;

    getArtifactsOnPlanet(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        })[]
      ] & {
        ret: ([
          [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          string,
          BigNumber,
          BigNumber
        ] & {
          artifact: [
            boolean,
            BigNumber,
            BigNumber,
            number,
            number,
            BigNumber,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
          ] & {
            isInitialized: boolean;
            id: BigNumber;
            planetDiscoveredOn: BigNumber;
            rarity: number;
            planetBiome: number;
            mintedAtTimestamp: BigNumber;
            discoverer: string;
            artifactType: number;
            activations: BigNumber;
            lastActivated: BigNumber;
            lastDeactivated: BigNumber;
            wormholeTo: BigNumber;
            controller: string;
          };
          upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          timeDelayedUpgrade: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          };
          owner: string;
          locationId: BigNumber;
          voyageId: BigNumber;
        })[];
      }
    >;

    getCumulativeRarities(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getDefaultStats(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          label: string;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          silverGrowth: BigNumber;
          silverCap: BigNumber;
          barbarianPercentage: BigNumber;
        })[]
      ]
    >;

    getGameConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ],
          BigNumber,
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
          boolean,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ],
          BigNumber,
          BigNumber
        ] & {
          ADMIN_CAN_ADD_PLANETS: boolean;
          WORLD_RADIUS_LOCKED: boolean;
          WORLD_RADIUS_MIN: BigNumber;
          MAX_NATURAL_PLANET_LEVEL: BigNumber;
          TIME_FACTOR_HUNDREDTHS: BigNumber;
          PERLIN_THRESHOLD_1: BigNumber;
          PERLIN_THRESHOLD_2: BigNumber;
          PERLIN_THRESHOLD_3: BigNumber;
          INIT_PERLIN_MIN: BigNumber;
          INIT_PERLIN_MAX: BigNumber;
          SPAWN_RIM_AREA: BigNumber;
          BIOME_THRESHOLD_1: BigNumber;
          BIOME_THRESHOLD_2: BigNumber;
          PLANET_LEVEL_THRESHOLDS: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          PLANET_RARITY: BigNumber;
          PLANET_TRANSFER_ENABLED: boolean;
          PHOTOID_ACTIVATION_DELAY: BigNumber;
          LOCATION_REVEAL_COOLDOWN: BigNumber;
          PLANET_TYPE_WEIGHTS: [
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ],
            [
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number],
              [number, number, number, number, number]
            ]
          ];
          SILVER_SCORE_VALUE: BigNumber;
          ARTIFACT_POINT_VALUES: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          SPACE_JUNK_ENABLED: boolean;
          SPACE_JUNK_LIMIT: BigNumber;
          PLANET_LEVEL_JUNK: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
          ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
          GAME_START_BLOCK: BigNumber;
          CAPTURE_ZONES_ENABLED: boolean;
          CAPTURE_ZONE_COUNT: BigNumber;
          CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
          CAPTURE_ZONE_RADIUS: BigNumber;
          CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
          CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
        }
      ]
    >;

    getNPlanets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNPlayers(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNRevealedPlanets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlanetArrival(
      arrivalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        }
      ]
    >;

    getPlanetArrivals(
      _location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        })[]
      ] & {
        ret: ([
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        })[];
      }
    >;

    getPlanetEvent(
      locationId: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, BigNumber, BigNumber] & {
          id: BigNumber;
          eventType: number;
          timeTrigger: BigNumber;
          timeAdded: BigNumber;
        }
      ]
    >;

    getPlanetEventsCount(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlanetLevelThresholds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getPlayerSpaceJunkLimit(
      playerId: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRevealCooldown(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRevealedCoords(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, string] & {
          locationId: BigNumber;
          x: BigNumber;
          y: BigNumber;
          revealer: string;
        }
      ]
    >;

    getSnarkConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber
        ] & {
          DISABLE_ZK_CHECKS: boolean;
          PLANETHASH_KEY: BigNumber;
          SPACETYPE_KEY: BigNumber;
          BIOMEBASE_KEY: BigNumber;
          PERLIN_MIRROR_X: boolean;
          PERLIN_MIRROR_Y: boolean;
          PERLIN_LENGTH_SCALE: BigNumber;
        }
      ]
    >;

    getTypeWeights(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ]
      ]
    >;

    getUpgrades(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            }
          ],
          [
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            }
          ],
          [
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
              popCapMultiplier: BigNumber;
              popGroMultiplier: BigNumber;
              rangeMultiplier: BigNumber;
              speedMultiplier: BigNumber;
              defMultiplier: BigNumber;
            }
          ]
        ]
      ]
    >;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    planetArrivals(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          player: string;
          fromPlanet: BigNumber;
          toPlanet: BigNumber;
          popArriving: BigNumber;
          silverMoved: BigNumber;
          departureTime: BigNumber;
          arrivalTime: BigNumber;
          arrivalType: number;
          carriedArtifactId: BigNumber;
          distance: BigNumber;
        }
      ]
    >;

    planetArtifacts(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    planetDefaultStats(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          label: string;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          silverGrowth: BigNumber;
          silverCap: BigNumber;
          barbarianPercentage: BigNumber;
        }
      ]
    >;

    planetEvents(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, number, BigNumber, BigNumber] & {
          id: BigNumber;
          eventType: number;
          timeTrigger: BigNumber;
          timeAdded: BigNumber;
        })[]
      ]
    >;

    planetEventsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    planetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    planetLevelsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    planets(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        }
      ]
    >;

    planetsExtendedInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        }
      ]
    >;

    planetsExtendedInfo2(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        }
      ]
    >;

    playerIds(idx: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    players(
      key: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          isInitialized: boolean;
          player: string;
          initTimestamp: BigNumber;
          homePlanetId: BigNumber;
          lastRevealTimestamp: BigNumber;
          score: BigNumber;
          spaceJunk: BigNumber;
          spaceJunkLimit: BigNumber;
          claimedShips: boolean;
        }
      ]
    >;

    revealedCoords(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, string] & {
          locationId: BigNumber;
          x: BigNumber;
          y: BigNumber;
          revealer: string;
        }
      ]
    >;

    revealedPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    worldRadius(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  TOKEN_MINT_END_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

  adminAddress(overrides?: CallOverrides): Promise<string>;

  artifactIdToPlanetId(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  artifactIdToVoyageId(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bulkGetArtifacts(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      string,
      BigNumber,
      BigNumber
    ] & {
      artifact: [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      };
      upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      timeDelayedUpgrade: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      owner: string;
      locationId: BigNumber;
      voyageId: BigNumber;
    })[]
  >;

  bulkGetArtifactsByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      string,
      BigNumber,
      BigNumber
    ] & {
      artifact: [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      };
      upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      timeDelayedUpgrade: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      owner: string;
      locationId: BigNumber;
      voyageId: BigNumber;
    })[]
  >;

  bulkGetPlanetArrivals(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      player: string;
      fromPlanet: BigNumber;
      toPlanet: BigNumber;
      popArriving: BigNumber;
      silverMoved: BigNumber;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      arrivalType: number;
      carriedArtifactId: BigNumber;
      distance: BigNumber;
    })[][]
  >;

  bulkGetPlanetArrivalsByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      player: string;
      fromPlanet: BigNumber;
      toPlanet: BigNumber;
      popArriving: BigNumber;
      silverMoved: BigNumber;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      arrivalType: number;
      carriedArtifactId: BigNumber;
      distance: BigNumber;
    })[][]
  >;

  bulkGetPlanetArtifacts(
    planetIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      string,
      BigNumber,
      BigNumber
    ] & {
      artifact: [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      };
      upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      timeDelayedUpgrade: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      owner: string;
      locationId: BigNumber;
      voyageId: BigNumber;
    })[][]
  >;

  bulkGetPlanetIds(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  bulkGetPlanets(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      owner: string;
      range: BigNumber;
      speed: BigNumber;
      defense: BigNumber;
      population: BigNumber;
      populationCap: BigNumber;
      populationGrowth: BigNumber;
      silverCap: BigNumber;
      silverGrowth: BigNumber;
      silver: BigNumber;
      planetLevel: BigNumber;
      planetType: number;
      isHomePlanet: boolean;
    })[]
  >;

  bulkGetPlanetsByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      owner: string;
      range: BigNumber;
      speed: BigNumber;
      defense: BigNumber;
      population: BigNumber;
      populationCap: BigNumber;
      populationGrowth: BigNumber;
      silverCap: BigNumber;
      silverGrowth: BigNumber;
      silver: BigNumber;
      planetLevel: BigNumber;
      planetType: number;
      isHomePlanet: boolean;
    })[]
  >;

  bulkGetPlanetsDataByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      },
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
        spaceJunk: BigNumber;
      },
      [boolean, BigNumber, string, BigNumber, string] & {
        isInitialized: boolean;
        pausers: BigNumber;
        invader: string;
        invadeStartBlock: BigNumber;
        capturer: string;
      },
      [BigNumber, BigNumber, BigNumber, string] & {
        locationId: BigNumber;
        x: BigNumber;
        y: BigNumber;
        revealer: string;
      }
    ] & {
      planet: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      };
      info: [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
        spaceJunk: BigNumber;
      };
      info2: [boolean, BigNumber, string, BigNumber, string] & {
        isInitialized: boolean;
        pausers: BigNumber;
        invader: string;
        invadeStartBlock: BigNumber;
        capturer: string;
      };
      revealedCoords: [BigNumber, BigNumber, BigNumber, string] & {
        locationId: BigNumber;
        x: BigNumber;
        y: BigNumber;
        revealer: string;
      };
    })[]
  >;

  bulkGetPlanetsExtendedInfo(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      isInitialized: boolean;
      createdAt: BigNumber;
      lastUpdated: BigNumber;
      perlin: BigNumber;
      spaceType: number;
      upgradeState0: BigNumber;
      upgradeState1: BigNumber;
      upgradeState2: BigNumber;
      hatLevel: BigNumber;
      hasTriedFindingArtifact: boolean;
      prospectedBlockNumber: BigNumber;
      destroyed: boolean;
      spaceJunk: BigNumber;
    })[]
  >;

  bulkGetPlanetsExtendedInfo2ByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([boolean, BigNumber, string, BigNumber, string] & {
      isInitialized: boolean;
      pausers: BigNumber;
      invader: string;
      invadeStartBlock: BigNumber;
      capturer: string;
    })[]
  >;

  bulkGetPlanetsExtendedInfoByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      isInitialized: boolean;
      createdAt: BigNumber;
      lastUpdated: BigNumber;
      perlin: BigNumber;
      spaceType: number;
      upgradeState0: BigNumber;
      upgradeState1: BigNumber;
      upgradeState2: BigNumber;
      hatLevel: BigNumber;
      hasTriedFindingArtifact: boolean;
      prospectedBlockNumber: BigNumber;
      destroyed: boolean;
      spaceJunk: BigNumber;
    })[]
  >;

  bulkGetPlayerIds(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  bulkGetPlayers(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      isInitialized: boolean;
      player: string;
      initTimestamp: BigNumber;
      homePlanetId: BigNumber;
      lastRevealTimestamp: BigNumber;
      score: BigNumber;
      spaceJunk: BigNumber;
      spaceJunkLimit: BigNumber;
      claimedShips: boolean;
    })[]
  >;

  bulkGetRevealedCoordsByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, string] & {
      locationId: BigNumber;
      x: BigNumber;
      y: BigNumber;
      revealer: string;
    })[]
  >;

  bulkGetRevealedPlanetIds(
    startIdx: BigNumberish,
    endIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  bulkGetVoyagesByIds(
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      player: string;
      fromPlanet: BigNumber;
      toPlanet: BigNumber;
      popArriving: BigNumber;
      silverMoved: BigNumber;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      arrivalType: number;
      carriedArtifactId: BigNumber;
      distance: BigNumber;
    })[]
  >;

  getArtifactById(
    artifactId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      string,
      BigNumber,
      BigNumber
    ] & {
      artifact: [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      };
      upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      timeDelayedUpgrade: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      owner: string;
      locationId: BigNumber;
      voyageId: BigNumber;
    }
  >;

  getArtifactPointValues(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  >;

  getArtifactsOnPlanet(
    locationId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      },
      string,
      BigNumber,
      BigNumber
    ] & {
      artifact: [
        boolean,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        isInitialized: boolean;
        id: BigNumber;
        planetDiscoveredOn: BigNumber;
        rarity: number;
        planetBiome: number;
        mintedAtTimestamp: BigNumber;
        discoverer: string;
        artifactType: number;
        activations: BigNumber;
        lastActivated: BigNumber;
        lastDeactivated: BigNumber;
        wormholeTo: BigNumber;
        controller: string;
      };
      upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      timeDelayedUpgrade: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        popCapMultiplier: BigNumber;
        popGroMultiplier: BigNumber;
        rangeMultiplier: BigNumber;
        speedMultiplier: BigNumber;
        defMultiplier: BigNumber;
      };
      owner: string;
      locationId: BigNumber;
      voyageId: BigNumber;
    })[]
  >;

  getCumulativeRarities(overrides?: CallOverrides): Promise<BigNumber[]>;

  getDefaultStats(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      label: string;
      populationCap: BigNumber;
      populationGrowth: BigNumber;
      range: BigNumber;
      speed: BigNumber;
      defense: BigNumber;
      silverGrowth: BigNumber;
      silverCap: BigNumber;
      barbarianPercentage: BigNumber;
    })[]
  >;

  getGameConstants(
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      [
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ]
      ],
      BigNumber,
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      boolean,
      BigNumber,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      BigNumber,
      BigNumber
    ] & {
      ADMIN_CAN_ADD_PLANETS: boolean;
      WORLD_RADIUS_LOCKED: boolean;
      WORLD_RADIUS_MIN: BigNumber;
      MAX_NATURAL_PLANET_LEVEL: BigNumber;
      TIME_FACTOR_HUNDREDTHS: BigNumber;
      PERLIN_THRESHOLD_1: BigNumber;
      PERLIN_THRESHOLD_2: BigNumber;
      PERLIN_THRESHOLD_3: BigNumber;
      INIT_PERLIN_MIN: BigNumber;
      INIT_PERLIN_MAX: BigNumber;
      SPAWN_RIM_AREA: BigNumber;
      BIOME_THRESHOLD_1: BigNumber;
      BIOME_THRESHOLD_2: BigNumber;
      PLANET_LEVEL_THRESHOLDS: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      PLANET_RARITY: BigNumber;
      PLANET_TRANSFER_ENABLED: boolean;
      PHOTOID_ACTIVATION_DELAY: BigNumber;
      LOCATION_REVEAL_COOLDOWN: BigNumber;
      PLANET_TYPE_WEIGHTS: [
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ]
      ];
      SILVER_SCORE_VALUE: BigNumber;
      ARTIFACT_POINT_VALUES: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      SPACE_JUNK_ENABLED: boolean;
      SPACE_JUNK_LIMIT: BigNumber;
      PLANET_LEVEL_JUNK: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
      ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
      GAME_START_BLOCK: BigNumber;
      CAPTURE_ZONES_ENABLED: boolean;
      CAPTURE_ZONE_COUNT: BigNumber;
      CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
      CAPTURE_ZONE_RADIUS: BigNumber;
      CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
      CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
    }
  >;

  getNPlanets(overrides?: CallOverrides): Promise<BigNumber>;

  getNPlayers(overrides?: CallOverrides): Promise<BigNumber>;

  getNRevealedPlanets(overrides?: CallOverrides): Promise<BigNumber>;

  getPlanetArrival(
    arrivalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      player: string;
      fromPlanet: BigNumber;
      toPlanet: BigNumber;
      popArriving: BigNumber;
      silverMoved: BigNumber;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      arrivalType: number;
      carriedArtifactId: BigNumber;
      distance: BigNumber;
    }
  >;

  getPlanetArrivals(
    _location: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      player: string;
      fromPlanet: BigNumber;
      toPlanet: BigNumber;
      popArriving: BigNumber;
      silverMoved: BigNumber;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      arrivalType: number;
      carriedArtifactId: BigNumber;
      distance: BigNumber;
    })[]
  >;

  getPlanetEvent(
    locationId: BigNumberish,
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber] & {
      id: BigNumber;
      eventType: number;
      timeTrigger: BigNumber;
      timeAdded: BigNumber;
    }
  >;

  getPlanetEventsCount(
    locationId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlanetLevelThresholds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getPlayerSpaceJunkLimit(
    playerId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRevealCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  getRevealedCoords(
    locationId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      locationId: BigNumber;
      x: BigNumber;
      y: BigNumber;
      revealer: string;
    }
  >;

  getSnarkConstants(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, boolean, boolean, BigNumber] & {
      DISABLE_ZK_CHECKS: boolean;
      PLANETHASH_KEY: BigNumber;
      SPACETYPE_KEY: BigNumber;
      BIOMEBASE_KEY: BigNumber;
      PERLIN_MIRROR_X: boolean;
      PERLIN_MIRROR_Y: boolean;
      PERLIN_LENGTH_SCALE: BigNumber;
    }
  >;

  getTypeWeights(
    overrides?: CallOverrides
  ): Promise<
    [
      [
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number]
      ],
      [
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number]
      ],
      [
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number]
      ],
      [
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number],
        [number, number, number, number, number]
      ]
    ]
  >;

  getUpgrades(
    overrides?: CallOverrides
  ): Promise<
    [
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        }
      ],
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        }
      ],
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        }
      ]
    ]
  >;

  paused(overrides?: CallOverrides): Promise<boolean>;

  planetArrivals(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      player: string;
      fromPlanet: BigNumber;
      toPlanet: BigNumber;
      popArriving: BigNumber;
      silverMoved: BigNumber;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      arrivalType: number;
      carriedArtifactId: BigNumber;
      distance: BigNumber;
    }
  >;

  planetArtifacts(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  planetDefaultStats(
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      label: string;
      populationCap: BigNumber;
      populationGrowth: BigNumber;
      range: BigNumber;
      speed: BigNumber;
      defense: BigNumber;
      silverGrowth: BigNumber;
      silverCap: BigNumber;
      barbarianPercentage: BigNumber;
    }
  >;

  planetEvents(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, number, BigNumber, BigNumber] & {
      id: BigNumber;
      eventType: number;
      timeTrigger: BigNumber;
      timeAdded: BigNumber;
    })[]
  >;

  planetEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

  planetIds(idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  planetLevelsCount(overrides?: CallOverrides): Promise<BigNumber>;

  planets(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      owner: string;
      range: BigNumber;
      speed: BigNumber;
      defense: BigNumber;
      population: BigNumber;
      populationCap: BigNumber;
      populationGrowth: BigNumber;
      silverCap: BigNumber;
      silverGrowth: BigNumber;
      silver: BigNumber;
      planetLevel: BigNumber;
      planetType: number;
      isHomePlanet: boolean;
    }
  >;

  planetsExtendedInfo(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      isInitialized: boolean;
      createdAt: BigNumber;
      lastUpdated: BigNumber;
      perlin: BigNumber;
      spaceType: number;
      upgradeState0: BigNumber;
      upgradeState1: BigNumber;
      upgradeState2: BigNumber;
      hatLevel: BigNumber;
      hasTriedFindingArtifact: boolean;
      prospectedBlockNumber: BigNumber;
      destroyed: boolean;
      spaceJunk: BigNumber;
    }
  >;

  planetsExtendedInfo2(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string, BigNumber, string] & {
      isInitialized: boolean;
      pausers: BigNumber;
      invader: string;
      invadeStartBlock: BigNumber;
      capturer: string;
    }
  >;

  playerIds(idx: BigNumberish, overrides?: CallOverrides): Promise<string>;

  players(
    key: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      isInitialized: boolean;
      player: string;
      initTimestamp: BigNumber;
      homePlanetId: BigNumber;
      lastRevealTimestamp: BigNumber;
      score: BigNumber;
      spaceJunk: BigNumber;
      spaceJunkLimit: BigNumber;
      claimedShips: boolean;
    }
  >;

  revealedCoords(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      locationId: BigNumber;
      x: BigNumber;
      y: BigNumber;
      revealer: string;
    }
  >;

  revealedPlanetIds(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  worldRadius(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    TOKEN_MINT_END_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<string>;

    artifactIdToPlanetId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    artifactIdToVoyageId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetArtifacts(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        string,
        BigNumber,
        BigNumber
      ] & {
        artifact: [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        };
        upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        timeDelayedUpgrade: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        owner: string;
        locationId: BigNumber;
        voyageId: BigNumber;
      })[]
    >;

    bulkGetArtifactsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        string,
        BigNumber,
        BigNumber
      ] & {
        artifact: [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        };
        upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        timeDelayedUpgrade: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        owner: string;
        locationId: BigNumber;
        voyageId: BigNumber;
      })[]
    >;

    bulkGetPlanetArrivals(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        player: string;
        fromPlanet: BigNumber;
        toPlanet: BigNumber;
        popArriving: BigNumber;
        silverMoved: BigNumber;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        arrivalType: number;
        carriedArtifactId: BigNumber;
        distance: BigNumber;
      })[][]
    >;

    bulkGetPlanetArrivalsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        player: string;
        fromPlanet: BigNumber;
        toPlanet: BigNumber;
        popArriving: BigNumber;
        silverMoved: BigNumber;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        arrivalType: number;
        carriedArtifactId: BigNumber;
        distance: BigNumber;
      })[][]
    >;

    bulkGetPlanetArtifacts(
      planetIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        string,
        BigNumber,
        BigNumber
      ] & {
        artifact: [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        };
        upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        timeDelayedUpgrade: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        owner: string;
        locationId: BigNumber;
        voyageId: BigNumber;
      })[][]
    >;

    bulkGetPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    bulkGetPlanets(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      })[]
    >;

    bulkGetPlanetsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      })[]
    >;

    bulkGetPlanetsDataByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        },
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        },
        [boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        },
        [BigNumber, BigNumber, BigNumber, string] & {
          locationId: BigNumber;
          x: BigNumber;
          y: BigNumber;
          revealer: string;
        }
      ] & {
        planet: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        };
        info: [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        };
        info2: [boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        };
        revealedCoords: [BigNumber, BigNumber, BigNumber, string] & {
          locationId: BigNumber;
          x: BigNumber;
          y: BigNumber;
          revealer: string;
        };
      })[]
    >;

    bulkGetPlanetsExtendedInfo(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
        spaceJunk: BigNumber;
      })[]
    >;

    bulkGetPlanetsExtendedInfo2ByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([boolean, BigNumber, string, BigNumber, string] & {
        isInitialized: boolean;
        pausers: BigNumber;
        invader: string;
        invadeStartBlock: BigNumber;
        capturer: string;
      })[]
    >;

    bulkGetPlanetsExtendedInfoByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
        spaceJunk: BigNumber;
      })[]
    >;

    bulkGetPlayerIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    bulkGetPlayers(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        isInitialized: boolean;
        player: string;
        initTimestamp: BigNumber;
        homePlanetId: BigNumber;
        lastRevealTimestamp: BigNumber;
        score: BigNumber;
        spaceJunk: BigNumber;
        spaceJunkLimit: BigNumber;
        claimedShips: boolean;
      })[]
    >;

    bulkGetRevealedCoordsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, string] & {
        locationId: BigNumber;
        x: BigNumber;
        y: BigNumber;
        revealer: string;
      })[]
    >;

    bulkGetRevealedPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    bulkGetVoyagesByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        player: string;
        fromPlanet: BigNumber;
        toPlanet: BigNumber;
        popArriving: BigNumber;
        silverMoved: BigNumber;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        arrivalType: number;
        carriedArtifactId: BigNumber;
        distance: BigNumber;
      })[]
    >;

    getArtifactById(
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        string,
        BigNumber,
        BigNumber
      ] & {
        artifact: [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        };
        upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        timeDelayedUpgrade: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        owner: string;
        locationId: BigNumber;
        voyageId: BigNumber;
      }
    >;

    getArtifactPointValues(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    getArtifactsOnPlanet(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        },
        string,
        BigNumber,
        BigNumber
      ] & {
        artifact: [
          boolean,
          BigNumber,
          BigNumber,
          number,
          number,
          BigNumber,
          string,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          isInitialized: boolean;
          id: BigNumber;
          planetDiscoveredOn: BigNumber;
          rarity: number;
          planetBiome: number;
          mintedAtTimestamp: BigNumber;
          discoverer: string;
          artifactType: number;
          activations: BigNumber;
          lastActivated: BigNumber;
          lastDeactivated: BigNumber;
          wormholeTo: BigNumber;
          controller: string;
        };
        upgrade: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        timeDelayedUpgrade: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          popCapMultiplier: BigNumber;
          popGroMultiplier: BigNumber;
          rangeMultiplier: BigNumber;
          speedMultiplier: BigNumber;
          defMultiplier: BigNumber;
        };
        owner: string;
        locationId: BigNumber;
        voyageId: BigNumber;
      })[]
    >;

    getCumulativeRarities(overrides?: CallOverrides): Promise<BigNumber[]>;

    getDefaultStats(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        label: string;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        silverGrowth: BigNumber;
        silverCap: BigNumber;
        barbarianPercentage: BigNumber;
      })[]
    >;

    getGameConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ],
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
        boolean,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber,
        BigNumber
      ] & {
        ADMIN_CAN_ADD_PLANETS: boolean;
        WORLD_RADIUS_LOCKED: boolean;
        WORLD_RADIUS_MIN: BigNumber;
        MAX_NATURAL_PLANET_LEVEL: BigNumber;
        TIME_FACTOR_HUNDREDTHS: BigNumber;
        PERLIN_THRESHOLD_1: BigNumber;
        PERLIN_THRESHOLD_2: BigNumber;
        PERLIN_THRESHOLD_3: BigNumber;
        INIT_PERLIN_MIN: BigNumber;
        INIT_PERLIN_MAX: BigNumber;
        SPAWN_RIM_AREA: BigNumber;
        BIOME_THRESHOLD_1: BigNumber;
        BIOME_THRESHOLD_2: BigNumber;
        PLANET_LEVEL_THRESHOLDS: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        PLANET_RARITY: BigNumber;
        PLANET_TRANSFER_ENABLED: boolean;
        PHOTOID_ACTIVATION_DELAY: BigNumber;
        LOCATION_REVEAL_COOLDOWN: BigNumber;
        PLANET_TYPE_WEIGHTS: [
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ],
          [
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number],
            [number, number, number, number, number]
          ]
        ];
        SILVER_SCORE_VALUE: BigNumber;
        ARTIFACT_POINT_VALUES: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        SPACE_JUNK_ENABLED: boolean;
        SPACE_JUNK_LIMIT: BigNumber;
        PLANET_LEVEL_JUNK: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        ABANDON_SPEED_CHANGE_PERCENT: BigNumber;
        ABANDON_RANGE_CHANGE_PERCENT: BigNumber;
        GAME_START_BLOCK: BigNumber;
        CAPTURE_ZONES_ENABLED: boolean;
        CAPTURE_ZONE_COUNT: BigNumber;
        CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;
        CAPTURE_ZONE_RADIUS: BigNumber;
        CAPTURE_ZONE_PLANET_LEVEL_SCORE: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;
        CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;
      }
    >;

    getNPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getNPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    getNRevealedPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getPlanetArrival(
      arrivalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        player: string;
        fromPlanet: BigNumber;
        toPlanet: BigNumber;
        popArriving: BigNumber;
        silverMoved: BigNumber;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        arrivalType: number;
        carriedArtifactId: BigNumber;
        distance: BigNumber;
      }
    >;

    getPlanetArrivals(
      _location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        player: string;
        fromPlanet: BigNumber;
        toPlanet: BigNumber;
        popArriving: BigNumber;
        silverMoved: BigNumber;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        arrivalType: number;
        carriedArtifactId: BigNumber;
        distance: BigNumber;
      })[]
    >;

    getPlanetEvent(
      locationId: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber] & {
        id: BigNumber;
        eventType: number;
        timeTrigger: BigNumber;
        timeAdded: BigNumber;
      }
    >;

    getPlanetEventsCount(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetLevelThresholds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getPlayerSpaceJunkLimit(
      playerId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevealCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    getRevealedCoords(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        locationId: BigNumber;
        x: BigNumber;
        y: BigNumber;
        revealer: string;
      }
    >;

    getSnarkConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        DISABLE_ZK_CHECKS: boolean;
        PLANETHASH_KEY: BigNumber;
        SPACETYPE_KEY: BigNumber;
        BIOMEBASE_KEY: BigNumber;
        PERLIN_MIRROR_X: boolean;
        PERLIN_MIRROR_Y: boolean;
        PERLIN_LENGTH_SCALE: BigNumber;
      }
    >;

    getTypeWeights(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ],
        [
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number],
          [number, number, number, number, number]
        ]
      ]
    >;

    getUpgrades(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          }
        ],
        [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          }
        ],
        [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            popCapMultiplier: BigNumber;
            popGroMultiplier: BigNumber;
            rangeMultiplier: BigNumber;
            speedMultiplier: BigNumber;
            defMultiplier: BigNumber;
          }
        ]
      ]
    >;

    paused(overrides?: CallOverrides): Promise<boolean>;

    planetArrivals(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        player: string;
        fromPlanet: BigNumber;
        toPlanet: BigNumber;
        popArriving: BigNumber;
        silverMoved: BigNumber;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        arrivalType: number;
        carriedArtifactId: BigNumber;
        distance: BigNumber;
      }
    >;

    planetArtifacts(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    planetDefaultStats(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        label: string;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        silverGrowth: BigNumber;
        silverCap: BigNumber;
        barbarianPercentage: BigNumber;
      }
    >;

    planetEvents(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, number, BigNumber, BigNumber] & {
        id: BigNumber;
        eventType: number;
        timeTrigger: BigNumber;
        timeAdded: BigNumber;
      })[]
    >;

    planetEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

    planetIds(idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    planetLevelsCount(overrides?: CallOverrides): Promise<BigNumber>;

    planets(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      }
    >;

    planetsExtendedInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
        spaceJunk: BigNumber;
      }
    >;

    planetsExtendedInfo2(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string, BigNumber, string] & {
        isInitialized: boolean;
        pausers: BigNumber;
        invader: string;
        invadeStartBlock: BigNumber;
        capturer: string;
      }
    >;

    playerIds(idx: BigNumberish, overrides?: CallOverrides): Promise<string>;

    players(
      key: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        isInitialized: boolean;
        player: string;
        initTimestamp: BigNumber;
        homePlanetId: BigNumber;
        lastRevealTimestamp: BigNumber;
        score: BigNumber;
        spaceJunk: BigNumber;
        spaceJunkLimit: BigNumber;
        claimedShips: boolean;
      }
    >;

    revealedCoords(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        locationId: BigNumber;
        x: BigNumber;
        y: BigNumber;
        revealer: string;
      }
    >;

    revealedPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worldRadius(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    TOKEN_MINT_END_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    artifactIdToPlanetId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    artifactIdToVoyageId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetArtifacts(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetArtifactsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetArrivals(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetArrivalsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetArtifacts(
      planetIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanets(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetsDataByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetsExtendedInfo(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetsExtendedInfo2ByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlanetsExtendedInfoByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlayerIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetPlayers(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetRevealedCoordsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetRevealedPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetVoyagesByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArtifactById(
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArtifactPointValues(overrides?: CallOverrides): Promise<BigNumber>;

    getArtifactsOnPlanet(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCumulativeRarities(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultStats(overrides?: CallOverrides): Promise<BigNumber>;

    getGameConstants(overrides?: CallOverrides): Promise<BigNumber>;

    getNPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getNPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    getNRevealedPlanets(overrides?: CallOverrides): Promise<BigNumber>;

    getPlanetArrival(
      arrivalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetArrivals(
      _location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetEvent(
      locationId: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetEventsCount(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanetLevelThresholds(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayerSpaceJunkLimit(
      playerId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevealCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    getRevealedCoords(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSnarkConstants(overrides?: CallOverrides): Promise<BigNumber>;

    getTypeWeights(overrides?: CallOverrides): Promise<BigNumber>;

    getUpgrades(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    planetArrivals(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetArtifacts(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetDefaultStats(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetEvents(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

    planetIds(idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    planetLevelsCount(overrides?: CallOverrides): Promise<BigNumber>;

    planets(key: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    planetsExtendedInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planetsExtendedInfo2(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerIds(idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    players(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    revealedCoords(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revealedPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worldRadius(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TOKEN_MINT_END_TIMESTAMP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    artifactIdToPlanetId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    artifactIdToVoyageId(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetArtifacts(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetArtifactsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetArrivals(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetArrivalsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetArtifacts(
      planetIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanets(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetsDataByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetsExtendedInfo(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetsExtendedInfo2ByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlanetsExtendedInfoByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlayerIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetPlayers(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetRevealedCoordsByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetRevealedPlanetIds(
      startIdx: BigNumberish,
      endIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetVoyagesByIds(
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArtifactById(
      artifactId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArtifactPointValues(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArtifactsOnPlanet(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCumulativeRarities(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGameConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNPlanets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNPlayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNRevealedPlanets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetArrival(
      arrivalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetArrivals(
      _location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetEvent(
      locationId: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetEventsCount(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanetLevelThresholds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerSpaceJunkLimit(
      playerId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevealCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRevealedCoords(
      locationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSnarkConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTypeWeights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUpgrades(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    planetArrivals(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetArtifacts(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetDefaultStats(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetEvents(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetEventsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    planetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetLevelsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    planets(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetsExtendedInfo(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planetsExtendedInfo2(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    players(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revealedCoords(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revealedPlanetIds(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    worldRadius(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
