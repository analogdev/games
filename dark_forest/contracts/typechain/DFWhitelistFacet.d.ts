/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DFWhitelistFacetInterface extends ethers.utils.Interface {
  functions: {
    "addKeys(uint256[])": FunctionFragment;
    "addToWhitelist(address)": FunctionFragment;
    "adminUseKey(uint256,address)": FunctionFragment;
    "allowListEnabled()": FunctionFragment;
    "bulkAddToWhitelist(address[])": FunctionFragment;
    "changeDrip(uint256)": FunctionFragment;
    "changeRelayerReward(uint256)": FunctionFragment;
    "disableKeys(uint256[])": FunctionFragment;
    "drip()": FunctionFragment;
    "getNAllowed()": FunctionFragment;
    "isKeyHashValid(uint256)": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "relayerReward()": FunctionFragment;
    "removeFromWhitelist(address)": FunctionFragment;
    "setRelayerRewardsEnabled(bool)": FunctionFragment;
    "useKey(uint256[2],uint256[2][2],uint256[2],uint256[2])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addKeys",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminUseKey",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowListEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bulkAddToWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDrip",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRelayerReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableKeys",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "drip", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isKeyHashValid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayerRewardsEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "useKey",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminUseKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowListEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkAddToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeDrip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRelayerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKeyHashValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayerRewardsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "useKey", data: BytesLike): Result;

  events: {};
}

export class DFWhitelistFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DFWhitelistFacetInterface;

  functions: {
    addKeys(
      hashes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToWhitelist(
      toAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminUseKey(
      keyHash: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowListEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    bulkAddToWhitelist(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeDrip(
      newDrip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRelayerReward(
      newReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableKeys(
      keys: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    drip(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNAllowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    isKeyHashValid(
      hashed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelisted(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    relayerReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeFromWhitelist(
      toRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRelayerRewardsEnabled(
      newRewardsEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    useKey(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addKeys(
    hashes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToWhitelist(
    toAdd: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminUseKey(
    keyHash: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowListEnabled(overrides?: CallOverrides): Promise<boolean>;

  bulkAddToWhitelist(
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeDrip(
    newDrip: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRelayerReward(
    newReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableKeys(
    keys: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  drip(overrides?: CallOverrides): Promise<BigNumber>;

  getNAllowed(overrides?: CallOverrides): Promise<BigNumber>;

  isKeyHashValid(
    hashed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelisted(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  relayerReward(overrides?: CallOverrides): Promise<BigNumber>;

  removeFromWhitelist(
    toRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRelayerRewardsEnabled(
    newRewardsEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  useKey(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addKeys(hashes: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    addToWhitelist(toAdd: string, overrides?: CallOverrides): Promise<void>;

    adminUseKey(
      keyHash: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowListEnabled(overrides?: CallOverrides): Promise<boolean>;

    bulkAddToWhitelist(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeDrip(newDrip: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeRelayerReward(
      newReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disableKeys(keys: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    drip(overrides?: CallOverrides): Promise<BigNumber>;

    getNAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    isKeyHashValid(
      hashed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelisted(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    relayerReward(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(
      toRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayerRewardsEnabled(
      newRewardsEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    useKey(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addKeys(
      hashes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToWhitelist(
      toAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminUseKey(
      keyHash: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowListEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    bulkAddToWhitelist(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeDrip(
      newDrip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRelayerReward(
      newReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableKeys(
      keys: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    drip(overrides?: CallOverrides): Promise<BigNumber>;

    getNAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    isKeyHashValid(
      hashed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelisted(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    relayerReward(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(
      toRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRelayerRewardsEnabled(
      newRewardsEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    useKey(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addKeys(
      hashes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToWhitelist(
      toAdd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminUseKey(
      keyHash: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowListEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bulkAddToWhitelist(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeDrip(
      newDrip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRelayerReward(
      newReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableKeys(
      keys: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    drip(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isKeyHashValid(
      hashed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayerReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      toRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRelayerRewardsEnabled(
      newRewardsEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    useKey(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
