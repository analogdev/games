/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DFArenaFaucetInterface extends ethers.utils.Interface {
  functions: {
    "_owner()": FunctionFragment;
    "amount()": FunctionFragment;
    "canWithdraw(address)": FunctionFragment;
    "changeDrip(uint256)": FunctionFragment;
    "changeWaitTime(uint256)": FunctionFragment;
    "drip(address)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getDripAmount()": FunctionFragment;
    "getNextAccessTime(address)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getTimeUntilDrip(address)": FunctionFragment;
    "getWaitTime()": FunctionFragment;
    "nextAccessTime(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "waitTime()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "amount", values?: undefined): string;
  encodeFunctionData(functionFragment: "canWithdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeDrip",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeWaitTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "drip", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDripAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextAccessTime",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTimeUntilDrip",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWaitTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextAccessTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "waitTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "amount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeDrip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeWaitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDripAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextAccessTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTimeUntilDrip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWaitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAccessTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "waitTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AmountChanged(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "WaitTimeChanged(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmountChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WaitTimeChanged"): EventFragment;
}

export type AmountChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldAmount: BigNumber; newAmount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type WaitTimeChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldTime: BigNumber; newTime: BigNumber }
>;

export class DFArenaFaucet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DFArenaFaucetInterface;

  functions: {
    _owner(overrides?: CallOverrides): Promise<[string]>;

    amount(overrides?: CallOverrides): Promise<[BigNumber]>;

    canWithdraw(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    changeDrip(
      newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeWaitTime(
      waitTimeSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    drip(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDripAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextAccessTime(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getTimeUntilDrip(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWaitTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextAccessTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    waitTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _owner(overrides?: CallOverrides): Promise<string>;

  amount(overrides?: CallOverrides): Promise<BigNumber>;

  canWithdraw(_address: string, overrides?: CallOverrides): Promise<boolean>;

  changeDrip(
    newAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeWaitTime(
    waitTimeSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  drip(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getDripAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getNextAccessTime(
    _recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getTimeUntilDrip(
    _recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

  nextAccessTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  waitTime(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _owner(overrides?: CallOverrides): Promise<string>;

    amount(overrides?: CallOverrides): Promise<BigNumber>;

    canWithdraw(_address: string, overrides?: CallOverrides): Promise<boolean>;

    changeDrip(
      newAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeWaitTime(
      waitTimeSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    drip(_address: string, overrides?: CallOverrides): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getDripAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getNextAccessTime(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getTimeUntilDrip(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

    nextAccessTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    waitTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_address: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AmountChanged(uint256,uint256)"(
      oldAmount?: null,
      newAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldAmount: BigNumber; newAmount: BigNumber }
    >;

    AmountChanged(
      oldAmount?: null,
      newAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldAmount: BigNumber; newAmount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "WaitTimeChanged(uint256,uint256)"(
      oldTime?: null,
      newTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldTime: BigNumber; newTime: BigNumber }
    >;

    WaitTimeChanged(
      oldTime?: null,
      newTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldTime: BigNumber; newTime: BigNumber }
    >;
  };

  estimateGas: {
    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    amount(overrides?: CallOverrides): Promise<BigNumber>;

    canWithdraw(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeDrip(
      newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeWaitTime(
      waitTimeSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    drip(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getDripAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getNextAccessTime(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getTimeUntilDrip(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

    nextAccessTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    waitTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canWithdraw(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeDrip(
      newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeWaitTime(
      waitTimeSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    drip(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDripAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextAccessTime(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTimeUntilDrip(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWaitTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextAccessTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    waitTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
