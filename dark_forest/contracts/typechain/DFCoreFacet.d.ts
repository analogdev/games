/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DFCoreFacetInterface extends ethers.utils.Interface {
  functions: {
    "buyHat(uint256)": FunctionFragment;
    "checkRevealProof(uint256[2],uint256[2][2],uint256[2],uint256[9])": FunctionFragment;
    "getRefreshedPlanet(uint256,uint256)": FunctionFragment;
    "refreshPlanet(uint256)": FunctionFragment;
    "revealLocation(uint256[2],uint256[2][2],uint256[2],uint256[9])": FunctionFragment;
    "transferPlanet(uint256,address)": FunctionFragment;
    "upgradePlanet(uint256,uint256)": FunctionFragment;
    "withdrawSilver(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyHat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRevealProof",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRefreshedPlanet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshPlanet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revealLocation",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPlanet",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePlanet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSilver",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyHat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkRevealProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefreshedPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSilver",
    data: BytesLike
  ): Result;

  events: {
    "LocationRevealed(address,uint256,uint256,uint256)": EventFragment;
    "PlanetHatBought(address,uint256,uint256)": EventFragment;
    "PlanetSilverWithdrawn(address,uint256,uint256)": EventFragment;
    "PlanetTransferred(address,uint256,address)": EventFragment;
    "PlanetUpgraded(address,uint256,uint256,uint256)": EventFragment;
    "PlayerInitialized(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LocationRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetHatBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetSilverWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerInitialized"): EventFragment;
}

export type LocationRevealedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    revealer: string;
    loc: BigNumber;
    x: BigNumber;
    y: BigNumber;
  }
>;

export type PlanetHatBoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    loc: BigNumber;
    tohatLevel: BigNumber;
  }
>;

export type PlanetSilverWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    player: string;
    loc: BigNumber;
    amount: BigNumber;
  }
>;

export type PlanetTransferredEvent = TypedEvent<
  [string, BigNumber, string] & {
    sender: string;
    loc: BigNumber;
    receiver: string;
  }
>;

export type PlanetUpgradedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    player: string;
    loc: BigNumber;
    branch: BigNumber;
    toBranchLevel: BigNumber;
  }
>;

export type PlayerInitializedEvent = TypedEvent<
  [string, BigNumber] & { player: string; loc: BigNumber }
>;

export class DFCoreFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DFCoreFacetInterface;

  functions: {
    buyHat(
      _location: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkRevealProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRefreshedPlanet(
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        },
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        },
        [boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ] & {
        eventsToRemove: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        artifactsToAdd: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
      }
    >;

    refreshPlanet(
      location: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealLocation(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferPlanet(
      _location: BigNumberish,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradePlanet(
      _location: BigNumberish,
      _branch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSilver(
      locationId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyHat(
    _location: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkRevealProof(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRefreshedPlanet(
    location: BigNumberish,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        owner: string;
        range: BigNumber;
        speed: BigNumber;
        defense: BigNumber;
        population: BigNumber;
        populationCap: BigNumber;
        populationGrowth: BigNumber;
        silverCap: BigNumber;
        silverGrowth: BigNumber;
        silver: BigNumber;
        planetLevel: BigNumber;
        planetType: number;
        isHomePlanet: boolean;
      },
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        isInitialized: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        perlin: BigNumber;
        spaceType: number;
        upgradeState0: BigNumber;
        upgradeState1: BigNumber;
        upgradeState2: BigNumber;
        hatLevel: BigNumber;
        hasTriedFindingArtifact: boolean;
        prospectedBlockNumber: BigNumber;
        destroyed: boolean;
        spaceJunk: BigNumber;
      },
      [boolean, BigNumber, string, BigNumber, string] & {
        isInitialized: boolean;
        pausers: BigNumber;
        invader: string;
        invadeStartBlock: BigNumber;
        capturer: string;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    ] & {
      eventsToRemove: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      artifactsToAdd: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }
  >;

  refreshPlanet(
    location: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealLocation(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferPlanet(
    _location: BigNumberish,
    _player: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradePlanet(
    _location: BigNumberish,
    _branch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSilver(
    locationId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyHat(_location: BigNumberish, overrides?: CallOverrides): Promise<void>;

    checkRevealProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRefreshedPlanet(
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean
        ] & {
          owner: string;
          range: BigNumber;
          speed: BigNumber;
          defense: BigNumber;
          population: BigNumber;
          populationCap: BigNumber;
          populationGrowth: BigNumber;
          silverCap: BigNumber;
          silverGrowth: BigNumber;
          silver: BigNumber;
          planetLevel: BigNumber;
          planetType: number;
          isHomePlanet: boolean;
        },
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          boolean,
          BigNumber
        ] & {
          isInitialized: boolean;
          createdAt: BigNumber;
          lastUpdated: BigNumber;
          perlin: BigNumber;
          spaceType: number;
          upgradeState0: BigNumber;
          upgradeState1: BigNumber;
          upgradeState2: BigNumber;
          hatLevel: BigNumber;
          hasTriedFindingArtifact: boolean;
          prospectedBlockNumber: BigNumber;
          destroyed: boolean;
          spaceJunk: BigNumber;
        },
        [boolean, BigNumber, string, BigNumber, string] & {
          isInitialized: boolean;
          pausers: BigNumber;
          invader: string;
          invadeStartBlock: BigNumber;
          capturer: string;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ] & {
        eventsToRemove: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        artifactsToAdd: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
      }
    >;

    refreshPlanet(
      location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revealLocation(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferPlanet(
      _location: BigNumberish,
      _player: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradePlanet(
      _location: BigNumberish,
      _branch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    withdrawSilver(
      locationId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LocationRevealed(address,uint256,uint256,uint256)"(
      revealer?: null,
      loc?: null,
      x?: null,
      y?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { revealer: string; loc: BigNumber; x: BigNumber; y: BigNumber }
    >;

    LocationRevealed(
      revealer?: null,
      loc?: null,
      x?: null,
      y?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { revealer: string; loc: BigNumber; x: BigNumber; y: BigNumber }
    >;

    "PlanetHatBought(address,uint256,uint256)"(
      player?: null,
      loc?: null,
      tohatLevel?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; loc: BigNumber; tohatLevel: BigNumber }
    >;

    PlanetHatBought(
      player?: null,
      loc?: null,
      tohatLevel?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; loc: BigNumber; tohatLevel: BigNumber }
    >;

    "PlanetSilverWithdrawn(address,uint256,uint256)"(
      player?: null,
      loc?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; loc: BigNumber; amount: BigNumber }
    >;

    PlanetSilverWithdrawn(
      player?: null,
      loc?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { player: string; loc: BigNumber; amount: BigNumber }
    >;

    "PlanetTransferred(address,uint256,address)"(
      sender?: null,
      loc?: null,
      receiver?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { sender: string; loc: BigNumber; receiver: string }
    >;

    PlanetTransferred(
      sender?: null,
      loc?: null,
      receiver?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { sender: string; loc: BigNumber; receiver: string }
    >;

    "PlanetUpgraded(address,uint256,uint256,uint256)"(
      player?: null,
      loc?: null,
      branch?: null,
      toBranchLevel?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        player: string;
        loc: BigNumber;
        branch: BigNumber;
        toBranchLevel: BigNumber;
      }
    >;

    PlanetUpgraded(
      player?: null,
      loc?: null,
      branch?: null,
      toBranchLevel?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        player: string;
        loc: BigNumber;
        branch: BigNumber;
        toBranchLevel: BigNumber;
      }
    >;

    "PlayerInitialized(address,uint256)"(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;

    PlayerInitialized(
      player?: null,
      loc?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; loc: BigNumber }
    >;
  };

  estimateGas: {
    buyHat(
      _location: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkRevealProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRefreshedPlanet(
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refreshPlanet(
      location: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealLocation(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferPlanet(
      _location: BigNumberish,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradePlanet(
      _location: BigNumberish,
      _branch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSilver(
      locationId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyHat(
      _location: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkRevealProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRefreshedPlanet(
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refreshPlanet(
      location: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealLocation(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferPlanet(
      _location: BigNumberish,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradePlanet(
      _location: BigNumberish,
      _branch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSilver(
      locationId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
