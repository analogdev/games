/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DFAdminFacetInterface extends ethers.utils.Interface {
  functions: {
    "addScore(address,uint256)": FunctionFragment;
    "adminGiveSpaceShip(uint256,address,uint8)": FunctionFragment;
    "adminInitializePlanet(uint256,uint256)": FunctionFragment;
    "adminSetWorldRadius(uint256)": FunctionFragment;
    "changeLocationRevealCooldown(uint256)": FunctionFragment;
    "changeWorldRadiusMin(uint256)": FunctionFragment;
    "createPlanet(tuple)": FunctionFragment;
    "deductScore(address,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "safeSetOwner(address,uint256[2],uint256[2][2],uint256[2],uint256[8])": FunctionFragment;
    "setOwner(uint256,address)": FunctionFragment;
    "setPlanetTransferEnabled(bool)": FunctionFragment;
    "setTokenMintEndTime(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addScore",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminGiveSpaceShip",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminInitializePlanet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetWorldRadius",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLocationRevealCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeWorldRadiusMin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPlanet",
    values: [
      {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deductScore",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeSetOwner",
    values: [
      string,
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlanetTransferEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenMintEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminGiveSpaceShip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminInitializePlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetWorldRadius",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLocationRevealCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeWorldRadiusMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deductScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeSetOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPlanetTransferEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenMintEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminGiveSpaceship(uint256,address,uint8)": EventFragment;
    "AdminOwnershipChanged(uint256,address)": EventFragment;
    "AdminPlanetCreated(uint256)": EventFragment;
    "PauseStateChanged(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminGiveSpaceship"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminOwnershipChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminPlanetCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseStateChanged"): EventFragment;
}

export type AdminGiveSpaceshipEvent = TypedEvent<
  [BigNumber, string, number] & {
    loc: BigNumber;
    owner: string;
    artifactType: number;
  }
>;

export type AdminOwnershipChangedEvent = TypedEvent<
  [BigNumber, string] & { loc: BigNumber; newOwner: string }
>;

export type AdminPlanetCreatedEvent = TypedEvent<
  [BigNumber] & { loc: BigNumber }
>;

export type PauseStateChangedEvent = TypedEvent<
  [boolean] & { paused: boolean }
>;

export class DFAdminFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DFAdminFacetInterface;

  functions: {
    addScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminGiveSpaceShip(
      locationId: BigNumberish,
      owner: string,
      artifactType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminInitializePlanet(
      locationId: BigNumberish,
      perlin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminSetWorldRadius(
      _newRadius: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeLocationRevealCooldown(
      newCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeWorldRadiusMin(
      _newConstant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPlanet(
      args: {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deductScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeSetOwner(
      newOwner: string,
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      planetId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlanetTransferEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenMintEndTime(
      newTokenMintEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addScore(
    playerAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminGiveSpaceShip(
    locationId: BigNumberish,
    owner: string,
    artifactType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminInitializePlanet(
    locationId: BigNumberish,
    perlin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminSetWorldRadius(
    _newRadius: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeLocationRevealCooldown(
    newCooldown: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeWorldRadiusMin(
    _newConstant: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPlanet(
    args: {
      location: BigNumberish;
      perlin: BigNumberish;
      level: BigNumberish;
      planetType: BigNumberish;
      requireValidLocationId: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deductScore(
    playerAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeSetOwner(
    newOwner: string,
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    _input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    planetId: BigNumberish,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlanetTransferEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenMintEndTime(
    newTokenMintEndTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminGiveSpaceShip(
      locationId: BigNumberish,
      owner: string,
      artifactType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminInitializePlanet(
      locationId: BigNumberish,
      perlin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetWorldRadius(
      _newRadius: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeLocationRevealCooldown(
      newCooldown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeWorldRadiusMin(
      _newConstant: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createPlanet(
      args: {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    deductScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    safeSetOwner(
      newOwner: string,
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      planetId: BigNumberish,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlanetTransferEnabled(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenMintEndTime(
      newTokenMintEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminGiveSpaceship(uint256,address,uint8)"(
      loc?: null,
      owner?: null,
      artifactType?: null
    ): TypedEventFilter<
      [BigNumber, string, number],
      { loc: BigNumber; owner: string; artifactType: number }
    >;

    AdminGiveSpaceship(
      loc?: null,
      owner?: null,
      artifactType?: null
    ): TypedEventFilter<
      [BigNumber, string, number],
      { loc: BigNumber; owner: string; artifactType: number }
    >;

    "AdminOwnershipChanged(uint256,address)"(
      loc?: null,
      newOwner?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { loc: BigNumber; newOwner: string }
    >;

    AdminOwnershipChanged(
      loc?: null,
      newOwner?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { loc: BigNumber; newOwner: string }
    >;

    "AdminPlanetCreated(uint256)"(
      loc?: null
    ): TypedEventFilter<[BigNumber], { loc: BigNumber }>;

    AdminPlanetCreated(
      loc?: null
    ): TypedEventFilter<[BigNumber], { loc: BigNumber }>;

    "PauseStateChanged(bool)"(
      paused?: null
    ): TypedEventFilter<[boolean], { paused: boolean }>;

    PauseStateChanged(
      paused?: null
    ): TypedEventFilter<[boolean], { paused: boolean }>;
  };

  estimateGas: {
    addScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminGiveSpaceShip(
      locationId: BigNumberish,
      owner: string,
      artifactType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminInitializePlanet(
      locationId: BigNumberish,
      perlin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminSetWorldRadius(
      _newRadius: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeLocationRevealCooldown(
      newCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeWorldRadiusMin(
      _newConstant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPlanet(
      args: {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deductScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeSetOwner(
      newOwner: string,
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      planetId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlanetTransferEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenMintEndTime(
      newTokenMintEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminGiveSpaceShip(
      locationId: BigNumberish,
      owner: string,
      artifactType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminInitializePlanet(
      locationId: BigNumberish,
      perlin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminSetWorldRadius(
      _newRadius: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeLocationRevealCooldown(
      newCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeWorldRadiusMin(
      _newConstant: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPlanet(
      args: {
        location: BigNumberish;
        perlin: BigNumberish;
        level: BigNumberish;
        planetType: BigNumberish;
        requireValidLocationId: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deductScore(
      playerAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeSetOwner(
      newOwner: string,
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      _input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      planetId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlanetTransferEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenMintEndTime(
      newTokenMintEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
