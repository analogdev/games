{"version":3,"file":"location.js","sourceRoot":"","sources":["../src/location.ts"],"names":[],"mappings":";;;;;;AAAA,yDAA2D;AAE3D,8DAAiD;AAGjD;;;;;;;;;GASG;AACH,SAAgB,oBAAoB,CAAC,QAAgB;IACnD,MAAM,UAAU,GAAG,IAAA,qBAAM,EAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IACxC,IAAI,UAAU,CAAC,GAAG,CAAC,0BAAc,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAC5E,IAAI,GAAG,GAAG,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAClC,OAAO,GAAG,CAAC,MAAM,GAAG,EAAE;QAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;IACxC,OAAO,GAAiB,CAAC;AAC3B,CAAC;AAND,oDAMC;AAED;;;;;;;;;GASG;AACH,SAAgB,oBAAoB,CAAC,QAAgB;IACnD,MAAM,UAAU,GAAG,IAAA,qBAAM,EAAC,QAAQ,CAAC,CAAC;IACpC,IAAI,UAAU,CAAC,GAAG,CAAC,0BAAc,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAC5E,IAAI,GAAG,GAAG,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAClC,OAAO,GAAG,CAAC,MAAM,GAAG,EAAE;QAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;IACxC,OAAO,GAAiB,CAAC;AAC3B,CAAC;AAND,oDAMC;AAED;;;;;;;;GAQG;AACH,SAAgB,oBAAoB,CAAC,QAAoB;IACvD,MAAM,UAAU,GAAG,IAAA,qBAAM,EAAC,QAAQ,CAAC,CAAC;IACpC,IAAI,UAAU,CAAC,GAAG,CAAC,0BAAc,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAC5E,IAAI,GAAG,GAAG,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAClC,OAAO,GAAG,CAAC,MAAM,GAAG,EAAE;QAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;IACxC,OAAO,GAAiB,CAAC;AAC3B,CAAC;AAND,oDAMC;AAED;;;;;;;;GAQG;AACH,SAAgB,sBAAsB,CAAC,QAAkB;IACvD,OAAO,oBAAoB,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;AACnD,CAAC;AAFD,wDAEC;AAED;;;;;GAKG;AACH,SAAgB,kBAAkB,CAAC,UAAsB;IACvD,OAAO,IAAA,qBAAM,EAAC,UAAU,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC7C,CAAC;AAFD,gDAEC","sourcesContent":["import { LOCATION_ID_UB } from '@darkforest_eth/constants';\nimport type { LocationId } from '@darkforest_eth/types';\nimport bigInt, { BigInteger } from 'big-integer';\nimport type { BigNumber as EthersBN } from 'ethers';\n\n/**\n * Converts a possibly 0x-prefixed string of hex digits to a `LocationId`: a\n * non-0x-prefixed all lowercase hex string of exactly 64 hex characters\n * (0-padded if necessary). LocationIDs should only be instantiated through\n * `locationIdFromHexStr`, `locationIdFromDecStr`, `locationIdFromBigInt`, and\n * `locationIdFromEthersBN`.\n *\n * @param location A possibly 0x-prefixed `string` of hex digits representing a\n * location ID.\n */\nexport function locationIdFromHexStr(location: string) {\n  const locationBI = bigInt(location, 16);\n  if (locationBI.geq(LOCATION_ID_UB)) throw new Error('not a valid location');\n  let ret = locationBI.toString(16);\n  while (ret.length < 64) ret = '0' + ret;\n  return ret as LocationId;\n}\n\n/**\n * Converts a string representing a decimal number into a LocationID: a\n * non-0x-prefixed all lowercase hex string of exactly 64 hex characters\n * (0-padded if necessary). LocationIDs should only be instantiated through\n * `locationIdFromHexStr`, `locationIdFromDecStr`, `locationIdFromBigInt`, and\n * `locationIdFromEthersBN`.\n *\n * @param location `string` of decimal digits, the base 10 representation of a\n * location ID.\n */\nexport function locationIdFromDecStr(location: string) {\n  const locationBI = bigInt(location);\n  if (locationBI.geq(LOCATION_ID_UB)) throw new Error('not a valid location');\n  let ret = locationBI.toString(16);\n  while (ret.length < 64) ret = '0' + ret;\n  return ret as LocationId;\n}\n\n/**\n * Converts a BigInteger representation of location ID into a LocationID: a\n * non-0x-prefixed all lowercase hex string of exactly 64 hex characters\n * (0-padded). LocationIDs should only be instantiated through\n * `locationIdFromHexStr`, `locationIdFromDecStr`, `locationIdFromBigInt`, and\n * `locationIdFromEthersBN`.\n *\n * @param location `BigInteger` representation of a location ID.\n */\nexport function locationIdFromBigInt(location: BigInteger): LocationId {\n  const locationBI = bigInt(location);\n  if (locationBI.geq(LOCATION_ID_UB)) throw new Error('not a valid location');\n  let ret = locationBI.toString(16);\n  while (ret.length < 64) ret = '0' + ret;\n  return ret as LocationId;\n}\n\n/**\n * Converts an ethers.js BigNumber (type aliased here as `EthersBN`)\n * representation of a location ID into a LocationID: a non-0x-prefixed all\n * lowercase hex string of exactly 64 hex characters (0-padded). LocationIDs\n * should only be instantiated through `locationIdFromHexStr`,\n * `locationIdFromDecStr`, `locationIdFromBigInt`, and `locationIdFromEthersBN`.\n *\n * @param location ethers.js `BigNumber` representation of a locationID.\n */\nexport function locationIdFromEthersBN(location: EthersBN): LocationId {\n  return locationIdFromDecStr(location.toString());\n}\n\n/**\n * Converts a LocationID to a decimal string with the same numerical value; can\n * be used if you need to pass an artifact ID into a web3 call.\n *\n * @param locationId LocationID to convert into a `string` of decimal digits\n */\nexport function locationIdToDecStr(locationId: LocationId): string {\n  return bigInt(locationId, 16).toString(10);\n}\n"]}