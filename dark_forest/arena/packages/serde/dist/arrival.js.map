{"version":3,"file":"arrival.js","sourceRoot":"","sources":["../src/arrival.ts"],"names":[],"mappings":";;;AAAA,yDAA+D;AAG/D,uCAAoC;AACpC,yCAAoD;AACpD,yCAAkD;AAIlD;;;;;;GAMG;AACH,SAAgB,aAAa,CAAC,UAAsB;IAClD,MAAM,OAAO,GAAkB;QAC7B,OAAO,EAAE,UAAU,CAAC,EAAE,CAAC,QAAQ,EAAc;QAC7C,MAAM,EAAE,IAAA,iBAAO,EAAC,UAAU,CAAC,MAAM,CAAC;QAClC,UAAU,EAAE,IAAA,+BAAoB,EAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QAClE,QAAQ,EAAE,IAAA,+BAAoB,EAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAC9D,cAAc,EAAE,UAAU,CAAC,WAAW,CAAC,QAAQ,EAAE,GAAG,8BAAkB;QACtE,WAAW,EAAE,UAAU,CAAC,WAAW,CAAC,QAAQ,EAAE,GAAG,8BAAkB;QACnE,aAAa,EAAE,UAAU,CAAC,aAAa,CAAC,QAAQ,EAAE;QAClD,WAAW,EAAE,UAAU,CAAC,WAAW,CAAC,QAAQ,EAAE;QAC9C,QAAQ,EAAE,UAAU,CAAC,QAAQ,CAAC,QAAQ,EAAE;QACxC,UAAU,EAAE,UAAU,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5C,CAAC,CAAC,SAAS;YACX,CAAC,CAAC,IAAA,iCAAsB,EAAC,UAAU,CAAC,iBAAiB,CAAC;QACxD,WAAW,EAAE,UAAU,CAAC,WAA0B;KACnD,CAAC;IAEF,OAAO,OAAO,CAAC;AACjB,CAAC;AAlBD,sCAkBC","sourcesContent":["import { CONTRACT_PRECISION } from '@darkforest_eth/constants';\nimport type { DarkForest } from '@darkforest_eth/contracts/typechain';\nimport type { ArrivalType, QueuedArrival, VoyageId } from '@darkforest_eth/types';\nimport { address } from './address';\nimport { artifactIdFromEthersBN } from './artifact';\nimport { locationIdFromDecStr } from './location';\n\nexport type RawArrival = Awaited<ReturnType<DarkForest['getPlanetArrival']>>;\n\n/**\n * Converts the raw typechain result of `ArrivalTypes.ArrivalData` struct to\n * to a `QueuedArrival` typescript typed object (see @darkforest_eth/types)\n *\n * @param rawArrival Raw data of a `ArrivalTypes.ArrivalData` struct,\n * returned from a blockchain call (assumed to be typed with typechain).\n */\nexport function decodeArrival(rawArrival: RawArrival): QueuedArrival {\n  const arrival: QueuedArrival = {\n    eventId: rawArrival.id.toString() as VoyageId,\n    player: address(rawArrival.player),\n    fromPlanet: locationIdFromDecStr(rawArrival.fromPlanet.toString()),\n    toPlanet: locationIdFromDecStr(rawArrival.toPlanet.toString()),\n    energyArriving: rawArrival.popArriving.toNumber() / CONTRACT_PRECISION,\n    silverMoved: rawArrival.silverMoved.toNumber() / CONTRACT_PRECISION,\n    departureTime: rawArrival.departureTime.toNumber(),\n    arrivalTime: rawArrival.arrivalTime.toNumber(),\n    distance: rawArrival.distance.toNumber(),\n    artifactId: rawArrival.carriedArtifactId.eq(0)\n      ? undefined\n      : artifactIdFromEthersBN(rawArrival.carriedArtifactId),\n    arrivalType: rawArrival.arrivalType as ArrivalType,\n  };\n\n  return arrival;\n}\n"]}