{"version":3,"file":"reveal.js","sourceRoot":"","sources":["../src/reveal.ts"],"names":[],"mappings":";;;;;;AAAA,yDAA2D;AAG3D,8DAAiC;AACjC,uCAAoC;AACpC,yCAAkD;AAIlD;;;;;;;GAOG;AACH,SAAgB,oBAAoB,CAAC,iBAAoC;IACvE,MAAM,UAAU,GAAG,IAAA,+BAAoB,EAAC,iBAAiB,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;IACjF,IAAI,GAAG,GAAG,IAAA,qBAAM,EAAC,iBAAiB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,4BAA4B;IAC9E,IAAI,GAAG,GAAG,IAAA,qBAAM,EAAC,iBAAiB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,4BAA4B;IAC9E,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,GAAG,CAAC,EAAE,CAAC,0BAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QACpC,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,0BAAc,CAAC,CAAC;KACjC;IACD,CAAC,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;IACrB,IAAI,GAAG,CAAC,EAAE,CAAC,0BAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QACpC,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,0BAAc,CAAC,CAAC;KACjC;IACD,CAAC,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;IACrB,OAAO;QACL,IAAI,EAAE,UAAU;QAChB,CAAC;QACD,CAAC;QACD,QAAQ,EAAE,IAAA,iBAAO,EAAC,iBAAiB,CAAC,QAAQ,CAAC;KAC9C,CAAC;AACJ,CAAC;AApBD,oDAoBC","sourcesContent":["import { LOCATION_ID_UB } from '@darkforest_eth/constants';\nimport type { DarkForest } from '@darkforest_eth/contracts/typechain';\nimport type { RevealedCoords } from '@darkforest_eth/types';\nimport bigInt from 'big-integer';\nimport { address } from './address';\nimport { locationIdFromDecStr } from './location';\n\nexport type RawRevealedCoords = Awaited<ReturnType<DarkForest['revealedCoords']>>;\n\n/**\n * Converts the result of a typechain-typed ethers.js contract call returning a\n * `RevealTypes.RevealedCoords` struct into a `RevealedCoords` object (see\n * @darkforest_eth/types)\n *\n * @param rawRevealedCoords the result of a typechain-typed ethers.js contract\n * call returning a RevealTypes.RevealedCoords` struct\n */\nexport function decodeRevealedCoords(rawRevealedCoords: RawRevealedCoords): RevealedCoords {\n  const locationId = locationIdFromDecStr(rawRevealedCoords.locationId.toString());\n  let xBI = bigInt(rawRevealedCoords.x.toString()); // nonnegative residue mod p\n  let yBI = bigInt(rawRevealedCoords.y.toString()); // nonnegative residue mod p\n  let x = 0;\n  let y = 0;\n  if (xBI.gt(LOCATION_ID_UB.divide(2))) {\n    xBI = xBI.minus(LOCATION_ID_UB);\n  }\n  x = xBI.toJSNumber();\n  if (yBI.gt(LOCATION_ID_UB.divide(2))) {\n    yBI = yBI.minus(LOCATION_ID_UB);\n  }\n  y = yBI.toJSNumber();\n  return {\n    hash: locationId,\n    x,\n    y,\n    revealer: address(rawRevealedCoords.revealer),\n  };\n}\n"]}