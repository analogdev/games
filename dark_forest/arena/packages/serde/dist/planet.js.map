{"version":3,"file":"planet.js","sourceRoot":"","sources":["../src/planet.ts"],"names":[],"mappings":"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","sourcesContent":["import { CONTRACT_PRECISION } from '@darkforest_eth/constants';\nimport type { DarkForest } from '@darkforest_eth/contracts/typechain';\nimport { bonusFromHex } from '@darkforest_eth/hexgen';\nimport type {\n  Planet,\n  PlanetDefaults,\n  PlanetLevel,\n  PlanetType,\n  SpaceType,\n} from '@darkforest_eth/types';\nimport { address } from './address';\nimport { locationIdFromDecStr } from './location';\n\nexport type RawPlanet = Awaited<ReturnType<DarkForest['planets']>>;\nexport type RawPlanetExtendedInfo = Awaited<ReturnType<DarkForest['planetsExtendedInfo']>>;\nexport type RawPlanetExtendedInfo2 = Awaited<ReturnType<DarkForest['planetsExtendedInfo2']>>;\nexport type RawPlanetArenaInfo = Awaited<ReturnType<DarkForest['planetsArenaInfo']>>;\n\n/**\n * Converts data obtained from a contract call (typed with Typechain) into a\n * `Planet` that can be used by the client (see @darkforest_eth/types). Note\n * that some `Planet` fields (1) store client data that the blockchain is not\n * aware of, such as `unconfirmedDepartures`, (2) store derived data that is\n * calculated later by the client, such as `silverSpent` and `bonus`, or (3)\n * store data which must be added later from the results of additional contract\n * calls, such as `coordsRevealed` and `heldArtifactIds`. Therefore this\n * function may not be very useful to you outside of the specific context of the\n * provided Dark Forest web client.\n *\n * @param rawLocationId string of decimal digits representing a number equal to\n * a planet's ID\n * @param rawPlanet typechain-typed result of a call returning a\n * `PlanetTypes.Planet`\n * @param rawPlanetExtendedInfo typechain-typed result of a call returning a\n * `PlanetTypes.PlanetExtendedInfo`\n * @param rawPlanetExtendedInfo2 typechain-typed result of a call returning a\n * `PlanetTypes.PlanetExtendedInfo2`\n *  * @param rawPlanetArenaInfo typechain-typed result of a call returning a\n * `PlanetTypes.PlanetArenaInfo`\n */\nexport function decodePlanet(\n  rawLocationId: string,\n  rawPlanet: RawPlanet,\n  rawPlanetExtendedInfo: RawPlanetExtendedInfo,\n  rawPlanetExtendedInfo2: RawPlanetExtendedInfo2,\n  rawPlanetArenaInfo: RawPlanetArenaInfo\n): Planet {\n  const locationId = locationIdFromDecStr(rawLocationId.toString());\n\n  const planet: Planet = {\n    locationId: locationId,\n    perlin: rawPlanetExtendedInfo.perlin.toNumber(),\n    spaceType: rawPlanetExtendedInfo.spaceType as SpaceType,\n    owner: address(rawPlanet.owner),\n    hatLevel: rawPlanetExtendedInfo.hatLevel.toNumber(),\n\n    planetLevel: rawPlanet.planetLevel.toNumber() as PlanetLevel,\n    planetType: rawPlanet.planetType as PlanetType,\n    isHomePlanet: rawPlanet.isHomePlanet,\n\n    energyCap: rawPlanet.populationCap.toNumber() / CONTRACT_PRECISION,\n    energyGrowth: rawPlanet.populationGrowth.toNumber() / CONTRACT_PRECISION,\n\n    silverCap: rawPlanet.silverCap.toNumber() / CONTRACT_PRECISION,\n    silverGrowth: rawPlanet.silverGrowth.toNumber() / CONTRACT_PRECISION,\n\n    energy: rawPlanet.population.toNumber() / CONTRACT_PRECISION,\n    silver: rawPlanet.silver.toNumber() / CONTRACT_PRECISION,\n\n    range: rawPlanet.range.toNumber(),\n    speed: rawPlanet.speed.toNumber(),\n    defense: rawPlanet.defense.toNumber(),\n\n    spaceJunk: rawPlanetExtendedInfo.spaceJunk.toNumber(),\n\n    // metadata\n    lastUpdated: rawPlanetExtendedInfo.lastUpdated.toNumber(),\n    upgradeState: [\n      rawPlanetExtendedInfo.upgradeState0.toNumber(),\n      rawPlanetExtendedInfo.upgradeState1.toNumber(),\n      rawPlanetExtendedInfo.upgradeState2.toNumber(),\n    ],\n    unconfirmedClearEmoji: false,\n    unconfirmedAddEmoji: false,\n    loadingServerState: false,\n    needsServerRefresh: true,\n    silverSpent: 0, // this is stale and will be updated in GameObjects\n    coordsRevealed: false, // this is stale and will be updated in GameObjects\n\n    isInContract: true,\n    syncedWithContract: true,\n    hasTriedFindingArtifact: rawPlanetExtendedInfo[9],\n    prospectedBlockNumber: rawPlanetExtendedInfo.prospectedBlockNumber.eq(0)\n      ? undefined\n      : rawPlanetExtendedInfo.prospectedBlockNumber.toNumber(),\n    destroyed: rawPlanetExtendedInfo[11],\n    heldArtifactIds: [], // this is stale and will be updated in GameObjects\n    bonus: bonusFromHex(locationId),\n    pausers: rawPlanetExtendedInfo2.pausers.toNumber(),\n\n    invader: address(rawPlanetExtendedInfo2.invader),\n    capturer: address(rawPlanetExtendedInfo2.capturer),\n    invadeStartBlock: rawPlanetExtendedInfo2.invadeStartBlock.eq(0)\n      ? undefined\n      : rawPlanetExtendedInfo2.invadeStartBlock.toNumber(),\n\n    isTargetPlanet: rawPlanetArenaInfo.targetPlanet,\n    isSpawnPlanet: rawPlanetArenaInfo.spawnPlanet,\n    blockedPlanetIds: rawPlanetArenaInfo.blockedPlanetIds.map(v => locationIdFromDecStr(v.toString())),\n  };\n\n  return planet;\n}\n\ntype RawDefaults = Awaited<ReturnType<DarkForest['getDefaultStats']>>;\n\n/**\n * Converts the raw typechain result of a call which fetches a\n * `PlanetTypes.PlanetDefaultStats[]` array of structs, and converts it into\n * an object with type `PlanetDefaults` (see @darkforest_eth/types).\n *\n * @param rawDefaults result of a ethers.js contract call which returns a raw\n * `PlanetTypes.PlanetDefaultStats` struct, typed with typechain.\n */\nexport function decodePlanetDefaults(rawDefaults: RawDefaults): PlanetDefaults {\n  return {\n    populationCap: rawDefaults.map((x) => x[1].toNumber() / CONTRACT_PRECISION),\n    populationGrowth: rawDefaults.map((x) => x[2].toNumber() / CONTRACT_PRECISION),\n    range: rawDefaults.map((x) => x[3].toNumber()),\n    speed: rawDefaults.map((x) => x[4].toNumber()),\n    defense: rawDefaults.map((x) => x[5].toNumber()),\n    silverGrowth: rawDefaults.map((x) => x[6].toNumber() / CONTRACT_PRECISION),\n    silverCap: rawDefaults.map((x) => x[7].toNumber() / CONTRACT_PRECISION),\n    barbarianPercentage: rawDefaults.map((x) => x[8].toNumber()),\n  };\n}\n"]}