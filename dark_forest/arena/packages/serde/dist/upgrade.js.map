{"version":3,"file":"upgrade.js","sourceRoot":"","sources":["../src/upgrade.ts"],"names":[],"mappings":";;;AAOA;;;;;;;GAOG;AACH,SAAgB,aAAa,CAAC,UAAsB;IAClD,OAAO;QACL,mBAAmB,EAAE,UAAU,CAAC,gBAAgB,CAAC,QAAQ,EAAE;QAC3D,mBAAmB,EAAE,UAAU,CAAC,gBAAgB,CAAC,QAAQ,EAAE;QAC3D,eAAe,EAAE,UAAU,CAAC,eAAe,CAAC,QAAQ,EAAE;QACtD,eAAe,EAAE,UAAU,CAAC,eAAe,CAAC,QAAQ,EAAE;QACtD,aAAa,EAAE,UAAU,CAAC,aAAa,CAAC,QAAQ,EAAE;KACnD,CAAC;AACJ,CAAC;AARD,sCAQC;AAED;;;;;;GAMG;AACH,SAAgB,qBAAqB,CAAC,kBAAuC;IAC3E,OAAO,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAoB,CAAC;AAChF,CAAC;AAFD,sDAEC","sourcesContent":["import type { DarkForest } from '@darkforest_eth/contracts/typechain';\nimport type { Upgrade, UpgradeBranches } from '@darkforest_eth/types';\n\n// Sort of duplicate of RawArtifactWithMetadata to avoid circular dependency\nexport type RawUpgrade = Awaited<ReturnType<DarkForest['getArtifactById']>>['upgrade'];\nexport type RawUpgradesBranches = Awaited<ReturnType<DarkForest['getUpgrades']>>;\n\n/**\n * Converts raw data received from a typechain-typed ethers.js contract call\n * returning a `UpgradeTypes.Upgrade` into an `Upgrade` object (see\n * @darkforest_eth/types)\n *\n * @param rawUpgrade raw data received from a typechain-typed ethers.js contract\n * call returning a `UpgradeTypes.Upgrade`\n */\nexport function decodeUpgrade(rawUpgrade: RawUpgrade): Upgrade {\n  return {\n    energyCapMultiplier: rawUpgrade.popCapMultiplier.toNumber(),\n    energyGroMultiplier: rawUpgrade.popGroMultiplier.toNumber(),\n    rangeMultiplier: rawUpgrade.rangeMultiplier.toNumber(),\n    speedMultiplier: rawUpgrade.speedMultiplier.toNumber(),\n    defMultiplier: rawUpgrade.defMultiplier.toNumber(),\n  };\n}\n\n/**\n * Converts the raw return value of an ether.js contract call to\n * `DarkForest.getUpgrades` to a 2D array of `Upgrade`s.\n *\n * @param rawUpgradeBranches raw return value of ether.js contract call to\n * `DarkForest.getUpgrades`\n */\nexport function decodeUpgradeBranches(rawUpgradeBranches: RawUpgradesBranches): UpgradeBranches {\n  return rawUpgradeBranches.map((a) => a.map(decodeUpgrade)) as UpgradeBranches;\n}\n"]}