{"version":3,"file":"artifact.js","sourceRoot":"","sources":["../src/artifact.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DarkForest } from '@darkforest_eth/contracts/typechain';\nimport type { Artifact, ArtifactId, ArtifactPointValues, VoyageId } from '@darkforest_eth/types';\nimport { ArtifactRarity, ArtifactType, Biome } from '@darkforest_eth/types';\nimport bigInt from 'big-integer';\nimport type { BigNumber as EthersBN } from 'ethers';\nimport { address } from './address';\nimport { locationIdFromDecStr, locationIdFromEthersBN } from './location';\nimport { decodeUpgrade } from './upgrade';\n\n/**\n * Converts a possibly 0x-prefixed string of hex digits to an `ArtifactId`: a\n * non-0x-prefixed all lowercase hex string of exactly 64 hex characters\n * (0-padded if necessary). ArtifactIDs should only be instantiated through\n * `artifactIdFromHexStr`, `artifactIdFromDecStr`, and `artifactIdFromEthersBN`.\n *\n * @param artifactId Possibly 0x-prefixed, possibly unpadded hex `string`\n * representation of an artifact's ID.\n */\nexport function artifactIdFromHexStr(artifactId: string): ArtifactId {\n  const artifactIdBI = bigInt(artifactId, 16);\n  let ret = artifactIdBI.toString(16);\n  if (ret.length > 64) throw new Error('not a valid artifact id');\n  while (ret.length < 64) ret = '0' + ret;\n  return ret as ArtifactId;\n}\n\n/**\n * Converts a string representing a decimal number into an ArtifactID: a\n * non-0x-prefixed all lowercase hex string of exactly 64 hex characters\n * (0-padded if necessary). ArtifactIDs should only be instantiated through\n * `artifactIdFromHexStr`, `artifactIdFromDecStr`, and `artifactIdFromEthersBN`.\n *\n * @param artifactId `string` of decimal digits, the base 10 representation of an\n * artifact ID.\n */\nexport function artifactIdFromDecStr(artifactId: string): ArtifactId {\n  const locationBI = bigInt(artifactId);\n  let ret = locationBI.toString(16);\n  while (ret.length < 64) ret = '0' + ret;\n  return ret as ArtifactId;\n}\n\n/**\n * Converts a ethers.js BigNumber (type aliased here as EthersBN) representing a\n * decimal number into an ArtifactID: a non-0x-prefixed all lowercase hex string\n * of exactly 64 hex characters (0-padded if necessary). ArtifactIDs should only\n * be instantiated through `artifactIdFromHexStr`, `artifactIdFromDecStr`, and\n * `artifactIdFromEthersBN`.\n *\n * @param artifactId ether.js `BigNumber` representing artifact's ID\n */\nexport function artifactIdFromEthersBN(artifactId: EthersBN): ArtifactId {\n  return artifactIdFromDecStr(artifactId.toString());\n}\n\n/**\n * Converts an ArtifactID to a decimal string with equivalent numerical value;\n * can be used if you need to pass an artifact ID into a web3 call.\n *\n * @param artifactId non-0x-prefixed lowercase hex `string` of 64 hex characters\n * representing an artifact's ID\n */\nexport function artifactIdToDecStr(artifactId: ArtifactId): string {\n  return bigInt(artifactId, 16).toString(10);\n}\n\nexport type RawArtifactPointValues = Awaited<ReturnType<DarkForest['getArtifactPointValues']>>;\n\n/**\n * Converts the raw typechain result of a call to\n * `DarkForest.getArtifactPointValues` to an `ArtifactPointValues`\n * typescript typed object (see @darkforest_eth/types).\n */\nexport function decodeArtifactPointValues(\n  rawPointValues: RawArtifactPointValues\n): ArtifactPointValues {\n  return {\n    [ArtifactRarity.Unknown]: rawPointValues[ArtifactRarity.Unknown].toNumber(),\n    [ArtifactRarity.Common]: rawPointValues[ArtifactRarity.Common].toNumber(),\n    [ArtifactRarity.Rare]: rawPointValues[ArtifactRarity.Rare].toNumber(),\n    [ArtifactRarity.Epic]: rawPointValues[ArtifactRarity.Epic].toNumber(),\n    [ArtifactRarity.Legendary]: rawPointValues[ArtifactRarity.Legendary].toNumber(),\n    [ArtifactRarity.Mythic]: rawPointValues[ArtifactRarity.Mythic].toNumber(),\n  };\n}\n\nexport type RawArtifactWithMetadata = Awaited<ReturnType<DarkForest['getArtifactById']>>;\n\n/**\n * Converts the raw typechain result of `ArtifactTypes.ArtifactWithMetadata`\n * struct to an `Artifact` typescript typed object (see @darkforest_eth/types).\n *\n * @param rawArtifactWithMetadata Raw data of an `ArtifactWithMetadata` struct,\n * returned from a blockchain call (assumed to be typed with typechain).\n */\nexport function decodeArtifact(rawArtifactWithMetadata: RawArtifactWithMetadata): Artifact {\n  const { artifact, owner, upgrade, timeDelayedUpgrade, locationId, voyageId } =\n    rawArtifactWithMetadata;\n\n  return {\n    isInititalized: artifact.isInitialized,\n    id: artifactIdFromEthersBN(artifact.id),\n    planetDiscoveredOn: locationIdFromDecStr(artifact.planetDiscoveredOn.toString()),\n    rarity: artifact.rarity as ArtifactRarity,\n    planetBiome: artifact.planetBiome as Biome,\n    mintedAtTimestamp: artifact.mintedAtTimestamp.toNumber(),\n    discoverer: address(artifact.discoverer),\n    artifactType: artifact.artifactType as ArtifactType,\n    activations: artifact.activations.toNumber(),\n    lastActivated: artifact.lastActivated.toNumber(),\n    lastDeactivated: artifact.lastDeactivated.toNumber(),\n    controller: address(artifact.controller),\n    wormholeTo: artifact.wormholeTo.eq(0) ? undefined : locationIdFromEthersBN(artifact.wormholeTo),\n    currentOwner: address(owner),\n    upgrade: decodeUpgrade(upgrade),\n    timeDelayedUpgrade: decodeUpgrade(timeDelayedUpgrade),\n    onPlanetId: locationId.eq(0) ? undefined : locationIdFromEthersBN(locationId),\n    onVoyageId: voyageId.eq(0) ? undefined : (voyageId.toString() as VoyageId),\n  };\n}\n"]}