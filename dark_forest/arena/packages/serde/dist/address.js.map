{"version":3,"file":"address.js","sourceRoot":"","sources":["../src/address.ts"],"names":[],"mappings":";;;;;;AACA,8DAAiC;AACjC,mCAAgC;AAEhC;;;;;;;GAOG;AAEH,SAAgB,SAAS,CAAC,GAAW;IACnC,OAAO,eAAM,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AACrC,CAAC;AAFD,8BAEC;AACD,SAAgB,OAAO,CAAC,GAAW;IACjC,IAAI,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;IAC5B,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;QAC5B,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KACpB;IACD,KAAK,MAAM,CAAC,IAAI,GAAG,EAAE;QACnB,IAAI,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;KAClF;IACD,IAAI,GAAG,CAAC,MAAM,KAAK,EAAE;QAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IAC9D,OAAO,KAAK,GAAG,EAAgB,CAAC;AAClC,CAAC;AAVD,0BAUC;AAED,SAAgB,SAAS,CAAC,IAAY;IACpC,MAAM,IAAI,GAAG,IAAA,qBAAM,EAAC,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC7D,OAAO,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;AAC/B,CAAC;AAHD,8BAGC","sourcesContent":["import type { EthAddress } from '@darkforest_eth/types';\nimport bigInt from 'big-integer';\nimport { ethers } from 'ethers';\n\n/**\n * Converts a string to an `EthAddress`: a 0x-prefixed all lowercase hex string\n * of 40 hex characters. An object of the `EthAddress` type should only ever be\n * initialized through this constructor-like method. Throws if the provided\n * string cannot be parsed as an Ethereum address.\n *\n * @param str An address-like `string`\n */\n\nexport function isAddress(str: string): boolean {\n  return ethers.utils.isAddress(str);\n}\nexport function address(str: string): EthAddress {\n  let ret = str.toLowerCase();\n  if (ret.slice(0, 2) === '0x') {\n    ret = ret.slice(2);\n  }\n  for (const c of ret) {\n    if ('0123456789abcdef'.indexOf(c) === -1) throw new Error('not a valid address');\n  }\n  if (ret.length !== 40) throw new Error('not a valid address');\n  return `0x${ret}` as EthAddress;\n}\n\nexport function hashToInt(hash: string): number {\n  const seed = bigInt(hash, 16).and(0xffffffffff).toString(16);\n  return parseInt('0x' + seed);\n}\n"]}