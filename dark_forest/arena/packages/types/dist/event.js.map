{"version":3,"file":"event.js","sourceRoot":"","sources":["../src/event.ts"],"names":[],"mappings":"","sourcesContent":["import type { AutoGasSetting } from './setting';\n\n/**\n * Each time a transaction either reverts or confirms we send an event to the webserver with this\n * diagnostic info about the transaction, so that we can analyze the performance of the network in\n * aggregate across our player-base.\n */\nexport interface NetworkEvent {\n  /**\n   * Contract address to which the transaction was sent.\n   */\n  tx_to: string;\n\n  /**\n   * Function name that the transaction is calling on the contract.\n   */\n  tx_type: string;\n\n  /**\n   * Timestamp of when the transaction was first uploaded to the network.\n   */\n  time_exec_called: number;\n\n  /**\n   * If the user has specified that they want to use an auto gas setting (which is the case by\n   * default in our client), then this value contains the string representation of that setting. In\n   * certain cases this can also be a string number.\n   */\n  auto_gas_price_setting?: string | AutoGasSetting;\n\n  /**\n   * The url of the node fleet this transaction was sent to.\n   */\n  rpc_endpoint?: string;\n\n  /**\n   * If the transaction was confirmed, this is the transaction hash.\n   */\n  tx_hash?: string;\n\n  /**\n   * The address on behalf of which this transaction was sent.\n   */\n  user_address?: string;\n\n  /**\n   * The amount of time the client had to wait until the transaction was submitted to the pool.\n   */\n  wait_submit?: number;\n\n  /**\n   * If the transaction confirmed, the amount of time the client had to wait before it became aware\n   * of the confirmation.\n   */\n  wait_confirm?: number;\n\n  /**\n   * If the transaction confirmed, the amount of time the client had to wait before it became aware\n   * of the confirmation.\n   */\n  wait_error?: number;\n\n  /**\n   * If there was an error executing this transaction, contains a stringified version of that error.\n   */\n  error?: string;\n\n  /**\n   * If the error was returned as a byte string, contains a parsed version of that error.\n   */\n  parsed_error?: string;\n}\n"]}