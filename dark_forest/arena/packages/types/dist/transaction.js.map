{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../src/transaction.ts"],"names":[],"mappings":"","sourcesContent":["import type { providers } from 'ethers';\nimport type { AutoGasSetting } from './setting';\nimport type { EthTxStatus, TxIntent } from './transactions';\n\nexport interface TransactionCollection {\n  addTransaction(tx: Transaction): void;\n\n  removeTransaction(tx: Transaction): void;\n\n  getTransactions<T extends TxIntent>(\n    transactionPredicate: (u: Transaction) => u is Transaction<T>\n  ): Transaction<T>[];\n\n  hasTransaction<T extends TxIntent>(\n    transactionPredicate: (u: Transaction) => u is Transaction<T>\n  ): boolean;\n}\n\nexport interface PersistedTransaction<T extends TxIntent | unknown = TxIntent> {\n  intent: T;\n  hash: string;\n}\n\n/**\n * A unique incrementing number that identifies a transaction.\n */\nexport type TransactionId = number;\n\n/**\n * Represents a transaction that the game would like to submit to the blockchain.\n */\nexport interface Transaction<T extends TxIntent = TxIntent> {\n  /**\n   * In-game representation of this transaction.\n   */\n  intent: T;\n\n  /**\n   * Uniquely identifies this transaction. Invariant throughout the entire life of a transaction,\n   * from the moment the game conceives of taking that action, to the moment that it finishes either\n   * successfully or with an error.\n   */\n  id: TransactionId;\n\n  /**\n   * The timestamp of the last time this transaction's state was updated.\n   */\n  lastUpdatedAt: number;\n\n  /**\n   * Once this transaction has been submitted to the blockchain (but not before), then\n   * {@code TxExecutor} sets this field to the hash of the transaction.\n   */\n  hash?: string;\n\n  /**\n   * The current state of this transaction - updated whenever the state changes by {@code TxExecutor}\n   */\n  state: EthTxStatus;\n\n  /**\n   * Overrides parameters which modifies the internal details of this transaction.\n   */\n  overrides?: providers.TransactionRequest;\n\n  /**\n   * Called if there was an error submitting this transaction.\n   */\n  onSubmissionError: (e: Error | undefined) => void;\n\n  /**\n   * Called if there was an error waiting for this transaction to complete.\n   */\n  onReceiptError: (e: Error | undefined) => void;\n\n  /**\n   * Called when the transaction was successfully submitted to the mempool.\n   */\n  onTransactionResponse: (e: providers.TransactionResponse) => void;\n\n  /**\n   * Called when the transaction successfully completes.\n   */\n  onTransactionReceipt: (e: providers.TransactionReceipt) => void;\n\n  /**\n   * If the user provided an auto gas setting, record that here for logging purposes.\n   */\n  autoGasPriceSetting?: AutoGasSetting | string;\n\n  /**\n   * Resolves or rejects depending on the success or failure of this transaction to get into the\n   * mempool. If this rejects, {@link PendingTransaction.confirmed} neither rejects nor resolves.\n   */\n  submittedPromise: Promise<providers.TransactionResponse>;\n\n  /**\n   * Resolves or rejects depending on the success or failure of this transaction to execute.\n   */\n  confirmedPromise: Promise<providers.TransactionReceipt>;\n}\n"]}