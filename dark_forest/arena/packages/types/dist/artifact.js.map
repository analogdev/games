{"version":3,"file":"artifact.js","sourceRoot":"","sources":["../src/artifact.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Biome } from './game_types';\nimport type { ArtifactId, EthAddress, LocationId, VoyageId } from './identifier';\nimport type { TransactionCollection } from './transaction';\nimport type { Upgrade } from './upgrade';\nimport type { Abstract } from './utility';\n\n/**\n * Abstract type representing an artifact type.\n */\nexport type ArtifactType = Abstract<number, 'ArtifactType'>;\n\n/**\n * Enumeration of artifact types.\n */\nexport const ArtifactType = {\n  Unknown: 0 as ArtifactType,\n  Monolith: 1 as ArtifactType,\n  Colossus: 2 as ArtifactType,\n  Spaceship: 3 as ArtifactType,\n  Pyramid: 4 as ArtifactType,\n  Wormhole: 5 as ArtifactType,\n  PlanetaryShield: 6 as ArtifactType,\n  PhotoidCannon: 7 as ArtifactType,\n  BloomFilter: 8 as ArtifactType,\n  BlackDomain: 9 as ArtifactType,\n  ShipMothership: 10 as ArtifactType,\n  ShipCrescent: 11 as ArtifactType,\n  ShipWhale: 12 as ArtifactType,\n  ShipGear: 13 as ArtifactType,\n  ShipTitan: 14 as ArtifactType,\n\n  // Don't forget to update MIN_ARTIFACT_TYPE and/or MAX_ARTIFACT_TYPE in the `constants` package\n} as const;\n\n/**\n * Mapping from ArtifactType to pretty-printed names.\n */\nexport const ArtifactTypeNames = {\n  [ArtifactType.Unknown]: 'Unknown',\n  [ArtifactType.Monolith]: 'Monolith',\n  [ArtifactType.Colossus]: 'Colossus',\n  [ArtifactType.Spaceship]: 'Spaceship',\n  [ArtifactType.Pyramid]: 'Pyramid',\n  [ArtifactType.Wormhole]: 'Wormhole',\n  [ArtifactType.PlanetaryShield]: 'Planetary Shield',\n  [ArtifactType.BlackDomain]: 'Black Domain',\n  [ArtifactType.PhotoidCannon]: 'Photoid Cannon',\n  [ArtifactType.BloomFilter]: 'Bloom Filter',\n  [ArtifactType.ShipMothership]: 'Mothership',\n  [ArtifactType.ShipCrescent]: 'Crescent',\n  [ArtifactType.ShipWhale]: 'Whale',\n  [ArtifactType.ShipGear]: 'Gear',\n  [ArtifactType.ShipTitan]: 'Titan',\n} as const;\n\n/**\n * Abstract type representing an artifact rarity level.\n */\nexport type ArtifactRarity = Abstract<number, 'ArtifactRarity'>;\n\n/**\n * Enumeration of artifact rarity levels. Common = 1, Mythic = 5\n */\nexport const ArtifactRarity = {\n  Unknown: 0 as ArtifactRarity,\n  Common: 1 as ArtifactRarity,\n  Rare: 2 as ArtifactRarity,\n  Epic: 3 as ArtifactRarity,\n  Legendary: 4 as ArtifactRarity,\n  Mythic: 5 as ArtifactRarity,\n  // Don't forget to update MIN_ARTIFACT_RARITY and/or MAX_ARTIFACT_RARITY in the `constants` package\n} as const;\n\n/**\n * Mapping from ArtifactRarity to pretty-printed names.\n */\nexport const ArtifactRarityNames = {\n  [ArtifactRarity.Unknown]: 'Unknown',\n  [ArtifactRarity.Common]: 'Common',\n  [ArtifactRarity.Rare]: 'Rare',\n  [ArtifactRarity.Epic]: 'Epic',\n  [ArtifactRarity.Legendary]: 'Legendary',\n  [ArtifactRarity.Mythic]: 'Mythic',\n} as const;\n\n/**\n * mapping from ArtifactRarity to points earned for finding this artifact.\n */\nexport type ArtifactPointValues = { [ArtifactRarity: number]: number };\n\n/**\n * Represents data associated with a Dark Forest artifact NFT. Note\n * that some `Artifact` fields store client-specific data that the blockchain is\n * not aware of, such as `unconfirmedDepositArtifact` (tracks pending\n * depositArtifact transaction that involves this artifact). If you're using a\n * client that can't send transactions, these fields should be ignored.\n */\nexport type Artifact = {\n  isInititalized: boolean;\n  id: ArtifactId;\n  planetDiscoveredOn: LocationId;\n  rarity: ArtifactRarity;\n  planetBiome: Biome;\n  mintedAtTimestamp: number;\n  discoverer: EthAddress;\n  artifactType: ArtifactType;\n  activations: number;\n  lastActivated: number;\n  lastDeactivated: number;\n  controller: EthAddress;\n\n  upgrade: Upgrade;\n  timeDelayedUpgrade: Upgrade;\n  currentOwner: EthAddress; // owner of the NFT - can be the contract\n  wormholeTo?: LocationId;\n  onPlanetId?: LocationId;\n  onVoyageId?: VoyageId;\n\n  transactions?: TransactionCollection;\n};\n\n// TODO: get this out of here\n\nconst godGrammar = {\n  god1: [\n    \"c'\",\n    'za',\n    \"ry'\",\n    \"ab'\",\n    \"bak'\",\n    \"dt'\",\n    \"ek'\",\n    \"fah'\",\n    \"q'\",\n    'qo',\n    'van',\n    'bow',\n    'gui',\n    'si',\n  ],\n  god2: [\n    'thun',\n    'tchalla',\n    'thovo',\n    'saron',\n    'zoth',\n    'sharrj',\n    'thulu',\n    'ra',\n    'wer',\n    'doin',\n    'renstad',\n    'nevere',\n    'goth',\n    'anton',\n    'layton',\n  ],\n};\n\n/**\n * Deterministically generates the name of the artifact from its ID.\n *\n * @param artifact The artifact to generate a name for\n */\nexport function artifactNameFromArtifact(artifact: Artifact) {\n  const idNum = parseInt(artifact.id, 16);\n\n  const roll1 = (idNum % 7919) % godGrammar.god1.length; // 7919 is a big prime\n  const roll2 = (idNum % 7883) % godGrammar.god2.length; // 7883 is a big prime\n\n  const name = godGrammar.god1[roll1] + godGrammar.god2[roll2];\n  const nameCapitalized = name.charAt(0).toUpperCase() + name.slice(1);\n\n  return nameCapitalized;\n}\n\n/**\n * type interface for ERC721 metadata.\n */\n\ntype NFTAttribute = {\n  trait_type: string;\n  value: string | number;\n  display_type?: string;\n};\nexport type NFTMetadata = {\n  name: string;\n  description: string;\n  image: string;\n  attributes: NFTAttribute[];\n};\n\nexport interface RenderedArtifact extends Partial<Artifact> {\n  artifactType: ArtifactType;\n  planetBiome: Biome;\n  rarity: ArtifactRarity;\n  id: ArtifactId; // for rolls\n}\n\nexport type Wormhole = {\n  from: LocationId;\n  to: LocationId;\n};\n"]}