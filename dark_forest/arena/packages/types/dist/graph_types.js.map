{"version":3,"file":"graph_types.js","sourceRoot":"","sources":["../src/graph_types.ts"],"names":[],"mappings":"","sourcesContent":["import { BigNumber } from 'ethers';\nimport { BadgeType } from './badges';\nimport { ExactArray10, ExactArray5, ExactArray8, Tuple6 } from './decoder-helpers';\nimport { EthAddress } from './identifier';\n\n// All of these values are based on the subgraph schema in eth/subgraph/schema.graphql\n// They are used to type the Graph queries that are in the client/src/Backend/Network/GraphApi folder.\n\nexport interface GraphConfig {\n  // # CLAIM_PLANET_COOLDOWN,\n  ABANDON_RANGE_CHANGE_PERCENT: BigNumber;\n  ABANDON_SPEED_CHANGE_PERCENT: BigNumber;\n  ADMIN_CAN_ADD_PLANETS: boolean;\n  ARTIFACT_POINT_VALUES: Tuple6<BigNumber>;\n  BIOME_THRESHOLD_1: BigNumber;\n  BIOME_THRESHOLD_2: BigNumber;\n  BIOMEBASE_KEY: BigNumber;\n  BLOCK_CAPTURE: boolean;\n  BLOCK_MOVES: boolean;\n  CAPTURE_ZONE_CHANGE_BLOCK_INTERVAL: BigNumber;\n  CAPTURE_ZONE_COUNT: BigNumber;\n  CAPTURE_ZONE_HOLD_BLOCKS_REQUIRED: BigNumber;\n  CAPTURE_ZONE_PLANET_LEVEL_SCORE: ExactArray10<BigNumber>;\n  CAPTURE_ZONE_RADIUS: BigNumber;\n  CAPTURE_ZONES_ENABLED: boolean;\n  CAPTURE_ZONES_PER_5000_WORLD_RADIUS: BigNumber;\n  CLAIM_VICTORY_ENERGY_PERCENT: BigNumber;\n  CONFIRM_START: boolean;\n  DISABLE_ZK_CHECKS: boolean;\n  INIT_PERLIN_MAX: BigNumber;\n  INIT_PERLIN_MIN: BigNumber;\n  LOCATION_REVEAL_COOLDOWN: BigNumber;\n  MANUAL_SPAWN: boolean;\n  MAX_NATURAL_PLANET_LEVEL: BigNumber;\n  MODIFIERS: ExactArray8<BigNumber>;\n  NO_ADMIN: boolean;\n  NUM_TEAMS: BigNumber;\n  PERLIN_LENGTH_SCALE: BigNumber;\n  PERLIN_MIRROR_X: boolean;\n  PERLIN_MIRROR_Y: boolean;\n  PERLIN_THRESHOLD_1: BigNumber;\n  PERLIN_THRESHOLD_2: BigNumber;\n  PERLIN_THRESHOLD_3: BigNumber;\n  PHOTOID_ACTIVATION_DELAY: BigNumber;\n  PLANET_LEVEL_JUNK: ExactArray10<BigNumber>;\n  PLANET_LEVEL_THRESHOLDS: ExactArray10<BigNumber>;\n  PLANET_RARITY: BigNumber;\n  PLANET_TRANSFER_ENABLED: boolean;\n  PLANET_TYPE_WEIGHTS: number[];\n  PLANETHASH_KEY: BigNumber;\n  RANDOM_ARTIFACTS: boolean;\n  RANKED: boolean;\n  SILVER_SCORE_VALUE: BigNumber;\n  SPACE_JUNK_ENABLED: boolean;\n  SPACE_JUNK_LIMIT: BigNumber;\n  SPACESHIPS: ExactArray5<boolean>;\n  SPACETYPE_KEY: BigNumber;\n  SPAWN_RIM_AREA: BigNumber;\n  START_PAUSED: boolean;\n  TARGET_PLANETS: boolean;\n  TARGETS_REQUIRED_FOR_VICTORY: BigNumber;\n  TEAMS_ENABLED: boolean;\n  TIME_FACTOR_HUNDREDTHS: BigNumber;\n  TOKEN_MINT_END_TIMESTAMP: BigNumber;\n  WHITELIST_ENABLED: boolean;\n  WORLD_RADIUS_LOCKED: boolean;\n  WORLD_RADIUS_MIN: BigNumber;\n}\n\nexport interface GraphPlanet {\n  x: number;\n  y: number;\n  level: BigNumber;\n  planetType: 'PLANET' | 'ASTEROID' | 'FOUNDRY' | 'SPACETIME_RIP' | 'QUASAR';\n  locationDec: string;\n  perlin: BigNumber;\n  targetPlanet: boolean;\n  spawnPlanet: boolean;\n  blockedPlanetIds: {\n    locationDec: BigNumber\n    x: number,\n    y: number\n  }[]\n}\n\nexport interface RawAccount {\n  wins: number;\n  matches: number;\n  arenaPlayers: {\n    arena: GraphArena;\n  }[];\n}\n\nexport interface GraphArena {\n  lobbyAddress: string;\n  configHash: string;\n  gameOver: boolean;\n  startTime: number;\n  config: GraphConfig;\n  planets: GraphPlanet[];\n}\n\nexport interface MapInfo {\n  creator: EthAddress;\n  configHash: string;\n  lobbyAddress?: EthAddress;\n  startTime?: number;\n  winners?: EthAddress[];\n  planets: string[]; \n}\n\nexport interface GraphConfigPlayer {\n  address: string;\n  elo: number;\n  wins: number;\n  losses: number;\n}\n\nexport interface winners {\n  address: string;\n  moves: number;\n}\n\nexport interface GraphArena {\n  winners: winners[];\n  creator: string;\n  duration: number | null;\n  endTime: number | null;\n  gameOver: boolean;\n  id: string;\n  startTime: number;\n  moves: number;\n}\n\nexport interface BadgeSet {\n  startYourEngine: boolean;\n  nice: boolean;\n  based: boolean;\n  ouch: boolean;\n  wallBreaker: boolean; // Synthetic Value added after data is loaded.\n}\n\nexport interface ConfigPlayer {\n  id: string;\n  address: string;\n  bestTime: {\n    duration: number;\n    winners: {\n      moves: number;\n    }[];\n    startTime: number;\n    endTime: number;\n    gameOver: boolean;\n  } | undefined;\n  badge: BadgeSet | undefined;\n  configHash: string;\n  gamesStarted: number;\n  gamesFinished: number;\n}\n\n\nexport interface WallbreakerArena {\n  configHash: string;\n  winners: {\n    address: string;\n  }[];\n  lobbyAddress: string;\n  duration: number;\n}\n\nexport interface LiveMatchEntry {\n  firstMover: {\n    address: string;\n  };\n  id: string;\n  startTime: number;\n  endTime: number;\n  twitter?: string;\n}\n\nexport interface ExtendedMatchEntry extends LiveMatchEntry {\n  creator: EthAddress;\n  lobbyAddress: EthAddress;\n  players?: {\n    address: string;\n    moves: number;\n  }[];\n  configHash: string;\n  planets: { spawnPlanet: boolean }[];\n  gameOver: boolean;\n  duration: number;\n}\n\nexport interface CleanMatchEntry {\n  creator: EthAddress;\n  lobbyAddress: EthAddress;\n  moves: number;\n  configHash: string;\n  numSpawn: number;\n  gameOver: boolean;\n  duration: number;\n  startTime: number;\n  endTime: number;\n  players: string[];\n}\nexport interface LiveMatch {\n  entries: CleanMatchEntry[];\n}\n\n\n"]}