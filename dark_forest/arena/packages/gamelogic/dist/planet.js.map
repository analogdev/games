{"version":3,"file":"planet.js","sourceRoot":"","sources":["../src/planet.ts"],"names":[],"mappings":";;;AAAA,yDAA0D;AAC1D,iDAM+B;AAExB,MAAM,aAAa,GAAG,CAAC,MAA0B,EAAU,EAAE;IAClE,IAAI,CAAC,MAAM;QAAE,OAAO,CAAC,CAAC;IACtB,OAAO,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC;AAHW,QAAA,aAAa,iBAGxB;AAEF;;;;GAIG;AACH,SAAgB,QAAQ,CAAC,MAAc,EAAE,oBAAoB,GAAG,GAAG,EAAE,UAAU,GAAG,CAAC;IACjF,IAAI,oBAAoB,KAAK,CAAC;QAAE,OAAO,CAAC,CAAC;IACzC,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC;AACtF,CAAC;AAHD,4BAGC;AAED,SAAgB,QAAQ,CAAC,MAAc;IACrC,OAAO,MAAM,CAAC,KAAK,KAAK,yBAAa,CAAC;AACxC,CAAC;AAFD,4BAEC;AAED,SAAgB,kBAAkB,CAChC,aAAqC;IAErC,OAAO,aAAa,CAAC,IAAI,KAAK,SAAS,IAAI,aAAa,CAAC,IAAI,KAAK,yBAAiB,CAAC,SAAS,CAAC;AAChG,CAAC;AAJD,gDAIC;AAED,SAAgB,WAAW,CAAC,MAAe;IACzC,OAAO,MAAM,KAAK,SAAS,IAAK,MAA0B,CAAC,QAAQ,KAAK,SAAS,CAAC;AACpF,CAAC;AAFD,kCAEC;AAED,SAAiB,aAAa,CAAC,MAAe;IAC5C,OAAO,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,aAAa,CAAC;AACtD,CAAC;AAFD,sCAEC;AAED,SAAiB,cAAc,CAAC,MAAe;IAC7C,OAAO,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,cAAc,CAAC;AACvD,CAAC;AAFD,wCAEC;AAGD;;GAEG;AACH,SAAgB,+BAA+B,CAC7C,mBAAuC,EACvC,sBAA8B;IAE9B,IAAI,CAAC,mBAAmB,EAAE;QACxB,OAAO,CAAC,CAAC;KACV;IAED,iEAAiE;IACjE,OAAO,CAAC,mBAAmB,GAAG,sBAAsB,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AAC5E,CAAC;AAVD,0EAUC","sourcesContent":["import { EMPTY_ADDRESS } from '@darkforest_eth/constants';\nimport {\n  EmojiFlagBody,\n  LocatablePlanet,\n  Planet,\n  PlanetMessage,\n  PlanetMessageType,\n} from '@darkforest_eth/types';\n\nexport const getPlanetRank = (planet: Planet | undefined): number => {\n  if (!planet) return 0;\n  return planet.upgradeState.reduce((a, b) => a + b);\n};\n\n/**\n * @todo - planet class\n * @param rangeBoost A multiplier to be applied to the resulting range.\n * Currently used for calculating boost associated with abandoning a planet.\n */\nexport function getRange(planet: Planet, percentEnergySending = 100, rangeBoost = 1): number {\n  if (percentEnergySending === 0) return 0;\n  return Math.max(Math.log2(percentEnergySending / 5), 0) * planet.range * rangeBoost;\n}\n\nexport function hasOwner(planet: Planet) {\n  return planet.owner !== EMPTY_ADDRESS;\n}\n\nexport function isEmojiFlagMessage(\n  planetMessage: PlanetMessage<unknown>\n): planetMessage is PlanetMessage<EmojiFlagBody> {\n  return planetMessage.body !== undefined && planetMessage.type === PlanetMessageType.EmojiFlag;\n}\n\nexport function isLocatable(planet?: Planet): planet is LocatablePlanet {\n  return planet !== undefined && (planet as LocatablePlanet).location !== undefined;\n}\n\nexport function  isSpawnPlanet(planet?: Planet): boolean {\n  return planet !== undefined && planet.isSpawnPlanet;\n}\n\nexport function  isTargetPlanet(planet?: Planet): boolean {\n  return planet !== undefined && planet.isTargetPlanet;\n}\n\n\n/**\n * Gets the time (ms) until we can broadcast the coordinates of a planet.\n */\nexport function timeUntilNextBroadcastAvailable(\n  lastRevealTimestamp: number | undefined,\n  locationRevealCooldown: number\n) {\n  if (!lastRevealTimestamp) {\n    return 0;\n  }\n\n  // both the variables in the next line are denominated in seconds\n  return (lastRevealTimestamp + locationRevealCooldown) * 1000 - Date.now();\n}\n"]}