{"version":3,"file":"number.js","sourceRoot":"","sources":["../src/number.ts"],"names":[],"mappings":";;;AAAA,6DAA6D;AACtD,MAAM,YAAY,GAAG,CAAC,GAAW,EAAE,QAAQ,GAAG,CAAC,EAAU,EAAE;IAChE,IAAI,GAAG,GAAG,IAAI,EAAE;QACd,IAAI,GAAG,GAAG,EAAE,KAAK,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YAC/B,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;SAC5B;aAAM;YACL,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;SACnC;KACF;IAED,MAAM,QAAQ,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACpD,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,GAAG,GAAG,GAAG,CAAC;IACd,OAAO,GAAG,GAAG,IAAI,IAAI,CAAC,EAAE;QACtB,GAAG,IAAI,IAAI,CAAC;QACZ,MAAM,EAAE,CAAC;KACV;IAED,IAAI,MAAM,KAAK,CAAC;QAAE,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;IAE9C,IAAI,GAAG,GAAG,EAAE;QAAE,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;SACvD,IAAI,GAAG,GAAG,GAAG;QAAE,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;SAC7D,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM;QAAE,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;;QAC5E,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC;AAChD,CAAC,CAAC;AAvBW,QAAA,YAAY,gBAuBvB","sourcesContent":["// smallDec represents the decimals to show for small numbers\nexport const formatNumber = (num: number, smallDec = 0): string => {\n  if (num < 1000) {\n    if (`${num}` === num.toFixed(0)) {\n      return `${num.toFixed(0)}`;\n    } else {\n      return `${num.toFixed(smallDec)}`;\n    }\n  }\n\n  const suffixes = ['', 'K', 'M', 'B', 'T', 'q', 'Q'];\n  let log000 = 0;\n  let rem = num;\n  while (rem / 1000 >= 1) {\n    rem /= 1000;\n    log000++;\n  }\n\n  if (log000 === 0) return `${Math.floor(num)}`;\n\n  if (rem < 10) return `${rem.toFixed(1)}${suffixes[log000]}`;\n  else if (rem < 100) return `${rem.toFixed(1)}${suffixes[log000]}`;\n  else if (log000 < suffixes.length) return `${rem.toFixed(0)}${suffixes[log000]}`;\n  else return `${rem.toFixed(0)}E${log000 * 3}`;\n};\n"]}