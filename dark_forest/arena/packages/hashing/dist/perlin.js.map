{"version":3,"file":"perlin.js","sourceRoot":"","sources":["../src/perlin.ts"],"names":[],"mappings":"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","sourcesContent":["import { PerlinConfig } from '@darkforest_eth/types';\nimport BigInt, { BigInteger } from 'big-integer';\nimport { Fraction, IFraction } from './fractions/bigFraction';\nimport { perlinRandHash } from './mimc';\n\nconst TRACK_LCM = false;\n\n/**\n * A object containing a pair of x,y coordinates.\n */\nexport interface IntegerVector {\n  x: number;\n  y: number;\n}\n\ninterface Vector {\n  x: IFraction;\n  y: IFraction;\n}\n\ninterface GradientAtPoint {\n  coords: Vector;\n  gradient: Vector;\n}\n\ntype HashFn = (...inputs: number[]) => number;\n\nexport const rand =\n  (key: number) =>\n  (...args: number[]) => {\n    return perlinRandHash(key)(...args)\n      .remainder(16)\n      .toJSNumber();\n  };\n\n/*\nconst generateVecs = () => {\n  const vecs = 16;\n  const precision = 3;\n  let range: number[] = [];\n  for (let i = 0; i < vecs; i++) range.push(i);\n  const out = range\n    .map((x) => (x * Math.PI * 2) / vecs)\n    .map((x) => [\n      Math.floor(Math.cos(x) * 10 ** precision),\n      Math.floor(Math.sin(x) * 10 ** precision),\n    ]);\n\n  return out.map(([x, y]) => ({\n    x: new Fraction(x, 10 ** precision),\n    y: new Fraction(y, 10 ** precision),\n  }));\n};\n\nconst vecs = generateVecs();\n*/\nlet vecs: Array<Vector>;\ntry {\n  vecs = [\n    [1000, 0],\n    [923, 382],\n    [707, 707],\n    [382, 923],\n    [0, 1000],\n    [-383, 923],\n    [-708, 707],\n    [-924, 382],\n    [-1000, 0],\n    [-924, -383],\n    [-708, -708],\n    [-383, -924],\n    [-1, -1000],\n    [382, -924],\n    [707, -708],\n    [923, -383],\n  ].map(([x, y]) => ({ x: new Fraction(x, 1000), y: new Fraction(y, 1000) }));\n} catch (err) {\n  console.error('Browser does not support BigInt.', err);\n}\n\nexport const getRandomGradientAt = (point: Vector, scale: IFraction, randFn: HashFn): Vector => {\n  const val = vecs[randFn(point.x.valueOf(), point.y.valueOf(), scale.valueOf())];\n  return val;\n};\n\nconst minus: (a: Vector, b: Vector) => Vector = (a, b) => {\n  return {\n    x: a.x.sub(b.x),\n    y: a.y.sub(b.y),\n  };\n};\n\nconst dot: (a: Vector, b: Vector) => IFraction = (a, b) => {\n  return a.x.mul(b.x).add(a.y.mul(b.y));\n};\n\nconst smoothStep: (x: IFraction) => IFraction = (x) => {\n  // return 6 * x ** 5 - 15 * x ** 4 + 10 * x ** 3;\n  return x;\n};\n\nconst scalarMultiply: (s: IFraction, v: Vector) => Vector = (s, v) => ({\n  x: v.x.mul(s),\n  y: v.y.mul(s),\n});\n\nconst getWeight: (corner: Vector, p: Vector) => IFraction = (corner, p) => {\n  return smoothStep(new Fraction(1).sub(p.x.sub(corner.x).abs())).mul(\n    smoothStep(new Fraction(1).sub(p.y.sub(corner.y).abs()))\n  );\n};\n\n// p is in a scale x scale square. we scale down to a 1x1 square\nconst perlinValue: (\n  corners: [GradientAtPoint, GradientAtPoint, GradientAtPoint, GradientAtPoint],\n  scale: IFraction,\n  p: Vector\n) => IFraction = (corners, scale, p) => {\n  let ret = new Fraction(0);\n  for (const corner of corners) {\n    const distVec = minus(p, corner.coords);\n    ret = ret.add(\n      getWeight(\n        scalarMultiply(scale.inverse(), corner.coords),\n        scalarMultiply(scale.inverse(), p)\n      ).mul(dot(scalarMultiply(scale.inverse(), distVec), corner.gradient))\n    );\n  }\n  return ret;\n};\n\nlet runningLCM = BigInt(1);\n\nconst updateLCM = (oldLCM: BigInteger, newValue: BigInteger): BigInteger => {\n  if (!TRACK_LCM) {\n    return oldLCM;\n  }\n\n  const newLCM = BigInt.lcm(oldLCM, newValue);\n  if (newLCM !== oldLCM) {\n    console.log('LCM updated to ', newLCM);\n  }\n\n  return newLCM;\n};\n\n// fractional mod\nconst realMod = (dividend: IFraction, divisor: IFraction): IFraction => {\n  const temp = dividend.mod(divisor);\n  // temp.s is sign\n  if (temp.s.toString() === '-1') {\n    return temp.add(divisor);\n  }\n  return temp;\n};\n\nconst valueAt = (p: Vector, scale: IFraction, randFn: (...inputs: number[]) => number) => {\n  const bottomLeftCoords = {\n    x: p.x.sub(realMod(p.x, scale)),\n    y: p.y.sub(realMod(p.y, scale)),\n  };\n  const bottomRightCoords = {\n    x: bottomLeftCoords.x.add(scale),\n    y: bottomLeftCoords.y,\n  };\n  const topLeftCoords = {\n    x: bottomLeftCoords.x,\n    y: bottomLeftCoords.y.add(scale),\n  };\n  const topRightCoords = {\n    x: bottomLeftCoords.x.add(scale),\n    y: bottomLeftCoords.y.add(scale),\n  };\n\n  const bottomLeftGrad = {\n    coords: bottomLeftCoords,\n    gradient: getRandomGradientAt(bottomLeftCoords, scale, randFn),\n  };\n  const bottomRightGrad = {\n    coords: bottomRightCoords,\n    gradient: getRandomGradientAt(bottomRightCoords, scale, randFn),\n  };\n  const topLeftGrad = {\n    coords: topLeftCoords,\n    gradient: getRandomGradientAt(topLeftCoords, scale, randFn),\n  };\n  const topRightGrad = {\n    coords: topRightCoords,\n    gradient: getRandomGradientAt(topRightCoords, scale, randFn),\n  };\n\n  const out = perlinValue([bottomLeftGrad, bottomRightGrad, topLeftGrad, topRightGrad], scale, p);\n\n  return out;\n};\n\nexport const MAX_PERLIN_VALUE = 32;\n\n/**\n * Calculates the perlin for a location, given the x,y pair and the PerlinConfig for the game.\n *\n * @param coords An object of the x,y coordinates for which perlin is being calculated.\n * @param options An object containing the configuration for the perlin algorithm.\n */\nexport function perlin(coords: IntegerVector, options: PerlinConfig) {\n  let { x, y } = coords;\n  if (options.mirrorY) x = Math.abs(x); // mirror across the vertical y-axis\n  if (options.mirrorX) y = Math.abs(y); // mirror across the horizontal x-axis\n  const fractionalP = { x: new Fraction(x), y: new Fraction(y) };\n  let ret = new Fraction(0);\n  const pValues: IFraction[] = [];\n  for (let i = 0; i < 3; i += 1) {\n    // scale must be a power of two, up to 8192\n    pValues.push(valueAt(fractionalP, new Fraction(options.scale * 2 ** i), rand(options.key)));\n  }\n  ret = ret.add(pValues[0]);\n  ret = ret.add(pValues[0]);\n  ret = ret.add(pValues[1]);\n  ret = ret.add(pValues[2]);\n\n  ret = ret.div(4);\n  runningLCM = updateLCM(runningLCM, BigInt(ret.d));\n\n  ret = ret.mul(MAX_PERLIN_VALUE / 2);\n  if (options.floor) ret = ret.floor();\n  ret = ret.add(MAX_PERLIN_VALUE / 2);\n\n  const out = ret.valueOf();\n  return Math.floor(out * 100) / 100;\n}\n"]}