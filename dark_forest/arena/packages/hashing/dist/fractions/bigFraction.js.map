{"version":3,"file":"bigFraction.js","sourceRoot":"","sources":["../../src/fractions/bigFraction.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable */\n//@ts-nocheck\n\n/**\n * @license Fraction.js v4.0.12 09/09/2015\n * http://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * let f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\nimport { BigInteger } from 'big-integer';\n\nexport interface NumeratorDenominator {\n  n: number;\n  d: number;\n}\n\ntype FractionConstructor = {\n  (fraction: IFraction): IFraction;\n  (num: number | string): IFraction;\n  (numerator: number, denominator: number): IFraction;\n  (numbers: (number | string)[]): IFraction;\n  (fraction: NumeratorDenominator): IFraction;\n};\n\nexport interface IFraction {\n  new (fraction: IFraction);\n  new (num: number | string);\n  new (numerator: number, denominator: number);\n  new (numbers: (number | string)[]);\n  new (fraction: NumeratorDenominator);\n\n  s: BigInteger;\n  n: BigInteger;\n  d: BigInteger;\n\n  abs(): IFraction;\n  neg(): IFraction;\n\n  add: FractionConstructor;\n  sub: FractionConstructor;\n  mul: FractionConstructor;\n  div: FractionConstructor;\n  pow: FractionConstructor;\n  gcd: FractionConstructor;\n  lcm: FractionConstructor;\n\n  mod(n?: number | string | IFraction): IFraction;\n\n  ceil(places?: number): IFraction;\n  floor(places?: number): IFraction;\n  round(places?: number): IFraction;\n\n  inverse(): IFraction;\n\n  simplify(eps?: number): IFraction;\n\n  equals(n: number | string | IFraction): boolean;\n  compare(n: number | string | IFraction): number;\n  divisible(n: number | string | IFraction): boolean;\n\n  valueOf(): number;\n  toString(decimalPlaces?: number): string;\n  toLatex(excludeWhole?: boolean): string;\n  toFraction(excludeWhole?: boolean): string;\n  toContinued(): number[];\n  clone(): IFraction;\n}\n\nconst { Fraction, errorConstructor } = (function (root) {\n  'use strict';\n\n  function errorConstructor() {\n    const temp = Error.apply(this, arguments);\n    temp['name'] = this['name'] = name;\n    this['stack'] = temp['stack'];\n    this['message'] = temp['message'];\n  }\n\n  // Set Identity function to downgrade BigInt to Number if needed\n  if (!BigInt)\n    BigInt = function (n) {\n      return n;\n    };\n\n  const C_ONE = BigInt(1);\n  const C_ZERO = BigInt(0);\n  const C_TEN = BigInt(10);\n  const C_TWO = BigInt(2);\n  const C_FIVE = BigInt(5);\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  const MAX_CYCLE_LEN = BigInt(2000);\n\n  // Parsed data to avoid calling \"new\" all the time\n  const P = {\n    s: C_ONE,\n    n: C_ZERO,\n    d: C_ONE,\n  };\n\n  function createError(name) {\n    /**\n     * Error constructor\n     *\n     * @constructor\n     */\n    function IntermediateInheritor() {}\n    IntermediateInheritor.prototype = Error.prototype;\n    errorConstructor.prototype = new IntermediateInheritor();\n\n    return errorConstructor;\n  }\n\n  const DivisionByZero = (Fraction['DivisionByZero'] = createError('DivisionByZero'));\n  const InvalidParameter = (Fraction['InvalidParameter'] = createError('InvalidParameter'));\n\n  function assign(n, s) {\n    try {\n      n = BigInt(n);\n    } catch (e) {\n      throw new InvalidParameter();\n    }\n\n    return n * s;\n  }\n\n  const parse = function (p1, p2) {\n    let n = C_ZERO,\n      d = C_ONE,\n      s = C_ONE;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = BigInt(p1);\n      d = BigInt(p2);\n      s = n * d;\n    } else if (typeof p1 === 'object') {\n      if ('d' in p1 && 'n' in p1) {\n        n = BigInt(p1['n']);\n        d = BigInt(p1['d']);\n        if ('s' in p1) n *= BigInt(p1['s']);\n      } else if (0 in p1) {\n        n = BigInt(p1[0]);\n        if (1 in p1) d = BigInt(p1[1]);\n      } else if (p1 instanceof BigInt) {\n        n = BigInt(p1);\n      } else {\n        throw new InvalidParameter();\n      }\n      s = n * d;\n    } else if (typeof p1 === 'number') {\n      if (isNaN(p1)) {\n        throw new InvalidParameter();\n      }\n\n      if (p1 < 0) {\n        s = -C_ONE;\n        p1 = -p1;\n      }\n\n      if (p1 % 1 === 0) {\n        n = BigInt(p1);\n      } else if (p1 > 0) {\n        // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n        let z = 1;\n\n        let A = 0,\n          B = 1;\n        let C = 1,\n          D = 1;\n\n        let N = 10000000;\n\n        if (p1 >= 1) {\n          z = 10 ** Math.floor(1 + Math.log10(p1));\n          p1 /= z;\n        }\n\n        // Using Farey Sequences\n\n        while (B <= N && D <= N) {\n          let M = (A + C) / (B + D);\n\n          if (p1 === M) {\n            if (B + D <= N) {\n              n = A + C;\n              d = B + D;\n            } else if (D > B) {\n              n = C;\n              d = D;\n            } else {\n              n = A;\n              d = B;\n            }\n            break;\n          } else {\n            if (p1 > M) {\n              A += C;\n              B += D;\n            } else {\n              C += A;\n              D += B;\n            }\n\n            if (B > N) {\n              n = C;\n              d = D;\n            } else {\n              n = A;\n              d = B;\n            }\n          }\n        }\n        n = BigInt(n) * BigInt(z);\n        d = BigInt(d);\n      } else if (isNaN(p1)) {\n        d = n = NaN;\n      }\n    } else if (typeof p1 === 'string') {\n      let ndx = 0;\n\n      let v = C_ZERO,\n        w = C_ZERO,\n        x = C_ZERO,\n        y = C_ONE,\n        z = C_ONE;\n\n      let match = p1.match(/\\d+|./g);\n\n      if (match === null) throw new InvalidParameter();\n\n      if (match[ndx] === '-') {\n        // Check for minus sign at the beginning\n        s = -C_ONE;\n        ndx++;\n      } else if (match[ndx] === '+') {\n        // Check for plus sign at the beginning\n        ndx++;\n      }\n\n      if (match.length === ndx + 1) {\n        // Check if it's just a simple number \"1234\"\n        w = assign(match[ndx++], s);\n      } else if (match[ndx + 1] === '.' || match[ndx] === '.') {\n        // Check if it's a decimal number\n\n        if (match[ndx] !== '.') {\n          // Handle 0.5 and .5\n          v = assign(match[ndx++], s);\n        }\n        ndx++;\n\n        // Check for decimal places\n        if (\n          ndx + 1 === match.length ||\n          (match[ndx + 1] === '(' && match[ndx + 3] === ')') ||\n          (match[ndx + 1] === \"'\" && match[ndx + 3] === \"'\")\n        ) {\n          w = assign(match[ndx], s);\n          y = C_TEN ** BigInt(match[ndx].length);\n          ndx++;\n        }\n\n        // Check for repeating places\n        if (\n          (match[ndx] === '(' && match[ndx + 2] === ')') ||\n          (match[ndx] === \"'\" && match[ndx + 2] === \"'\")\n        ) {\n          x = assign(match[ndx + 1], s);\n          z = C_TEN ** BigInt(match[ndx + 1].length) - C_ONE;\n          ndx += 3;\n        }\n      } else if (match[ndx + 1] === '/' || match[ndx + 1] === ':') {\n        // Check for a simple fraction \"123/456\" or \"123:456\"\n        w = assign(match[ndx], s);\n        y = assign(match[ndx + 2], C_ONE);\n        ndx += 3;\n      } else if (match[ndx + 3] === '/' && match[ndx + 1] === ' ') {\n        // Check for a complex fraction \"123 1/2\"\n        v = assign(match[ndx], s);\n        w = assign(match[ndx + 2], s);\n        y = assign(match[ndx + 4], C_ONE);\n        ndx += 5;\n      }\n\n      if (match.length <= ndx) {\n        // Check for more tokens on the stack\n        d = y * z;\n        s = /* void */ n = x + d * v + z * w;\n      } else {\n        throw new InvalidParameter();\n      }\n    } else {\n      throw new InvalidParameter();\n    }\n\n    if (d === C_ZERO) {\n      throw new DivisionByZero();\n    }\n\n    P['s'] = s < C_ZERO ? -C_ONE : C_ONE;\n    P['n'] = n < C_ZERO ? -n : n;\n    P['d'] = d < C_ZERO ? -d : d;\n  };\n\n  function modpow(b, e, m) {\n    let r = C_ONE;\n    for (; e > C_ZERO; b = (b * b) % m, e >>= C_ONE) {\n      if (e & C_ONE) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  }\n\n  function cycleLen(n, d) {\n    for (; d % C_TWO === C_ZERO; d /= C_TWO) {}\n\n    for (; d % C_FIVE === C_ZERO; d /= C_FIVE) {}\n\n    if (d === C_ONE)\n      // Catch non-cyclic numbers\n      return C_ZERO;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    let rem = C_TEN % d;\n    let t = C_ONE;\n\n    for (; rem !== C_ONE; t++) {\n      rem = (rem * C_TEN) % d;\n\n      if (t > MAX_CYCLE_LEN) return C_ZERO; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return t;\n  }\n\n  function cycleStart(n, d, len) {\n    let rem1 = C_ONE;\n    let rem2 = modpow(C_TEN, len, d);\n\n    for (let t = 0; t < 300; t++) {\n      // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2) return BigInt(t);\n\n      rem1 = (rem1 * C_TEN) % d;\n      rem2 = (rem2 * C_TEN) % d;\n    }\n    return 0;\n  }\n\n  function gcd(a, b) {\n    if (!a) return b;\n    if (!b) return a;\n\n    while (1) {\n      a %= b;\n      if (!a) return b;\n      b %= a;\n      if (!b) return a;\n    }\n  }\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n    if (!(this instanceof Fraction)) {\n      return new Fraction(a, b);\n    }\n\n    parse(a, b);\n\n    a = gcd(P['d'], P['n']); // Abuse a\n\n    this['s'] = P['s'];\n    this['n'] = (P['n'] / a) | C_ZERO;\n    this['d'] = (P['d'] / a) | C_ZERO;\n  }\n\n  Fraction.prototype = {\n    s: C_ONE,\n    n: C_ZERO,\n    d: C_ONE,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    abs: function () {\n      return new Fraction(this['n'], this['d']);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    neg: function () {\n      return new Fraction(-this['s'] * this['n'], this['d']);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    add: function (a, b) {\n      parse(a, b);\n      return new Fraction(\n        this['s'] * this['n'] * P['d'] + P['s'] * this['d'] * P['n'],\n        this['d'] * P['d']\n      );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    sub: function (a, b) {\n      parse(a, b);\n      return new Fraction(\n        this['s'] * this['n'] * P['d'] - P['s'] * this['d'] * P['n'],\n        this['d'] * P['d']\n      );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    mul: function (a, b) {\n      parse(a, b);\n      return new Fraction(this['s'] * P['s'] * this['n'] * P['n'], this['d'] * P['d']);\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    div: function (a, b) {\n      parse(a, b);\n      return new Fraction(this['s'] * P['s'] * this['n'] * P['d'], this['d'] * P['n']);\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    clone: function () {\n      return new Fraction(this);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    mod: function (a, b) {\n      if (a === undefined) {\n        return new Fraction((this['s'] * this['n']) % this['d'], 1);\n      }\n\n      parse(a, b);\n      if (0 === P['n'] && 0 === this['d']) {\n        Fraction(0, 0); // Throw DivisionByZero\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return new Fraction(\n        (this['s'] * (P['d'] * this['n'])) % (P['n'] * this['d']),\n        P['d'] * this['d']\n      );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    gcd: function (a, b) {\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return new Fraction(gcd(P['n'], this['n']) * gcd(P['d'], this['d']), P['d'] * this['d']);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    lcm: function (a, b) {\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P['n'] === C_ZERO && this['n'] === C_ZERO) {\n        return new Fraction();\n      }\n      return new Fraction(P['n'] * this['n'], gcd(P['n'], this['n']) * gcd(P['d'], this['d']));\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    inverse: function () {\n      return new Fraction(this['s'] * this['d'], this['n']);\n    },\n\n    /**\n     * Calculates the fraction to some integer exponent\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    pow: function (m) {\n      if (m < 0) {\n        return new Fraction((this['s'] * this['d']) ** BigInt(-m), this['n'] ** BigInt(-m));\n      } else {\n        return new Fraction((this['s'] * this['n']) ** BigInt(+m), this['d'] ** BigInt(+m));\n      }\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    equals: function (a, b) {\n      parse(a, b);\n      return this['s'] * this['n'] * P['d'] === P['s'] * P['n'] * this['d']; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    compare: function (a, b) {\n      parse(a, b);\n      let t = this['s'] * this['n'] * P['d'] - P['s'] * P['n'] * this['d'];\n\n      return (C_ZERO < t) - (t < C_ZERO);\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    ceil: function (places) {\n      places = 10 ** Number(places || 0);\n\n      return new Fraction(\n        Math.ceil((places * Number(this['s'] * this['n'])) / Number(this['d'])),\n        places\n      );\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    floor: function (places) {\n      places = 10 ** Number(places || 0);\n\n      return new Fraction(\n        Math.floor((places * Number(this['s'] * this['n'])) / Number(this['d'])),\n        places\n      );\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    round: function (places) {\n      places = 10 ** Number(places || 0);\n\n      return new Fraction(\n        Math.round((places * Number(this['s'] * this['n'])) / Number(this['d'])),\n        places\n      );\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    divisible: function (a, b) {\n      parse(a, b);\n      return !(!(P['n'] * this['d']) || (this['n'] * P['d']) % (P['n'] * this['d']));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    valueOf: function () {\n      // Best we can do so far\n      return Number(this['s'] * this['n']) / Number(this['d']);\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    toString: function (dec) {\n      let g;\n      let N = this['n'];\n      let D = this['d'];\n\n      dec = dec || 15; // 15 = decimal places when no repitation\n\n      let cycLen = cycleLen(N, D); // Cycle length\n      let cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      let str = this['s'] < C_ZERO ? '-' : '';\n\n      // Append integer part\n      str += (N / D) | C_ZERO;\n\n      N %= D;\n      N *= C_TEN;\n\n      if (N) str += '.';\n\n      if (cycLen) {\n        for (let i = cycOff; i--; ) {\n          str += (N / D) | C_ZERO;\n          N %= D;\n          N *= C_TEN;\n        }\n        str += '(';\n        for (let i = cycLen; i--; ) {\n          str += (N / D) | C_ZERO;\n          N %= D;\n          N *= C_TEN;\n        }\n        str += ')';\n      } else {\n        for (let i = dec; N && i--; ) {\n          str += (N / D) | C_ZERO;\n          N %= D;\n          N *= C_TEN;\n        }\n      }\n      return str;\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n     **/\n    toFraction: function (excludeWhole) {\n      let n = this['n'];\n      let d = this['d'];\n      let str = this['s'] < C_ZERO ? '-' : '';\n\n      if (d === C_ONE) {\n        str += n;\n      } else {\n        let whole = (n / d) | C_ZERO;\n        if (excludeWhole && whole > C_ZERO) {\n          str += whole;\n          str += ' ';\n          n %= d;\n        }\n\n        str += n;\n        str += '/';\n        str += d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    toLatex: function (excludeWhole) {\n      let n = this['n'];\n      let d = this['d'];\n      let str = this['s'] < C_ZERO ? '-' : '';\n\n      if (d === C_ONE) {\n        str += n;\n      } else {\n        let whole = (n / d) | C_ZERO;\n        if (excludeWhole && whole > C_ZERO) {\n          str += whole;\n          n %= d;\n        }\n\n        str += '\\\\frac{';\n        str += n;\n        str += '}{';\n        str += d;\n        str += '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    toContinued: function () {\n      let a = this['n'];\n      let b = this['d'];\n      let res = [];\n\n      do {\n        res.push((a / b) | C_ZERO);\n        let t = a % b;\n        a = b;\n        b = t;\n      } while (a !== C_ONE);\n\n      return res;\n    },\n\n    simplify: function (eps) {\n      // First naive implementation, needs improvement\n\n      let cont = this['abs']()['toContinued']();\n\n      eps = eps || 0.001;\n\n      function rec(a) {\n        if (a.length === 1) return new Fraction(a[0]);\n        return rec(a.slice(1))['inverse']()['add'](a[0]);\n      }\n\n      for (let i = 0; i < cont.length; i++) {\n        let tmp = rec(cont.slice(0, i + 1));\n        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {\n          return tmp['mul'](this['s']);\n        }\n      }\n      return this;\n    },\n  };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n  Fraction['default'] = Fraction;\n  Fraction['Fraction'] = Fraction;\n  return {\n    Fraction: Fraction as IFraction,\n    errorConstructor,\n  };\n})(this);\n\nexport { Fraction, errorConstructor };\n"]}