{"version":3,"file":"TxExecutor.js","sourceRoot":"","sources":["../src/TxExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AutoGasSetting,\n  DiagnosticUpdater,\n  NetworkEvent,\n  PersistedTransaction,\n  Transaction,\n  TransactionId,\n  TxIntent,\n} from '@darkforest_eth/types';\nimport { Mutex } from 'async-mutex';\nimport { providers } from 'ethers';\nimport deferred from 'p-defer';\nimport timeout from 'p-timeout';\nimport { EthConnection } from './EthConnection';\nimport { gweiToWei, waitForTransaction } from './Network';\nimport { ConcurrentQueueConfiguration, ThrottledConcurrentQueue } from './ThrottledConcurrentQueue';\n\n/**\n * Returns either a string that represents the gas price we should use by default for transactions,\n * or a string that represents the fact that we should be using one of the automatic gas prices.\n */\nexport type GasPriceSettingProvider = (transactionRequest: Transaction) => AutoGasSetting | string;\n\n/**\n * {@link TxExecutor} calls this before queueing a function to determine whether or not that\n * function should be queued. If this function rejects, a transaction is not queued.\n */\nexport type BeforeQueued = (\n  id: TransactionId,\n  intent: TxIntent,\n  overrides?: providers.TransactionRequest\n) => Promise<void>;\n\n/**\n * {@link TxExecutor} calls this before executing a function to determine whether or not that\n * function should execute. If this function rejects, the transaction is cancelled.\n */\nexport type BeforeTransaction = (transactionRequest: Transaction) => Promise<void>;\n\n/**\n * {@link TxExecutor} calls this after executing a transaction.\n */\nexport type AfterTransaction = (\n  transactionRequest: Transaction,\n  performanceMetrics: unknown\n) => Promise<void>;\n\nexport class TxExecutor {\n  /**\n   * A transaction is considered to have errored if haven't successfully submitted to mempool within\n   * this amount of time.\n   */\n  private static readonly TX_SUBMIT_TIMEOUT = 30000;\n\n  /**\n   * Our interface to the blockchain.\n   */\n  private readonly ethConnection: EthConnection;\n\n  /**\n   * Communicates to the {@link TxExecutor} the gas price we should be paying for each transaction,\n   * if there is not a manual gas price specified for that transaction.\n   */\n  private readonly gasSettingProvider: GasPriceSettingProvider;\n\n  /**\n   * If present, called before any transaction is queued, to give the user of {@link TxExecutor} the\n   * opportunity to cancel the event by rejecting. Useful for interstitials.\n   */\n  private readonly beforeQueued?: BeforeQueued;\n\n  /**\n   * If present, called before every transaction, to give the user of {@link TxExecutor} the\n   * opportunity to cancel the event by throwing an exception. Useful for interstitials.\n   */\n  private readonly beforeTransaction?: BeforeTransaction;\n\n  /**\n   * If present, called after every transaction with the transaction info as well as its performance\n   * metrics.\n   */\n  private readonly afterTransaction?: AfterTransaction;\n\n  /**\n   * Task queue which executes transactions in a controlled manner.\n   */\n  private readonly queue: ThrottledConcurrentQueue<Transaction>;\n\n  /**\n   * We record the last transaction timestamp so that we know when it's a good time to refresh the\n   * nonce.\n   */\n  private lastTransactionTimestamp: number;\n\n  /**\n   * All Ethereum transactions have a nonce. The nonce should strictly increase with each\n   * transaction.\n   */\n  private nonce: number | undefined;\n\n  /**\n   * Increments every time a new transaction is created. This is separate from the nonce because\n   * it is used solely for ordering transactions client-side.\n   */\n  private idSequence: TransactionId = 0;\n\n  /**\n   * Allows us to record some diagnostics that appear in the DiagnosticsPane of the Dark Forest client.\n   */\n  private diagnosticsUpdater?: DiagnosticUpdater;\n\n  /**\n   * Unless overridden, these are the default transaction options each blockchain transaction will\n   * be sent with.\n   */\n  private defaultTxOptions: providers.TransactionRequest = {\n    gasLimit: 2_000_000,\n  };\n\n  /**\n   * Mutex that ensures only one transaction is modifying the nonce\n   * at a time.\n   */\n  private nonceMutex: Mutex;\n\n  /**\n   * Turning this on refreshes the nonce if there has not been\n   * a transaction after {@link NONCE_STALE_AFTER_MS}. This is so that\n   * we can get the most up to date nonce even if other\n   * wallets/applications are sending transactions as the same\n   * address.\n   */\n  private supportMultipleWallets: boolean;\n\n  /**\n   * If {@link supportMultipleWallets} is true, refresh the nonce if a\n   * transaction has not been sent in this amount of time.\n   */\n  private static readonly NONCE_STALE_AFTER_MS = 5_000;\n\n  constructor(\n    ethConnection: EthConnection,\n    gasSettingProvider: GasPriceSettingProvider,\n    beforeQueued?: BeforeQueued,\n    beforeTransaction?: BeforeTransaction,\n    afterTransaction?: AfterTransaction,\n    queueConfiguration?: ConcurrentQueueConfiguration,\n    supportMultipleWallets = true\n  ) {\n    this.queue = new ThrottledConcurrentQueue(\n      queueConfiguration ?? {\n        invocationIntervalMs: 200,\n        maxInvocationsPerIntervalMs: 3,\n        maxConcurrency: 10,\n      }\n    );\n    this.lastTransactionTimestamp = Date.now();\n    this.ethConnection = ethConnection;\n    this.gasSettingProvider = gasSettingProvider;\n    this.beforeQueued = beforeQueued;\n    this.beforeTransaction = beforeTransaction;\n    this.afterTransaction = afterTransaction;\n    this.nonceMutex = new Mutex();\n    this.supportMultipleWallets = supportMultipleWallets;\n  }\n\n  /**\n   * Given a transaction that has been persisted (and therefore submitted), we return a transaction\n   * whose confirmationPromise resolves once the transaction was verified to have been confirmed.\n   * Useful for plugging these persisted transactions into our transaction system.\n   */\n  public waitForTransaction<T extends TxIntent>(ser: PersistedTransaction<T>): Transaction<T> {\n    const {\n      promise: submittedPromise,\n      reject: rejectTxResponse,\n      resolve: txResponse,\n    } = deferred<providers.TransactionResponse>();\n\n    const {\n      promise: confirmedPromise,\n      reject: rejectTxReceipt,\n      resolve: txReceipt,\n    } = deferred<providers.TransactionReceipt>();\n\n    const tx: Transaction<T> = {\n      id: this.nextId(),\n      lastUpdatedAt: Date.now(),\n      state: 'Init',\n      intent: ser.intent,\n      submittedPromise,\n      confirmedPromise,\n      onSubmissionError: rejectTxResponse,\n      onReceiptError: rejectTxReceipt,\n      onTransactionResponse: txResponse,\n      onTransactionReceipt: txReceipt,\n    };\n\n    waitForTransaction(this.ethConnection.getProvider(), ser.hash)\n      .then((receipt) => {\n        tx.onTransactionReceipt(receipt);\n      })\n      .catch((err) => {\n        tx.onReceiptError(err);\n      });\n\n    return tx;\n  }\n\n  /**\n   * Schedules this transaction for execution.\n   */\n  public async queueTransaction<T extends TxIntent>(\n    intent: T,\n    overrides?: providers.TransactionRequest\n  ): Promise<Transaction<T>> {\n    this.diagnosticsUpdater?.updateDiagnostics((d) => {\n      d.transactionsInQueue++;\n    });\n\n    const id = this.nextId();\n\n    // The `beforeQueued` function is run before we do anything with the TX\n    // And outside of the try/catch so anything it throws can be bubbled instead of\n    // marking it as a reverted TX\n    if (this.beforeQueued) {\n      await this.beforeQueued(id, intent, overrides);\n    }\n\n    const {\n      promise: submittedPromise,\n      reject: rejectTxResponse,\n      resolve: txResponse,\n    } = deferred<providers.TransactionResponse>();\n\n    const {\n      promise: confirmedPromise,\n      reject: rejectTxReceipt,\n      resolve: txReceipt,\n    } = deferred<providers.TransactionReceipt>();\n\n    const tx: Transaction<T> = {\n      id,\n      lastUpdatedAt: Date.now(),\n      state: 'Init',\n      intent,\n      submittedPromise,\n      confirmedPromise,\n      overrides,\n      onSubmissionError: rejectTxResponse,\n      onReceiptError: rejectTxReceipt,\n      onTransactionResponse: txResponse,\n      onTransactionReceipt: txReceipt,\n    };\n\n    const autoGasPriceSetting = this.gasSettingProvider(tx);\n    tx.autoGasPriceSetting = autoGasPriceSetting;\n\n    if (tx.overrides?.gasPrice === undefined) {\n      tx.overrides = tx.overrides ?? {};\n      tx.overrides.gasPrice = gweiToWei(\n        this.ethConnection.getAutoGasPriceGwei(\n          this.ethConnection.getAutoGasPrices(),\n          autoGasPriceSetting\n        )\n      );\n    }\n\n    this.queue.add(() => {\n      this.diagnosticsUpdater?.updateDiagnostics((d) => {\n        d.transactionsInQueue--;\n      });\n\n      return this.execute(tx);\n    }, tx);\n\n    return tx;\n  }\n\n  public dequeueTransction(tx: Transaction) {\n    this.queue.remove((queuedTx) => queuedTx?.id === tx.id);\n    tx.state = 'Cancel';\n  }\n\n  public prioritizeTransaction(tx: Transaction) {\n    this.queue.prioritize((queuedTx) => queuedTx?.id === tx.id);\n    tx.state = 'Prioritized';\n  }\n\n  /**\n   * Returns the current nonce and increments it in memory for the next transaction.\n   * If nonce is undefined, or there has been a big gap between transactions,\n   * refresh the nonce from the blockchain. This only replaces the nonce if the\n   * blockchain nonce is found to be higher than the local calculation.\n   * The stale timer is to support multiple wallets/applications interacting\n   * with the game at the same time.\n   */\n  private async getNonce() {\n    const shouldRefreshNonce =\n      this.nonce === undefined ||\n      (this.supportMultipleWallets &&\n        Date.now() - this.lastTransactionTimestamp > TxExecutor.NONCE_STALE_AFTER_MS);\n\n    if (shouldRefreshNonce) {\n      const chainNonce = await this.ethConnection.getNonce();\n      const localNonce = this.nonce || 0;\n      console.log(`refreshing nonce, local is ${localNonce} and chain is ${chainNonce}`);\n      this.nonce = Math.max(chainNonce, localNonce);\n    }\n\n    const nonce = this.nonce;\n    if (this.nonce !== undefined) this.nonce++;\n\n    return nonce;\n  }\n\n  /**\n   * Reset nonce.\n   * This will trigger a refresh from the blockchain the next time\n   * execution starts.\n   */\n  private async resetNonce() {\n    return this.nonceMutex.runExclusive(() => (this.nonce = undefined));\n  }\n\n  /**\n   * Return current counter and increment.\n   */\n  private nextId() {\n    return ++this.idSequence;\n  }\n\n  /**\n   * Executes the given queued transaction. This is a field rather than a method declaration on\n   * purpose for `this` purposes.\n   */\n  private execute = async (tx: Transaction) => {\n    let time_called: number | undefined = undefined;\n    let error: Error | undefined = undefined;\n    let time_submitted: number | undefined = undefined;\n    let time_confirmed: number | undefined = undefined;\n    let time_errored: number | undefined = undefined;\n    let tx_hash: string | undefined = undefined;\n\n    const time_exec_called = Date.now();\n\n\n    tx.state = 'Processing';\n\n    if (this.beforeTransaction) {\n      try {\n        await this.beforeTransaction(tx);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    const releaseMutex = await this.nonceMutex.acquire();\n    try {\n      const nonce = await this.getNonce();\n\n      const requestWithDefaults = Object.assign(\n        JSON.parse(JSON.stringify(this.defaultTxOptions)),\n        tx.overrides\n      );\n\n      time_called = Date.now();\n\n      const args = await tx.intent.args;\n      const submitted = await timeout<providers.TransactionResponse>(\n        tx.intent.contract[tx.intent.methodName](...args, {\n          ...requestWithDefaults,\n          nonce,\n        }),\n        TxExecutor.TX_SUBMIT_TIMEOUT,\n        `tx request ${tx.id} failed to submit: timed out}`\n      );\n\n      releaseMutex();\n\n      tx.state = 'Submit';\n      tx.hash = submitted.hash;\n\n      time_submitted = Date.now();\n      tx.lastUpdatedAt = time_submitted;\n      tx_hash = submitted.hash;\n      this.lastTransactionTimestamp = time_submitted;\n      tx.onTransactionResponse(submitted);\n\n      const confirmed = await this.ethConnection.waitForTransaction(submitted.hash);\n      if (confirmed.status !== 1) {\n        time_errored = Date.now();\n        tx.lastUpdatedAt = time_errored;\n        tx.state = 'Fail';\n        await this.resetNonce();\n        throw new Error('transaction reverted');\n      } else {\n        tx.state = 'Confirm';\n        time_confirmed = Date.now();\n        tx.lastUpdatedAt = time_confirmed;\n        tx.onTransactionReceipt(confirmed);\n      }\n    } catch (e) {\n      console.error(e);\n      tx.state = 'Fail';\n      error = e as Error;\n\n      // if the tx isnt submitted, the mutex hasnt been released.\n      // so we can't call resetNonce because that function waits\n      // for the mutex to be releaesd, so everything stops.\n      // instead we set the nonce to undefined manually\n      if (!time_submitted) {\n        this.nonce = undefined;\n        releaseMutex();\n        time_errored = Date.now();\n        tx.onSubmissionError(error);\n      } else {\n        // Ran out of retries, set nonce to undefined to refresh it\n        if (!time_errored) {\n          await this.resetNonce();\n          time_errored = Date.now();\n        }\n        tx.lastUpdatedAt = time_errored;\n        tx.onReceiptError(error);\n      }\n    } finally {\n      this.diagnosticsUpdater?.updateDiagnostics((d) => {\n        d.totalTransactions++;\n      });\n    }\n\n    const logEvent: NetworkEvent = {\n      tx_to: tx.intent.contract.address,\n      tx_type: tx.intent.methodName,\n      auto_gas_price_setting: tx.autoGasPriceSetting,\n      time_exec_called,\n      tx_hash,\n    };\n\n    if (time_called && time_submitted) {\n      logEvent.wait_submit = time_submitted - time_called;\n      if (time_confirmed) {\n        logEvent.wait_confirm = time_confirmed - time_called;\n      }\n    }\n\n    if (error && time_errored) {\n      logEvent.error = error.message || JSON.stringify(error);\n      logEvent.wait_error = time_errored - time_exec_called;\n\n      try {\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        if ((error as any).body) {\n          /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n          logEvent.parsed_error = String.fromCharCode.apply(null, (error as any).body || []);\n        }\n      } catch (e) {}\n    }\n\n    logEvent.rpc_endpoint = this.ethConnection.getRpcEndpoint();\n    logEvent.user_address = this.ethConnection.getAddress();\n\n    this.afterTransaction && this.afterTransaction(tx, logEvent);\n  };\n\n  public setDiagnosticUpdater(diagnosticUpdater?: DiagnosticUpdater) {\n    this.diagnosticsUpdater = diagnosticUpdater;\n  }\n}\n"]}