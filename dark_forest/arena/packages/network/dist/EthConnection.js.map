{"version":3,"file":"EthConnection.js","sourceRoot":"","sources":["../src/EthConnection.ts"],"names":[],"mappings":";;;;;;AAAA,yDAAuF;AACvF,mDAAgE;AAChE,iDAAgD;AAQhD,mCAA6E;AAC7E,kFAA8C;AAC9C,kEAAqC;AAErC,uCAA+F;AAC/F,uCAA6C;AAE7C,uDAAuD;AAEvD;;;;GAIG;AACH,MAAa,aAAa;IAiFxB,YAAmB,QAAmC,EAAE,WAAmB;QA1C3E;;;WAGG;QACK,cAAS,GAAc,8BAAkB,CAAC;QAuChD,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,kBAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,IAAA,mBAAU,EAAC,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,WAAW,GAAG,IAAA,mBAAU,EAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,IAAA,mBAAU,EAAC,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,UAAU,GAAG,IAAA,mBAAU,GAAE,CAAC;QAC/B,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAClD,uBAAuB;IACzB,CAAC;IAEO,KAAK,CAAC,eAAe;QAC3B,KAAK,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;YAC5C,oGAAoG;YACpG,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACnE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;SACvC;IACH,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,YAAY,CACvB,OAAe,EACf,MAAyB;QAEzB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAClC,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACnE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QACtC,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAqB,OAAe;QACpD,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC7C,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,mCAAmC,OAAO,EAAE,CAAC,CAAC;SAC/D;QACD,OAAO,QAAa,CAAC;IACvB,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,SAAS,CAAC,MAAc;QACnC,MAAM,WAAW,GAAG,MAAM,IAAA,sBAAY,EAAC,MAAM,CAAC,CAAC;QAC/C,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;QAC7B,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACrD,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,UAAU,CAAC,IAAY;QAClC,IAAI,CAAC,MAAM,GAAG,IAAI,eAAM,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9C,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAA,eAAO,EAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QACpE,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/B,CAAC;IAEO,KAAK,CAAC,cAAc;QAC1B,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAA,eAAO,EAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YACrE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SAClC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,gBAAgB;;QAC5B,IAAI,CAAC,SAAS,GAAG,MAAM,IAAA,0BAAgB,GAAE,CAAC;QAC1C,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACxC,MAAA,IAAI,CAAC,kBAAkB,0CAAE,iBAAiB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACpF,CAAC;IAED;;OAEG;IACI,gBAAgB;QACrB,OAAO,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACI,mBAAmB,CACxB,SAAoB,EACpB,eAAwC,CAAC,gDAAgD;;QAEzF,2FAA2F;QAC3F,MAAM,SAAS,GAAG,IAAA,2BAAiB,EAAC,eAAiC,EAAE,SAAS,CAAC,CAAC;QAElF,IAAI,SAAS,KAAK,SAAS,EAAE;YAC3B,OAAO,SAAS,CAAC;SAClB;QAED,yFAAyF;QACzF,yCAAyC;QACzC,MAAM,aAAa,GAAG,UAAU,CAAC,eAAe,CAAC,CAAC;QAElD,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE;YACzB,OAAO,aAAa,CAAC;SACtB;QAED,wEAAwE;QACxE,OAAO,SAAS,CAAC,OAAO,CAAC;IAC3B,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC;IACtC,CAAC;IAEM,SAAS;QACd,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAEM,yBAAyB,CAC9B,QAAkB;IAClB,6FAA6F;IAC7F,gDAAgD;IAChD,QAAsC,EACtC,WAAwB;QAExB,MAAM,mBAAmB,GAAG,IAAA,uBAAQ,EAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAEnF,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,iBAAyB,EAAE,EAAE;YAC5D,mBAAmB,CAAC,iBAAiB,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACK,UAAU,CAChB,iBAAyB,EACzB,QAAkB,EAClB,QAAsC,EACtC,WAAwB;QAExB,MAAM,mBAAmB,GAAG,IAAI,CAAC,WAAW,CAAC;QAC7C,IAAI,CAAC,WAAW,GAAG,iBAAiB,CAAC;QACrC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAE7C,OAAO,CAAC,GAAG,CAAC,yBAAyB,iBAAiB,GAAG,mBAAmB,SAAS,CAAC,CAAC;QAEvF,IAAI,CAAC,aAAa,CAChB,IAAI,CAAC,GAAG,CAAC,mBAAmB,GAAG,CAAC,EAAE,iBAAiB,CAAC,EACpD,iBAAiB,EACjB,WAAW,EACX,QAAQ,EACR,QAAQ,CACT,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,aAAa,CACzB,UAAkB,EAClB,QAAgB,EAChB,WAAwB,EACxB,QAAkB;IAClB,sEAAsE;IACtE,QAAsC;QAEtC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;YACvC,SAAS,EAAE,UAAU;YACrB,OAAO,EAAE,QAAQ;YACjB,GAAG,WAAW;SACf,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACnB,MAAM,UAAU,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACpD,MAAM,OAAO,GAAG,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC1C,IAAI,OAAO,KAAK,SAAS,EAAE;gBACzB,OAAO,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;aAC7B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,UAAU;QACf,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,SAAS,CAAC;SAClB;QAED,OAAO,IAAA,eAAO,EAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IAED;;OAEG;IACI,aAAa;QAClB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,SAAS,CAAC;SAClB;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;IAChC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,CAAC,CAAC;SACV;QAED,OAAO,IAAA,uBAAa,EAAS,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAClF,IAAI,CAAC,MAAM,CAAC,OAAO;SACpB,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,WAAW,CAAC,OAAe;QACtC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACvC;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,iBAAiB,CAAI,GAAM;QACtC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACvC;QAED,MAAM,WAAW,GAAG,IAAA,+BAAS,EAAC,GAAG,CAAC,CAAC;QACnC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAEtD,OAAO;YACL,SAAS;YACT,MAAM,EAAE,IAAA,eAAO,EAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YACpC,OAAO,EAAE,GAAG;SACb,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,WAAW,CAAC,OAAmB;QAC1C,OAAO,MAAM,IAAA,uBAAa,EAAY,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACjG,CAAC;IAED;;;OAGG;IACI,eAAe,CACpB,OAAqC;QAErC,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;QAC/C,OAAO,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;OAGG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;OAEG;IACI,YAAY;QACjB,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAEM,qBAAqB;QAC1B,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACI,kBAAkB,CAAC,MAAc;QACtC,OAAO,IAAA,4BAAkB,EAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACnD,CAAC;IAED;;OAEG;IACI,oBAAoB,CAAC,iBAAqC;QAC/D,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,EAAE;YAC9B,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,iBAAiB,CAClC,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,CAC9D,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,EAAE;YACtC,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,iBAAiB,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC;QAC7F,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,OAAO;QACZ,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEO,WAAW;QACjB,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SACvC;QAED,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SACrC;IACH,CAAC;IAED;;OAEG;IACK,YAAY;QAClB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,kCAAsB,CAAC,CAAC;QAC/F,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;IAChF,CAAC;CACF;AA5bD,sCA4bC;AAEM,KAAK,UAAU,mBAAmB,CAAC,MAAc;IACtD,MAAM,QAAQ,GAAG,MAAM,IAAA,sBAAY,EAAC,MAAM,CAAC,CAAC;IAC5C,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,cAAc,EAAE,CAAC;IACpD,OAAO,IAAI,aAAa,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AAClD,CAAC;AAJD,kDAIC","sourcesContent":["import { DEFAULT_GAS_PRICES, GAS_PRICES_INTERVAL_MS } from '@darkforest_eth/constants';\nimport { Monomitter, monomitter } from '@darkforest_eth/events';\nimport { address } from '@darkforest_eth/serde';\nimport {\n  AutoGasSetting,\n  DiagnosticUpdater,\n  EthAddress,\n  GasPrices,\n  SignedMessage,\n} from '@darkforest_eth/types';\nimport { BigNumber, Contract, EventFilter, providers, Wallet } from 'ethers';\nimport stringify from 'json-stable-stringify';\nimport debounce from 'just-debounce';\nimport { ContractLoader } from './Contracts';\nimport { callWithRetry, getGasSettingGwei, makeProvider, waitForTransaction } from './Network';\nimport { getAutoGasPrices } from './xDaiApi';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Responsible for\n * 1) loading the contracts\n * 2) connecting to the network\n */\nexport class EthConnection {\n  /**\n   * Keep a reference to all the contracts this {@link EthConnection} has loaded so that they can be\n   * reloaded if the RPC url changes.\n   *\n   * Keyed by the contract address.\n   */\n  private contracts: Map<string, Contract>;\n\n  /**\n   * Keep a reference to all the contract loaders this {@link EthConnection} has loaded\n   * so that they can be reloaded if the RPC url changes.\n   *\n   * Keyed by the contract address.\n   */\n  private loaders: Map<string, ContractLoader<Contract>>;\n\n  /**\n   * Allows {@link EthConnection} to update the global diagnostics, which are displayed in the game\n   * client's diagnostics pane.\n   */\n  private diagnosticsUpdater: DiagnosticUpdater | undefined;\n\n  /**\n   * Publishes an event whenever the current block number changes. Can skip block numbers.\n   */\n  public readonly blockNumber$: Monomitter<number>;\n\n  /**\n   * Publishes an event whenever the network's auto gas prices change.\n   */\n  public readonly gasPrices$: Monomitter<GasPrices>;\n\n  /**\n   * It is possible to instantiate an EthConnection without a signer, in which case it is still able\n   * to connect to the blockchain, without the ability to send transactions.\n   */\n  private signer: Wallet | undefined;\n\n  /**\n   * Represents the gas price one would pay to achieve the corresponding transaction confirmation\n   * speed.\n   */\n  private gasPrices: GasPrices = DEFAULT_GAS_PRICES;\n\n  /**\n   * Store this so we can cancel the interval.\n   */\n  private gasPricesInterval: ReturnType<typeof setInterval> | undefined;\n\n  /**\n   * Interval which reloads the balance of the account that this EthConnection is in charge of.\n   */\n  private balanceInterval: ReturnType<typeof setInterval> | undefined;\n\n  /**\n   * The current latest block number.\n   */\n  private blockNumber;\n\n  /**\n   * The provider is the lowest level interface we use to communicate with the blockchain.\n   */\n  private provider: providers.JsonRpcProvider;\n\n  /**\n   * Whenever the RPC url changes, we reload the contract, and also publish an event here.\n   */\n  public rpcChanged$: Monomitter<string>;\n\n  /**\n   * This is kept relatively up-to-date with the balance of the player's wallet on the latest block\n   * of whatever blockchain we're connected to.\n   */\n  private balance: BigNumber;\n\n  /**\n   * Any time the balance of the player's address changes, we publish an event here.\n   */\n  public readonly myBalance$: Monomitter<BigNumber>;\n\n  public constructor(provider: providers.JsonRpcProvider, blockNumber: number) {\n    this.contracts = new Map();\n    this.loaders = new Map();\n    this.provider = provider;\n    this.balance = BigNumber.from('0');\n    this.blockNumber = blockNumber;\n    this.blockNumber$ = monomitter(true);\n    this.rpcChanged$ = monomitter(true);\n    this.myBalance$ = monomitter(true);\n    this.gasPrices$ = monomitter();\n    this.rpcChanged$.publish(provider.connection.url);\n    // this.startPolling();\n  }\n\n  private async reloadContracts(): Promise<void> {\n    for (const [address, loader] of this.loaders) {\n      // Was going to dedupe this with `this.loadContract` but there is no reason to set the loader again.\n      const contract = await loader(address, this.provider, this.signer);\n      this.contracts.set(address, contract);\n    }\n  }\n\n  /**\n   * Loads a contract into this {@link EthConnection}.\n   *\n   * @param address The contract address to register the contract against.\n   * @param loader The loader used to load (or reload) this contract.\n   */\n  public async loadContract<T extends Contract>(\n    address: string,\n    loader: ContractLoader<T>\n  ): Promise<T> {\n    this.loaders.set(address, loader);\n    const contract = await loader(address, this.provider, this.signer);\n    this.contracts.set(address, contract);\n    return contract;\n  }\n\n  /**\n   * Retreives a contract from the registry. Must exist otherwise this will throw.\n   * @param address The address to load from the registry.\n   * @returns The contract requested\n   */\n  public getContract<T extends Contract>(address: string): T {\n    const contract = this.contracts.get(address);\n    if (!contract) {\n      throw new Error(`Contract never loaded. Address: ${address}`);\n    }\n    return contract as T;\n  }\n\n  /**\n   * Changes the RPC url we're connected to, and reloads the ethers contract references.\n   */\n  public async setRpcUrl(rpcUrl: string): Promise<void> {\n    const newProvider = await makeProvider(rpcUrl);\n    await this.reloadContracts();\n    this.rpcChanged$.publish(newProvider.connection.url);\n    this.provider = newProvider;\n  }\n\n  /**\n   * Changes the ethereum account on behalf of which this {@link EthConnection} sends transactions. Reloads\n   * the contracts.\n   */\n  public async setAccount(skey: string): Promise<void> {\n    this.signer = new Wallet(skey, this.provider);\n    this.balance = await this.loadBalance(address(this.signer.address));\n    await this.reloadContracts();\n  }\n\n  private async refreshBalance() {\n    if (this.signer) {\n      const balance = await this.loadBalance(address(this.signer.address));\n      this.balance = balance;\n      this.myBalance$.publish(balance);\n    }\n  }\n\n  /**\n   * Loads gas prices from xDai.\n   */\n  private async refreshGasPrices() {\n    this.gasPrices = await getAutoGasPrices();\n    this.gasPrices$.publish(this.gasPrices);\n    this.diagnosticsUpdater?.updateDiagnostics((d) => (d.gasPrices = this.gasPrices));\n  }\n\n  /**\n   * Gets a copy of the latest gas prices.\n   */\n  public getAutoGasPrices(): GasPrices {\n    return { ...this.gasPrices };\n  }\n\n  /**\n   * Get the gas price, measured in Gwei, that we should send given the current prices for\n   * transaction speeds, and given the user's gas price setting.\n   */\n  public getAutoGasPriceGwei(\n    gasPrices: GasPrices,\n    gasPriceSetting: AutoGasSetting | string // either auto or the gas price measured in gwei\n  ): number {\n    // if the gas price setting represents an 'auto' choice, return that choice's current price\n    const autoPrice = getGasSettingGwei(gasPriceSetting as AutoGasSetting, gasPrices);\n\n    if (autoPrice !== undefined) {\n      return autoPrice;\n    }\n\n    // if the gas price setting is not an auto choice, it is a string representing the user's\n    // preferred gas price, measured in gwei.\n    const parsedSetting = parseFloat(gasPriceSetting);\n\n    if (!isNaN(parsedSetting)) {\n      return parsedSetting;\n    }\n\n    // if the setting has become corrupted, just return an average gas price\n    return gasPrices.average;\n  }\n\n  public getRpcEndpoint(): string {\n    return this.provider.connection.url;\n  }\n\n  public hasSigner(): boolean {\n    return !!this.signer;\n  }\n\n  public subscribeToContractEvents(\n    contract: Contract,\n    // map from contract event to function. using type 'any' here to satisfy typescript - each of\n    // the functions has a different type signature.\n    handlers: Partial<Record<string, any>>,\n    eventFilter: EventFilter\n  ) {\n    const debouncedOnNewBlock = debounce(this.onNewBlock.bind(this), 1000, true, true);\n\n    this.provider.on('block', async (latestBlockNumber: number) => {\n      debouncedOnNewBlock(latestBlockNumber, contract, handlers, eventFilter);\n    });\n  }\n\n  /**\n   * Whenever we become aware of the fact that there have been one or more new blocks mined on the\n   * blockchain, we need to update the internal game state of the game to reflect everything that\n   * has happnened in those blocks. The way we find out what happened during those blocks is by\n   * filtering all the events that have occured in those blocks to those that represent the various\n   * actions that can occur on the game.\n   */\n  private onNewBlock(\n    latestBlockNumber: number,\n    contract: Contract,\n    handlers: Partial<Record<string, any>>,\n    eventFilter: EventFilter\n  ) {\n    const previousBlockNumber = this.blockNumber;\n    this.blockNumber = latestBlockNumber;\n    this.blockNumber$.publish(latestBlockNumber);\n\n    console.log(`processing events for ${latestBlockNumber - previousBlockNumber} blocks`);\n\n    this.processEvents(\n      Math.min(previousBlockNumber + 1, latestBlockNumber),\n      latestBlockNumber,\n      eventFilter,\n      contract,\n      handlers\n    );\n  }\n\n  /**\n   * Downloads and processes all the events that have occurred in the given range of blocks.\n   *\n   * @param startBlock inclusive\n   * @param endBlock inclusive\n   */\n  private async processEvents(\n    startBlock: number,\n    endBlock: number,\n    eventFilter: EventFilter,\n    contract: Contract,\n    // map from contract event name to the handler for that contract event\n    handlers: Partial<Record<string, any>>\n  ) {\n    const logs = await this.provider.getLogs({\n      fromBlock: startBlock, // inclusive\n      toBlock: endBlock, // inclusive\n      ...eventFilter,\n    });\n\n    logs.forEach((log) => {\n      const parsedData = contract.interface.parseLog(log);\n      const handler = handlers[parsedData.name];\n      if (handler !== undefined) {\n        handler(...parsedData.args);\n      }\n    });\n  }\n\n  /**\n   * Returns the address of the signer, if one was set.\n   */\n  public getAddress(): EthAddress | undefined {\n    if (!this.signer) {\n      return undefined;\n    }\n\n    return address(this.signer.address);\n  }\n\n  /**\n   * Returns the private key of the signer, if one was set.\n   */\n  public getPrivateKey(): string | undefined {\n    if (!this.signer) {\n      return undefined;\n    }\n\n    return this.signer.privateKey;\n  }\n\n  /**\n   * Gets the signer's nonce, or `0`.\n   */\n  public async getNonce(): Promise<number> {\n    if (!this.signer) {\n      return 0;\n    }\n\n    return callWithRetry<number>(this.provider.getTransactionCount.bind(this.provider), [\n      this.signer.address,\n    ]);\n  }\n\n  /**\n   * Signs a string, or throws an error if a signer has not been set.\n   */\n  public async signMessage(message: string): Promise<string> {\n    if (!this.signer) {\n      throw new Error('no signer was set.');\n    }\n\n    return this.signer.signMessage(message);\n  }\n\n  /**\n   * Returns a version of this message signed by the account that this {@code EthConnectio} is\n   * logged in as.\n   */\n  public async signMessageObject<T>(obj: T): Promise<SignedMessage<T>> {\n    if (!this.signer) {\n      throw new Error('no signer was set.');\n    }\n\n    const stringified = stringify(obj);\n    const signature = await this.signMessage(stringified);\n\n    return {\n      signature,\n      sender: address(this.signer.address),\n      message: obj,\n    };\n  }\n\n  /**\n   * Gets the balance of the given address (player or contract) measured in Wei. Wei is the base\n   * unit in which amounts of Ether and xDai are measured.\n   *\n   * @see https://ethdocs.org/en/latest/ether.html#denominations\n   */\n  public async loadBalance(address: EthAddress): Promise<BigNumber> {\n    return await callWithRetry<BigNumber>(this.provider.getBalance.bind(this.provider), [address]);\n  }\n\n  /**\n   * Sends a transaction on behalf of the account that can be set via\n   * {@link EthConnection.setAccount}. Throws an error if no account was set.\n   */\n  public sendTransaction(\n    request: providers.TransactionRequest\n  ): Promise<providers.TransactionResponse> {\n    if (!this.signer) throw new Error(`no signer`);\n    return this.signer.sendTransaction(request);\n  }\n\n  /**\n   * Gets the provider this {@link EthConnection} is currently using. Don't store a reference to\n   * this (unless you're writing plugins), as the provider can change.\n   */\n  public getProvider(): providers.JsonRpcProvider {\n    return this.provider;\n  }\n\n  /**\n   * Gets the wallet, which represents the account that this {@link EthConnection} sends\n   * transactions on behalf of.\n   */\n  public getSigner(): Wallet | undefined {\n    return this.signer;\n  }\n\n  /**\n   * Gets the current balance of the burner wallet this {@link EthConnection} is in charge of.\n   */\n  public getMyBalance(): BigNumber | undefined {\n    return this.balance;\n  }\n\n  public getCurrentBlockNumber() {\n    return this.blockNumber;\n  }\n\n  /**\n   * Returns a promise that resolves when the transaction with the given hash is confirmed, and\n   * rejects if the transaction reverts or if there's a network error.\n   */\n  public waitForTransaction(txHash: string): Promise<providers.TransactionReceipt> {\n    return waitForTransaction(this.provider, txHash);\n  }\n\n  /**\n   * For collecting diagnostics.\n   */\n  public setDiagnosticUpdater(diagnosticUpdater?: DiagnosticUpdater) {\n    this.diagnosticsUpdater = diagnosticUpdater;\n    this.rpcChanged$.subscribe(() => {\n      diagnosticUpdater?.updateDiagnostics(\n        (diagnostics) => (diagnostics.rpcUrl = this.getRpcEndpoint())\n      );\n    });\n    this.gasPrices$.subscribe((gasPrices) => {\n      diagnosticUpdater?.updateDiagnostics((diagnostics) => (diagnostics.gasPrices = gasPrices));\n    });\n  }\n\n  /**\n   * Cleans up any important handles.\n   */\n  public destroy() {\n    this.stopPolling();\n  }\n\n  private stopPolling() {\n    if (this.gasPricesInterval) {\n      clearInterval(this.gasPricesInterval);\n    }\n\n    if (this.balanceInterval) {\n      clearInterval(this.balanceInterval);\n    }\n  }\n\n  /**\n   * Kicks off an interval that regularly reloads the gas prices from xDai.\n   */\n  private startPolling() {\n    this.refreshGasPrices();\n    this.gasPricesInterval = setInterval(this.refreshGasPrices.bind(this), GAS_PRICES_INTERVAL_MS);\n    this.refreshBalance();\n    this.balanceInterval = setInterval(this.refreshBalance.bind(this), 1000 * 10);\n  }\n}\n\nexport async function createEthConnection(rpcUrl: string): Promise<EthConnection> {\n  const provider = await makeProvider(rpcUrl);\n  const blockNumber = await provider.getBlockNumber();\n  return new EthConnection(provider, blockNumber);\n}\n"]}