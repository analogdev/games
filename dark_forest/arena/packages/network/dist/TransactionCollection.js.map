{"version":3,"file":"TransactionCollection.js","sourceRoot":"","sources":["../src/TransactionCollection.ts"],"names":[],"mappings":";;;AAEA;;;GAGG;AACH,MAAa,YAAY;IAAzB;QACU,iBAAY,GAAkB,EAAE,CAAC;IAqC3C,CAAC;IAnCC;;OAEG;IACI,cAAc,CAAC,EAAe;QACnC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED;;OAEG;IACI,iBAAiB,CAAC,EAAe;QACtC,IAAI,CAAC,YAAY,CAAC,MAAM,CACtB,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,KAAK,GAAG,CAAC,EAChD,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,eAAe,CACpB,oBAA6D;QAE7D,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;IACxD,CAAC;IAED;;;OAGG;IACI,cAAc,CACnB,oBAA6D;QAE7D,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;IACrE,CAAC;CACF;AAtCD,oCAsCC","sourcesContent":["import { Transaction, TransactionCollection, TxIntent } from '@darkforest_eth/types';\n\n/**\n * Default implementation of a transaction collection - provides a simple api for adding, removing,\n * and querying by type of transaction.\n */\nexport class TxCollection implements TransactionCollection {\n  private transactions: Transaction[] = [];\n\n  /**\n   * Internally records the given transaction.\n   */\n  public addTransaction(tx: Transaction) {\n    this.transactions.push(tx);\n  }\n\n  /**\n   * Removes the internal record of the given transaction.\n   */\n  public removeTransaction(tx: Transaction) {\n    this.transactions.splice(\n      this.transactions.findIndex((tx2) => tx === tx2),\n      1\n    );\n  }\n\n  /**\n   * Gets all transactions which are filtered to a particular type given a predicate.\n   */\n  public getTransactions<T extends TxIntent>(\n    transactionPredicate: (u: Transaction) => u is Transaction<T>\n  ): Transaction<T>[] {\n    return this.transactions.filter(transactionPredicate);\n  }\n\n  /**\n   * Returns whether or not there is at least one transaction which is filtered to by the given\n   * predicate.\n   */\n  public hasTransaction<T extends TxIntent>(\n    transactionPredicate: (u: Transaction) => u is Transaction<T>\n  ): boolean {\n    return this.transactions.filter(transactionPredicate).length !== 0;\n  }\n}\n"]}