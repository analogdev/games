{"version":3,"file":"Monomitter.js","sourceRoot":"","sources":["../src/Monomitter.ts"],"names":[],"mappings":";AAAA,+CAA+C;AAC/C,iEAAiE;;;AAcjE;;;;;GAKG;AACH,SAAgB,UAAU,CAAI,qBAAqB,GAAG,KAAK;IACzD,MAAM,SAAS,GAAG,IAAI,GAAG,EAAe,CAAC;IACzC,IAAI,YAAY,GAAG,KAAK,CAAC;IACzB,IAAI,WAAW,GAAkB,SAAS,CAAC;IAE3C,SAAS,OAAO,CAAC,KAAQ;QACvB,YAAY,GAAG,IAAI,CAAC;QACpB,WAAW,GAAG,KAAK,CAAC;QACpB,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IACnD,CAAC;IAED,SAAS,SAAS,CAAC,QAAqB;QACtC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAExB,IAAI,qBAAqB,IAAI,YAAY,EAAE;YACzC,QAAQ,CAAC,WAAgB,CAAC,CAAC;SAC5B;QAED,OAAO;YACL,WAAW;gBACT,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC7B,CAAC;SACF,CAAC;IACJ,CAAC;IAED,SAAS,KAAK;QACZ,SAAS,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC;IAED,OAAO;QACL,OAAO;QACP,SAAS;QACT,KAAK;KACN,CAAC;AACJ,CAAC;AAlCD,gCAkCC","sourcesContent":["// Typed single pub / sub pattern, inspired by:\n// https://github.com/loilo/monomitter/blob/master/monomitter.mjs\n\nexport type Callback<T> = (data: T) => void;\n\nexport type Subscription = {\n  unsubscribe: () => void;\n};\n\nexport type Monomitter<T> = {\n  publish: (data: T) => void;\n  subscribe: (cb: Callback<T>) => Subscription;\n  clear: () => void;\n};\n\n/**\n * Constructs a new event emitter, whose purpose is to emit values of the given type.\n *\n * @param emitLatestOnSubscribe - if this is true, upon subscription immediately emit\n *                                the most recently set value, if there is one\n */\nexport function monomitter<T>(emitLatestOnSubscribe = false): Monomitter<T> {\n  const callbacks = new Set<Callback<T>>();\n  let valueBeenSet = false;\n  let latestValue: T | undefined = undefined;\n\n  function publish(value: T) {\n    valueBeenSet = true;\n    latestValue = value;\n    callbacks.forEach((callback) => callback(value));\n  }\n\n  function subscribe(callback: Callback<T>) {\n    callbacks.add(callback);\n\n    if (emitLatestOnSubscribe && valueBeenSet) {\n      callback(latestValue as T);\n    }\n\n    return {\n      unsubscribe() {\n        callbacks.delete(callback);\n      },\n    };\n  }\n\n  function clear() {\n    callbacks.clear();\n  }\n\n  return {\n    publish,\n    subscribe,\n    clear,\n  };\n}\n"]}